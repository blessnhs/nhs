자마린 안드로이드(Xamarin Android)에서 구글 계정으로 로그인 + 파이어베이스
https://blog.naver.com/haruby511/221487754607
프로파일
 HARUBY ・ 2019. 3. 14. 3:59
URL 복사  이웃추가 
온라인 서비스를 제공하려면 각 사용자를 식별할 방법이 반드시 필요합니다.

보통 이를 위해서 사용자에게 ID와 암호를 만들게 하고 성명, 주소, 결제 정보 등을 수집합니다.

그런데 이렇게 되면, 해커들의 먹잇감이 되기 쉽고, 법적으로 개인 정보 보호 의무를 져야 합니다.

보안 인프라를 갖추고, 해킹을 막아내고, 법적 의무까지 다하는 것은 개인이나 중소 개발사에게는 쉽지 않은 일입니다.

이러한 문제를 해결할 수 있는 방법으로 3자 계정 제공 업체의 계정을 제공 받을 수 있습니다.

직접 계정을 관리하지 않고 구글이나 페이스북, 트위터 계정을 빌리는 것입니다.

​

구체적으로 들어가기 전에, 먼저 OAuth에 대해서 간단히 정리하겠습니다.

OAuth는 계정 제공 업체(구글, 페이스북, 트위터 등)들이 제공하는 일종의 SDK 서비스입니다.

개발자들에게 자신들의 서비스에 가입된 사용자의 프로필 등에 접근할 수 있는 권한을 '일시적'으로 부여하는 기능입니다.

​

그 메커니즘을 간단하게 정리하면 이렇습니다.

1. 개발자는 각 계정 제공 업체와 플랫폼이 제공하는 방법에 따라 사용자에게 로그인 창을 띄웁니다.

2. 사용자가 정상적으로 로그인했으면 계정 제공 업체는 해당 사용자에 대한 '액세스 토큰'을 개발자에게 보내줍니다.

3. 개발자가 액세스 토큰을 계정 제공 업체에 보내면 해당 사용자의 프로필을 보여줍니다.

​

즉, 이 액세스 토큰을 통해 각 사용자를 식별할 수 있습니다. 그런데 액세스 토큰은 일정 시간이 지나면 효력을 상실합니다.

그렇기 때문에 이것을 그냥 앱 메모리에 저장해두면 앱이 꺼질 때 사용자를 식별할 수 있는 방법을 완전히 잃게 됩니다.

물론 매번 앱이 켜질 때마다 사용자에게 로그인을 다시 하라고 할 수 있습니다.

당연하지만 이렇게 되면 사용자가 몹시 번거로울 것이고 앱에 대한 인상이 나빠질 것입니다.

이런 상황을 막으려면 서버에 ID와 암호를 저장하고 로그인 한 기기를 기록해야 합니다.

그러면 결국 개인 정보를 수집해야 한다는 것이고, 문제는 원점으로 돌아가고 맙니다.

​

이 지점에서 구글 파이어베이스가 하나의 해결책이 됩니다.

파이어베이스는 구글, 페이스북, 트위터 등에서 제공하는 액세스 토큰을 받아서 그 프로필을 읽은 다음 파이어베이스 DB에 영구 보관합니다.

그리고, 개발자가 사용할 수 있는 사용자의 UID를 발급해주고, 사용자가 로그인 한 기기들도 대신 관리해줍니다.

덕분에 개발자는 따로 서버에 사용자들의 정보와 기기를 기록하지 않아도 됩니다. (PC는 기기 기록이 지원되지 않습니다.)

​

​

그러면 이제 구현을 해봅시다.

액세스 토큰을 받는 과정(OAuth)과 파이어베이스에 등록하는 과정은 서로 별개이지만 안드로이드 앱에 대해서는 이 둘을 묶어놨습니다.

그래서 중간 중간 테스트를 해볼 수 없기 때문에 놓친 것이 없는지 잘 확인하셔야 합니다.

​

https://console.firebase.google.com/

파이어베이스 콘솔로 이동해서 새 프로젝트를 만듭니다. (기존 구글 API 프로젝트가 있으면 그것과 묶을 수 있습니다.)

대시 보드 상단의 '앱 추가'를 선택합니다.

​

안드로이드 패키지 ID를 입력합니다. 이것은 보통 com.company.myapp 형식입니다. 안드로이드 매니페스트의 그것과 일치해야 합니다.

​

'디버그 서명 인증서 SHA-1'은 선택 사항이라고 나오지만 값을 넣어야 디버깅 및 테스트를 할 수 있습니다.

'서명 인증서 SHA-1'은 안드로이드 앱을 패키징할 때 사용하는 키 스토어(.keystore)로부터 얻는 값입니다.

'디버그'가 붙은 이유는 아직 개발 상태인 앱은 임의의 디버깅 전용 키 스토어로 자동 서명되기 때문입니다.

그 키 스토어를 직접 찾아서 그것의 SHA-1을 얻은 다음, 이 칸에 넣어 달라는 말을 아주 매우 심각하게 짧으면서도 함축적으로 적어 놓은 것입니다.

​C:\Program Files\Android\jdk\microsoft_dist_openjdk_1.8.0.25\bin

자마린 안드로이드의 경우 이 키 스토어는 다음 경로에 있습니다.

C:\Users\(사용자)\AppData\Local\Xamarin\Mono for Android\debug.keystore
이것의 SHA-1을 보려면 keytool.exe가 필요합니다. keytool은 JDK에 포함되어 있습니다.

C:\Program Files (x86)\Java\jdk1.8.0_161\bin\keytool.exe
jdk1.8.0_161 부분은 환경에 따라 다를 수 있습니다.

​

그러면 cmd로 이 경로를 열고 다음 커맨드를 입력합니다.

keytool.exe -list -v -keystore "%LocalAppData%\Xamarin\Mono for Android\debug.keystore" -alias androiddebugkey -storepass android -keypass android
다음과 같은 부분이 출력될 것입니다.

SHA1: E6:C1:16:4E:CC:F3:F8:B9:50:7C:4F:33:A8:6B:2A:1A:FE:1A:25:07
SHA1: 뒷부분을 복사하여 '디버그 서명 인증서 SHA-1'에 붙여 넣습니다.

keytool.exe -list -v -keystore "%LocalAppData%\Xamarin\Mono for Android\keystore\NHS\NHS.keystore"
​2F:24:2F:E2:A4:C7:72:F8:08:0F:ED:0D:83:DA:3C:75:22:38:B3:3F

다음 단계로 넘어가면 google-services.json을 다운로드하라고 할 것입니다.

다운로드 받은 다음 csproj 위치로 옮깁니다.

​

그 다음 단계는 gradle에서 종속성을 추가하라는 것입니다. 안드로이드 스튜디오 개발자들에게 해당됩니다.

자마린은 NuGet으로 Xamarin.GooglePlayServices.Auth와 Xamarin.Firebase.Auth를 설치하면 됩니다.

​

마지막 단계는, 연결을 확인한다고 하는데, 그냥 건너뜁니다.

​

그리고 파이어베이스 콘솔의 왼쪽 메뉴에서 '개발 > Authentication'을 선택하고 '로그인 방법' 탭을 엽니다.

'Google' 항목을 선택하여 '사용'으로 설정하고 저장합니다.

​

​

이제 비쥬얼 스튜디오로 와서, 아까 받은 google-services.json을 프로젝트에 포함시킵니다.

이때 vs를 재시작해야합니다.

그리고 속성 창을 엽니다. 여기서 google-services.json에 대한 '빌드 작업'을 GoogleServicesJson으로 변경합니다.

​

MainActivity의 OnCreate()에 다음을 추가합니다.

using Android.Gms.Common;
using Android.Gms.Auth.Api;
using Android.Gms.Common.Apis;
using Android.Gms.Auth.Api.SignIn;
using Firebase;
using Firebase.Auth;

public FirebaseAuth FirebaseAuth { get; private set; }
public GoogleApiClient GoogleApiClient { get; private set; }

protected override void OnCreate(Bundle savedInstanceState)
{
    base.OnCreate(savedInstanceState);

    FirebaseApp.InitializeApp(Application.Context);
    FirebaseAuth = FirebaseAuth.Instance;

    GoogleSignInOptions signInOptions = new GoogleSignInOptions.Builder(GoogleSignInOptions.DefaultSignIn)
        .RequestIdToken("OAuth 클라이언트 ID")
        .RequestEmail()
        .Build();
    GoogleApiClient = new GoogleApiClient.Builder(this)
        .EnableAutoManage(this, this/*GoogleApiClient.IOnConnectionFailedListener*/)
        .AddApi(Auth.GOOGLE_SIGN_IN_API, signInOptions)
        .Build();
}
MainActivity는 GoogleApiClient.IOnConnectionFailedListener 인터페이스를 구현해야 합니다.

​

"OAuth 클라이언트 ID"는 파이어베이스 콘솔이 아니라 구글 API 콘솔에서 따로 구해야 합니다.

​

파이어베이스 프로젝트를 만드셨다면 구글 API 프로젝트도 자동으로 만들어졌을 것입니다.

https://console.developers.google.com/apis/

(기존 구글 API 프로젝트와 묶은 경우는 그 구글 API 프로젝트에서 구해야 합니다.)

​

'왼쪽 상단 3선 메뉴 > API 및 서비스 > 사용자 인증 정보'로 이동합니다.

중간에 'OAuth 2.0 클라이언트 ID' 부분이 있습니다.

유형이 '웹 애플리케이션' 또는 '기타'인 항목의 '클라이언트 ID'를 복사해서 "OAuth 클라이언트 ID"에 붙여넣습니다.

만약 이런 유형의 ID가 없다면 상단 '사용자 인증 정보 만들기'를 통해 새로 만들 수 있습니다.

​

이제 프로젝트를 '다시 빌드'합니다. (google-services.json을 추가/변경했다면, 그냥 빌드 말고 다시 빌드를 하는 것이 좋습니다.)

그리고 디버깅해봅시다.

아무 오류 없이 OnCreate()이 실행된다면 절반은 성공한 것입니다.

​

만약 

FirebaseAuth = FirebaseAuth.Instance;
에서 IllegalStateException이 발생한다면 파이어베이스 콘솔에서 앱이 제대로 등록되었는지 확인하세요.

'파이어베이스 콘솔 왼쪽 메뉴의 톱니바퀴 메뉴 > 프로젝트 설정> 일반' 탭의 하단에 등록한 앱들이 표시됩니다.

​

패키지 ID, SHA-1이 정확한지 확인하세요.

패키지 ID가 틀렸다면 앱을 다시 등록해야 하고, SHA-1이 틀렸다면 해당 목록에서 추가/제거가 가능합니다.

패키지 ID나 SHA-1을 변경했다면 google-services.json을 다시 다운로드 받아서 csproj 위치에 덮어씁니다. 그리고 '다시 빌드'합니다.

​

google-services.json의 빌드 작업이 GoogleServicesJson인지 다시 확인하세요.

​

​

이제 구글 로그인 구현입니다.

로그인 버튼이라든지 로그인 이벤트를 일으킬 수 있는 것을 각 앱의 필요에 따라 추가합니다.

그리고 해당 이벤트를 MainActivity에서 다음과 같이 구현합니다.

const int SignInRequestCode = 9001;

public void GoogleSignIn()
{
    Intent signInIntent = Auth.GoogleSignInApi.GetSignInIntent(GoogleApiClient);
    StartActivityForResult(signInIntent, SignInRequestCode);
}
이제 이 Intent를 처리합니다.

protected override void OnActivityResult(int requestCode, Result resultCode, Intent data)
{
    base.OnActivityResult(requestCode, resultCode, data);
    switch (requestCode)
    {
        case SignInRequestCode:
            ProcessSignInResult(data);
            break;
    }
}

async void ProcessSignInResult(Intent data)
{
    GoogleSignInResult signInResult = Auth.GoogleSignInApi.GetSignInResultFromIntent(data);
    if (signInResult.IsSuccess)
    {
        AuthCredential credential = GoogleAuthProvider.GetCredential(signInResult.SignInAccount.IdToken, null);
        try
        {
            IAuthResult authResult = await FirebaseAuth.SignInWithCredentialAsync(credential);
            FirebaseUser user = authResult.User;
            // 사용자 로그인 및 파이어베이스 등록 완료
        }
        catch (Exception ex)
        {
            new Handler(MainLooper).Post(() => new AlertDialog.Builder(this).SetMessage("파이어베이스 등록 실패\n\n" + ex).Show());
        }
    }
    else
    {
        new AlertDialog.Builder(this).SetMessage("구글 로그인 실패").Show();
    }
}
signInResult.IsSuccess가 true면 성공입니다.

​

만약 false가 나온다면 'OAuth 클라이언트 ID'를 다시 확인하세요.

'웹 애플리케이션'이나 '기타' 유형이어야 합니다.

​

파이어베이스 콘솔에서 SHA-1이 올바르게 등록되었는지, google-services.json에 문제가 없는지 확인하세요.

​

​

그런데 이렇게 구현하고 막상 앱을 몇 번씩 껐다 켜면서 실행해보면 기기 기록이 안됩니다.

다시 말하면, 매번 로그인 액티비티가 새로 뜹니다.

​

기기 기록을 적용 받으려면 로그인 이벤트를 실행하기 전에 현재 로그인 한 사용자가 있는지를 먼저 확인해야 합니다.

FirebaseUser user = FirebaseAuth.CurrentUser;
user가 null이면 현재 이 기기에 로그인한 사용자가 없습니다.

로그인 액티비티를 띄우면 됩니다.

​

반면, null이 아니면 현재 이 기기에 로그인한 사용자가 있다는 것이고, 이 FirebaseUser가 해당 사용자를 의미합니다.

로그인 없이 그대로 진행하면 됩니다.

​

​

마지막으로, 현재 사용자를 이 기기에서 로그아웃시키려면 다음과 같이 합니다.

FirebaseAuth.SignOut();
​

FirebaseUser 객체 안에 유용한 정보들이 담겨 있으니, 직접 보시고 각 앱에 맞게 활용하시면 되겠습니다.

​

​

앱을 구글 플레이를 통해 배포할 경우, 배포 앱에 대한 SHA-1도 파이어베이스 콘솔에 등록해야 합니다.

만약 구글 플레이 앱 서명을 사용하고 있다면 '출시 관리 > 앱 서명'의 '앱 서명 인증서' 부분에 SHA-1이 나와 있습니다.

반면 구글 플레이 앱 서명을 사용하고 있지 않다면, 디버그 키 스토어의 SHA-1을 얻었던 것처럼 keytool.exe로 보면 됩니다.
[출처] 자마린 안드로이드(Xamarin Android)에서 구글 계정으로 로그인 + 파이어베이스|작성자 HARUBY
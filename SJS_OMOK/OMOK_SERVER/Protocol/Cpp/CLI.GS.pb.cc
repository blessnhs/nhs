// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CLI.GS.proto

#include "CLI.GS.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class VERSION_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VERSION_REQ> _instance;
} _VERSION_REQ_default_instance_;
class LOGIN_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOGIN_REQ> _instance;
} _LOGIN_REQ_default_instance_;
class CREATE_ROOM_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CREATE_ROOM_REQ> _instance;
} _CREATE_ROOM_REQ_default_instance_;
class ENTER_ROOM_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ENTER_ROOM_REQ> _instance;
} _ENTER_ROOM_REQ_default_instance_;
class LEAVE_ROOM_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LEAVE_ROOM_REQ> _instance;
} _LEAVE_ROOM_REQ_default_instance_;
class ROOM_LIST_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROOM_LIST_REQ> _instance;
} _ROOM_LIST_REQ_default_instance_;
class MATCH_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MATCH_REQ> _instance;
} _MATCH_REQ_default_instance_;
class RANK_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RANK_REQ> _instance;
} _RANK_REQ_default_instance_;
class QNS_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QNS_REQ> _instance;
} _QNS_REQ_default_instance_;
class ROOM_PASS_THROUGH_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROOM_PASS_THROUGH_REQ> _instance;
} _ROOM_PASS_THROUGH_REQ_default_instance_;
class CANCEL_MATCH_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CANCEL_MATCH_REQ> _instance;
} _CANCEL_MATCH_REQ_default_instance_;
class NOTICE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NOTICE_REQ> _instance;
} _NOTICE_REQ_default_instance_;
class CHECK_NICKNAME_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CHECK_NICKNAME_REQ> _instance;
} _CHECK_NICKNAME_REQ_default_instance_;
class BITMAP_MESSAGE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BITMAP_MESSAGE_REQ> _instance;
} _BITMAP_MESSAGE_REQ_default_instance_;
class AUDIO_MESSAGE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AUDIO_MESSAGE_REQ> _instance;
} _AUDIO_MESSAGE_REQ_default_instance_;
static void InitDefaultsscc_info_AUDIO_MESSAGE_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AUDIO_MESSAGE_REQ_default_instance_;
    new (ptr) ::AUDIO_MESSAGE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AUDIO_MESSAGE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AUDIO_MESSAGE_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AUDIO_MESSAGE_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_BITMAP_MESSAGE_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BITMAP_MESSAGE_REQ_default_instance_;
    new (ptr) ::BITMAP_MESSAGE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BITMAP_MESSAGE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BITMAP_MESSAGE_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BITMAP_MESSAGE_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_CANCEL_MATCH_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CANCEL_MATCH_REQ_default_instance_;
    new (ptr) ::CANCEL_MATCH_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CANCEL_MATCH_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CANCEL_MATCH_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CANCEL_MATCH_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_CHECK_NICKNAME_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CHECK_NICKNAME_REQ_default_instance_;
    new (ptr) ::CHECK_NICKNAME_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CHECK_NICKNAME_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CHECK_NICKNAME_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CHECK_NICKNAME_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_CREATE_ROOM_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CREATE_ROOM_REQ_default_instance_;
    new (ptr) ::CREATE_ROOM_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CREATE_ROOM_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CREATE_ROOM_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CREATE_ROOM_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_ENTER_ROOM_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ENTER_ROOM_REQ_default_instance_;
    new (ptr) ::ENTER_ROOM_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ENTER_ROOM_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ENTER_ROOM_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ENTER_ROOM_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_LEAVE_ROOM_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LEAVE_ROOM_REQ_default_instance_;
    new (ptr) ::LEAVE_ROOM_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LEAVE_ROOM_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LEAVE_ROOM_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LEAVE_ROOM_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_LOGIN_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOGIN_REQ_default_instance_;
    new (ptr) ::LOGIN_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOGIN_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LOGIN_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LOGIN_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_MATCH_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MATCH_REQ_default_instance_;
    new (ptr) ::MATCH_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MATCH_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MATCH_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_NOTICE_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NOTICE_REQ_default_instance_;
    new (ptr) ::NOTICE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NOTICE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NOTICE_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NOTICE_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_QNS_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QNS_REQ_default_instance_;
    new (ptr) ::QNS_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::QNS_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QNS_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QNS_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_RANK_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RANK_REQ_default_instance_;
    new (ptr) ::RANK_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RANK_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RANK_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RANK_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_ROOM_LIST_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ROOM_LIST_REQ_default_instance_;
    new (ptr) ::ROOM_LIST_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ROOM_LIST_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROOM_LIST_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ROOM_LIST_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_ROOM_PASS_THROUGH_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ROOM_PASS_THROUGH_REQ_default_instance_;
    new (ptr) ::ROOM_PASS_THROUGH_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ROOM_PASS_THROUGH_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROOM_PASS_THROUGH_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ROOM_PASS_THROUGH_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_VERSION_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VERSION_REQ_default_instance_;
    new (ptr) ::VERSION_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VERSION_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VERSION_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VERSION_REQ_CLI_2eGS_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CLI_2eGS_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_CLI_2eGS_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CLI_2eGS_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CLI_2eGS_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::VERSION_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VERSION_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VERSION_REQ, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::LOGIN_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOGIN_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_REQ, var_uid_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_REQ, var_token_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_REQ, var_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_REQ, var_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_REQ, var_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_REQ, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::MATCH_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MATCH_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH_REQ, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::RANK_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RANK_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RANK_REQ, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::QNS_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::QNS_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QNS_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::QNS_REQ, var_message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_REQ, var_message_),
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_REQ, var_message_int_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CANCEL_MATCH_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CANCEL_MATCH_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CANCEL_MATCH_REQ, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::NOTICE_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NOTICE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NOTICE_REQ, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CHECK_NICKNAME_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CHECK_NICKNAME_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CHECK_NICKNAME_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::CHECK_NICKNAME_REQ, var_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_REQ, var_message_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_REQ, var_message_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::VERSION_REQ)},
  { 7, 15, sizeof(::LOGIN_REQ)},
  { 18, 25, sizeof(::CREATE_ROOM_REQ)},
  { 27, 34, sizeof(::ENTER_ROOM_REQ)},
  { 36, 43, sizeof(::LEAVE_ROOM_REQ)},
  { 45, 51, sizeof(::ROOM_LIST_REQ)},
  { 52, 58, sizeof(::MATCH_REQ)},
  { 59, 65, sizeof(::RANK_REQ)},
  { 66, 73, sizeof(::QNS_REQ)},
  { 75, 83, sizeof(::ROOM_PASS_THROUGH_REQ)},
  { 86, 92, sizeof(::CANCEL_MATCH_REQ)},
  { 93, 99, sizeof(::NOTICE_REQ)},
  { 100, 107, sizeof(::CHECK_NICKNAME_REQ)},
  { 109, 116, sizeof(::BITMAP_MESSAGE_REQ)},
  { 118, 125, sizeof(::AUDIO_MESSAGE_REQ)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VERSION_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOGIN_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CREATE_ROOM_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ENTER_ROOM_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LEAVE_ROOM_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ROOM_LIST_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MATCH_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RANK_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QNS_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ROOM_PASS_THROUGH_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CANCEL_MATCH_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NOTICE_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CHECK_NICKNAME_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BITMAP_MESSAGE_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AUDIO_MESSAGE_REQ_default_instance_),
};

const char descriptor_table_protodef_CLI_2eGS_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014CLI.GS.proto\032\nEnum.proto\032\017Structure.pr"
  "oto\"8\n\013VERSION_REQ\022)\n\002id\030\001 \001(\0162\t.PROTOCO"
  "L:\022ID_PKT_VERSION_REQ\"X\n\tLOGIN_REQ\022\'\n\002id"
  "\030\001 \001(\0162\t.PROTOCOL:\020ID_PKT_LOGIN_REQ\022\017\n\007v"
  "ar_uid\030\002 \002(\t\022\021\n\tvar_token\030\003 \002(\t\"R\n\017CREAT"
  "E_ROOM_REQ\022-\n\002id\030\001 \001(\0162\t.PROTOCOL:\026ID_PK"
  "T_CREATE_ROOM_REQ\022\020\n\010var_name\030\002 \002(\014\"N\n\016E"
  "NTER_ROOM_REQ\022,\n\002id\030\001 \001(\0162\t.PROTOCOL:\025ID"
  "_PKT_ENTER_ROOM_REQ\022\016\n\006var_id\030\002 \002(\005\"N\n\016L"
  "EAVE_ROOM_REQ\022,\n\002id\030\001 \001(\0162\t.PROTOCOL:\025ID"
  "_PKT_LEAVE_ROOM_REQ\022\016\n\006var_id\030\002 \002(\005\"<\n\rR"
  "OOM_LIST_REQ\022+\n\002id\030\001 \001(\0162\t.PROTOCOL:\024ID_"
  "PKT_ROOM_LIST_REQ\"4\n\tMATCH_REQ\022\'\n\002id\030\001 \001"
  "(\0162\t.PROTOCOL:\020ID_PKT_MATCH_REQ\"2\n\010RANK_"
  "REQ\022&\n\002id\030\001 \001(\0162\t.PROTOCOL:\017ID_PKT_RANK_"
  "REQ\"E\n\007QNS_REQ\022%\n\002id\030\001 \001(\0162\t.PROTOCOL:\016I"
  "D_PKT_QNS_REQ\022\023\n\013var_message\030\002 \002(\014\"z\n\025RO"
  "OM_PASS_THROUGH_REQ\0223\n\002id\030\001 \001(\0162\t.PROTOC"
  "OL:\034ID_PKT_ROOM_PASS_THROUGH_REQ\022\023\n\013var_"
  "message\030\002 \002(\014\022\027\n\017var_message_int\030\003 \002(\005\"B"
  "\n\020CANCEL_MATCH_REQ\022.\n\002id\030\001 \001(\0162\t.PROTOCO"
  "L:\027ID_PKT_CANCEL_MATCH_REQ\"6\n\nNOTICE_REQ"
  "\022(\n\002id\030\001 \001(\0162\t.PROTOCOL:\021ID_PKT_NOTICE_R"
  "EQ\"X\n\022CHECK_NICKNAME_REQ\0220\n\002id\030\001 \001(\0162\t.P"
  "ROTOCOL:\031ID_PKT_CHECK_NICKNAME_REQ\022\020\n\010va"
  "r_name\030\002 \002(\014\"[\n\022BITMAP_MESSAGE_REQ\0220\n\002id"
  "\030\001 \001(\0162\t.PROTOCOL:\031ID_PKT_BITMAP_MESSAGE"
  "_REQ\022\023\n\013var_message\030\002 \003(\014\"Y\n\021AUDIO_MESSA"
  "GE_REQ\022/\n\002id\030\001 \001(\0162\t.PROTOCOL:\030ID_PKT_AU"
  "DIO_MESSAGE_REQ\022\023\n\013var_message\030\002 \003(\014B\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CLI_2eGS_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Structure_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_CLI_2eGS_2eproto_sccs[15] = {
  &scc_info_AUDIO_MESSAGE_REQ_CLI_2eGS_2eproto.base,
  &scc_info_BITMAP_MESSAGE_REQ_CLI_2eGS_2eproto.base,
  &scc_info_CANCEL_MATCH_REQ_CLI_2eGS_2eproto.base,
  &scc_info_CHECK_NICKNAME_REQ_CLI_2eGS_2eproto.base,
  &scc_info_CREATE_ROOM_REQ_CLI_2eGS_2eproto.base,
  &scc_info_ENTER_ROOM_REQ_CLI_2eGS_2eproto.base,
  &scc_info_LEAVE_ROOM_REQ_CLI_2eGS_2eproto.base,
  &scc_info_LOGIN_REQ_CLI_2eGS_2eproto.base,
  &scc_info_MATCH_REQ_CLI_2eGS_2eproto.base,
  &scc_info_NOTICE_REQ_CLI_2eGS_2eproto.base,
  &scc_info_QNS_REQ_CLI_2eGS_2eproto.base,
  &scc_info_RANK_REQ_CLI_2eGS_2eproto.base,
  &scc_info_ROOM_LIST_REQ_CLI_2eGS_2eproto.base,
  &scc_info_ROOM_PASS_THROUGH_REQ_CLI_2eGS_2eproto.base,
  &scc_info_VERSION_REQ_CLI_2eGS_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CLI_2eGS_2eproto_once;
static bool descriptor_table_CLI_2eGS_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CLI_2eGS_2eproto = {
  &descriptor_table_CLI_2eGS_2eproto_initialized, descriptor_table_protodef_CLI_2eGS_2eproto, "CLI.GS.proto", 1200,
  &descriptor_table_CLI_2eGS_2eproto_once, descriptor_table_CLI_2eGS_2eproto_sccs, descriptor_table_CLI_2eGS_2eproto_deps, 15, 2,
  schemas, file_default_instances, TableStruct_CLI_2eGS_2eproto::offsets,
  file_level_metadata_CLI_2eGS_2eproto, 15, file_level_enum_descriptors_CLI_2eGS_2eproto, file_level_service_descriptors_CLI_2eGS_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_CLI_2eGS_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_CLI_2eGS_2eproto), true);

// ===================================================================

void VERSION_REQ::InitAsDefaultInstance() {
}
class VERSION_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<VERSION_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VERSION_REQ::VERSION_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VERSION_REQ)
}
VERSION_REQ::VERSION_REQ(const VERSION_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:VERSION_REQ)
}

void VERSION_REQ::SharedCtor() {
  id_ = 0;
}

VERSION_REQ::~VERSION_REQ() {
  // @@protoc_insertion_point(destructor:VERSION_REQ)
  SharedDtor();
}

void VERSION_REQ::SharedDtor() {
}

void VERSION_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VERSION_REQ& VERSION_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VERSION_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void VERSION_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:VERSION_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VERSION_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VERSION_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VERSION_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VERSION_REQ)
  return target;
}

size_t VERSION_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VERSION_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VERSION_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VERSION_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const VERSION_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VERSION_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VERSION_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VERSION_REQ)
    MergeFrom(*source);
  }
}

void VERSION_REQ::MergeFrom(const VERSION_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VERSION_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void VERSION_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VERSION_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VERSION_REQ::CopyFrom(const VERSION_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VERSION_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VERSION_REQ::IsInitialized() const {
  return true;
}

void VERSION_REQ::InternalSwap(VERSION_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VERSION_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOGIN_REQ::InitAsDefaultInstance() {
}
class LOGIN_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<LOGIN_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LOGIN_REQ::LOGIN_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LOGIN_REQ)
}
LOGIN_REQ::LOGIN_REQ(const LOGIN_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_uid()) {
    var_uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_uid_);
  }
  var_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_token()) {
    var_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_token_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:LOGIN_REQ)
}

void LOGIN_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOGIN_REQ_CLI_2eGS_2eproto.base);
  var_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 2;
}

LOGIN_REQ::~LOGIN_REQ() {
  // @@protoc_insertion_point(destructor:LOGIN_REQ)
  SharedDtor();
}

void LOGIN_REQ::SharedDtor() {
  var_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LOGIN_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOGIN_REQ& LOGIN_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOGIN_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void LOGIN_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:LOGIN_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      var_uid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      var_token_.ClearNonDefaultToEmptyNoArena();
    }
    id_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LOGIN_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string var_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOGIN_REQ.var_uid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_var_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOGIN_REQ.var_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOGIN_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOGIN_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_REQ];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required string var_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_uid().data(), static_cast<int>(this->_internal_var_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "LOGIN_REQ.var_uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_uid(), target);
  }

  // required string var_token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_token().data(), static_cast<int>(this->_internal_var_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "LOGIN_REQ.var_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_var_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOGIN_REQ)
  return target;
}

size_t LOGIN_REQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LOGIN_REQ)
  size_t total_size = 0;

  if (_internal_has_var_uid()) {
    // required string var_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_uid());
  }

  if (_internal_has_var_token()) {
    // required string var_token = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_token());
  }

  return total_size;
}
size_t LOGIN_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOGIN_REQ)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string var_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_uid());

    // required string var_token = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_token());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOGIN_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOGIN_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const LOGIN_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOGIN_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOGIN_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOGIN_REQ)
    MergeFrom(*source);
  }
}

void LOGIN_REQ::MergeFrom(const LOGIN_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOGIN_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_uid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      var_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LOGIN_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOGIN_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOGIN_REQ::CopyFrom(const LOGIN_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOGIN_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOGIN_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void LOGIN_REQ::InternalSwap(LOGIN_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_uid_.Swap(&other->var_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_token_.Swap(&other->var_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LOGIN_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CREATE_ROOM_REQ::InitAsDefaultInstance() {
}
class CREATE_ROOM_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<CREATE_ROOM_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CREATE_ROOM_REQ::CREATE_ROOM_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CREATE_ROOM_REQ)
}
CREATE_ROOM_REQ::CREATE_ROOM_REQ(const CREATE_ROOM_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CREATE_ROOM_REQ)
}

void CREATE_ROOM_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CREATE_ROOM_REQ_CLI_2eGS_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 4;
}

CREATE_ROOM_REQ::~CREATE_ROOM_REQ() {
  // @@protoc_insertion_point(destructor:CREATE_ROOM_REQ)
  SharedDtor();
}

void CREATE_ROOM_REQ::SharedDtor() {
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CREATE_ROOM_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CREATE_ROOM_REQ& CREATE_ROOM_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CREATE_ROOM_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void CREATE_ROOM_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CREATE_ROOM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_name_.ClearNonDefaultToEmptyNoArena();
    }
    id_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CREATE_ROOM_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bytes var_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CREATE_ROOM_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CREATE_ROOM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required bytes var_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_var_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CREATE_ROOM_REQ)
  return target;
}

size_t CREATE_ROOM_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CREATE_ROOM_REQ)
  size_t total_size = 0;

  // required bytes var_name = 2;
  if (_internal_has_var_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_var_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CREATE_ROOM_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CREATE_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const CREATE_ROOM_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CREATE_ROOM_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CREATE_ROOM_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CREATE_ROOM_REQ)
    MergeFrom(*source);
  }
}

void CREATE_ROOM_REQ::MergeFrom(const CREATE_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CREATE_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CREATE_ROOM_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CREATE_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CREATE_ROOM_REQ::CopyFrom(const CREATE_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CREATE_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CREATE_ROOM_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CREATE_ROOM_REQ::InternalSwap(CREATE_ROOM_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CREATE_ROOM_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ENTER_ROOM_REQ::InitAsDefaultInstance() {
}
class ENTER_ROOM_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<ENTER_ROOM_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ENTER_ROOM_REQ::ENTER_ROOM_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ENTER_ROOM_REQ)
}
ENTER_ROOM_REQ::ENTER_ROOM_REQ(const ENTER_ROOM_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_id_, &from.var_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ENTER_ROOM_REQ)
}

void ENTER_ROOM_REQ::SharedCtor() {
  var_id_ = 0;
  id_ = 6;
}

ENTER_ROOM_REQ::~ENTER_ROOM_REQ() {
  // @@protoc_insertion_point(destructor:ENTER_ROOM_REQ)
  SharedDtor();
}

void ENTER_ROOM_REQ::SharedDtor() {
}

void ENTER_ROOM_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ENTER_ROOM_REQ& ENTER_ROOM_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ENTER_ROOM_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void ENTER_ROOM_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:ENTER_ROOM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_id_ = 0;
    id_ = 6;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ENTER_ROOM_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 var_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_var_id(&has_bits);
          var_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENTER_ROOM_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ENTER_ROOM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required int32 var_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ENTER_ROOM_REQ)
  return target;
}

size_t ENTER_ROOM_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ENTER_ROOM_REQ)
  size_t total_size = 0;

  // required int32 var_id = 2;
  if (_internal_has_var_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENTER_ROOM_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ENTER_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const ENTER_ROOM_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENTER_ROOM_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ENTER_ROOM_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ENTER_ROOM_REQ)
    MergeFrom(*source);
  }
}

void ENTER_ROOM_REQ::MergeFrom(const ENTER_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ENTER_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_id_ = from.var_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ENTER_ROOM_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ENTER_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENTER_ROOM_REQ::CopyFrom(const ENTER_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ENTER_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENTER_ROOM_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ENTER_ROOM_REQ::InternalSwap(ENTER_ROOM_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_id_, other->var_id_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ENTER_ROOM_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LEAVE_ROOM_REQ::InitAsDefaultInstance() {
}
class LEAVE_ROOM_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<LEAVE_ROOM_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LEAVE_ROOM_REQ::LEAVE_ROOM_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LEAVE_ROOM_REQ)
}
LEAVE_ROOM_REQ::LEAVE_ROOM_REQ(const LEAVE_ROOM_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_id_, &from.var_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:LEAVE_ROOM_REQ)
}

void LEAVE_ROOM_REQ::SharedCtor() {
  var_id_ = 0;
  id_ = 8;
}

LEAVE_ROOM_REQ::~LEAVE_ROOM_REQ() {
  // @@protoc_insertion_point(destructor:LEAVE_ROOM_REQ)
  SharedDtor();
}

void LEAVE_ROOM_REQ::SharedDtor() {
}

void LEAVE_ROOM_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LEAVE_ROOM_REQ& LEAVE_ROOM_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LEAVE_ROOM_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void LEAVE_ROOM_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:LEAVE_ROOM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_id_ = 0;
    id_ = 8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LEAVE_ROOM_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 var_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_var_id(&has_bits);
          var_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LEAVE_ROOM_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LEAVE_ROOM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required int32 var_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LEAVE_ROOM_REQ)
  return target;
}

size_t LEAVE_ROOM_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LEAVE_ROOM_REQ)
  size_t total_size = 0;

  // required int32 var_id = 2;
  if (_internal_has_var_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LEAVE_ROOM_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LEAVE_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const LEAVE_ROOM_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LEAVE_ROOM_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LEAVE_ROOM_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LEAVE_ROOM_REQ)
    MergeFrom(*source);
  }
}

void LEAVE_ROOM_REQ::MergeFrom(const LEAVE_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LEAVE_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_id_ = from.var_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LEAVE_ROOM_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LEAVE_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LEAVE_ROOM_REQ::CopyFrom(const LEAVE_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LEAVE_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LEAVE_ROOM_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LEAVE_ROOM_REQ::InternalSwap(LEAVE_ROOM_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_id_, other->var_id_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LEAVE_ROOM_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROOM_LIST_REQ::InitAsDefaultInstance() {
}
class ROOM_LIST_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<ROOM_LIST_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ROOM_LIST_REQ::ROOM_LIST_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ROOM_LIST_REQ)
}
ROOM_LIST_REQ::ROOM_LIST_REQ(const ROOM_LIST_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ROOM_LIST_REQ)
}

void ROOM_LIST_REQ::SharedCtor() {
  id_ = 13;
}

ROOM_LIST_REQ::~ROOM_LIST_REQ() {
  // @@protoc_insertion_point(destructor:ROOM_LIST_REQ)
  SharedDtor();
}

void ROOM_LIST_REQ::SharedDtor() {
}

void ROOM_LIST_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROOM_LIST_REQ& ROOM_LIST_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROOM_LIST_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void ROOM_LIST_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:ROOM_LIST_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 13;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ROOM_LIST_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROOM_LIST_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ROOM_LIST_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ROOM_LIST_REQ)
  return target;
}

size_t ROOM_LIST_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ROOM_LIST_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROOM_LIST_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ROOM_LIST_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const ROOM_LIST_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROOM_LIST_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ROOM_LIST_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ROOM_LIST_REQ)
    MergeFrom(*source);
  }
}

void ROOM_LIST_REQ::MergeFrom(const ROOM_LIST_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ROOM_LIST_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void ROOM_LIST_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ROOM_LIST_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROOM_LIST_REQ::CopyFrom(const ROOM_LIST_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ROOM_LIST_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROOM_LIST_REQ::IsInitialized() const {
  return true;
}

void ROOM_LIST_REQ::InternalSwap(ROOM_LIST_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROOM_LIST_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MATCH_REQ::InitAsDefaultInstance() {
}
class MATCH_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<MATCH_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MATCH_REQ::MATCH_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MATCH_REQ)
}
MATCH_REQ::MATCH_REQ(const MATCH_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:MATCH_REQ)
}

void MATCH_REQ::SharedCtor() {
  id_ = 15;
}

MATCH_REQ::~MATCH_REQ() {
  // @@protoc_insertion_point(destructor:MATCH_REQ)
  SharedDtor();
}

void MATCH_REQ::SharedDtor() {
}

void MATCH_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MATCH_REQ& MATCH_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MATCH_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void MATCH_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 15;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MATCH_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_MATCH_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MATCH_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_MATCH_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH_REQ)
  return target;
}

size_t MATCH_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_MATCH_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MATCH_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const MATCH_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MATCH_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH_REQ)
    MergeFrom(*source);
  }
}

void MATCH_REQ::MergeFrom(const MATCH_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void MATCH_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MATCH_REQ::CopyFrom(const MATCH_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MATCH_REQ::IsInitialized() const {
  return true;
}

void MATCH_REQ::InternalSwap(MATCH_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MATCH_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RANK_REQ::InitAsDefaultInstance() {
}
class RANK_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<RANK_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RANK_REQ::RANK_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RANK_REQ)
}
RANK_REQ::RANK_REQ(const RANK_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:RANK_REQ)
}

void RANK_REQ::SharedCtor() {
  id_ = 19;
}

RANK_REQ::~RANK_REQ() {
  // @@protoc_insertion_point(destructor:RANK_REQ)
  SharedDtor();
}

void RANK_REQ::SharedDtor() {
}

void RANK_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RANK_REQ& RANK_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RANK_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void RANK_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:RANK_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 19;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RANK_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_RANK_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RANK_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RANK_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_RANK_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RANK_REQ)
  return target;
}

size_t RANK_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RANK_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_RANK_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RANK_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RANK_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const RANK_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RANK_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RANK_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RANK_REQ)
    MergeFrom(*source);
  }
}

void RANK_REQ::MergeFrom(const RANK_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RANK_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void RANK_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RANK_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RANK_REQ::CopyFrom(const RANK_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RANK_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RANK_REQ::IsInitialized() const {
  return true;
}

void RANK_REQ::InternalSwap(RANK_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RANK_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QNS_REQ::InitAsDefaultInstance() {
}
class QNS_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<QNS_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

QNS_REQ::QNS_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QNS_REQ)
}
QNS_REQ::QNS_REQ(const QNS_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_message()) {
    var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:QNS_REQ)
}

void QNS_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QNS_REQ_CLI_2eGS_2eproto.base);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 21;
}

QNS_REQ::~QNS_REQ() {
  // @@protoc_insertion_point(destructor:QNS_REQ)
  SharedDtor();
}

void QNS_REQ::SharedDtor() {
  var_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QNS_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QNS_REQ& QNS_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QNS_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void QNS_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:QNS_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_message_.ClearNonDefaultToEmptyNoArena();
    }
    id_ = 21;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* QNS_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_QNS_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bytes var_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QNS_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QNS_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_QNS_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required bytes var_message = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_var_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QNS_REQ)
  return target;
}

size_t QNS_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QNS_REQ)
  size_t total_size = 0;

  // required bytes var_message = 2;
  if (_internal_has_var_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_var_message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_QNS_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QNS_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QNS_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const QNS_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QNS_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QNS_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QNS_REQ)
    MergeFrom(*source);
  }
}

void QNS_REQ::MergeFrom(const QNS_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QNS_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QNS_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QNS_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QNS_REQ::CopyFrom(const QNS_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QNS_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QNS_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void QNS_REQ::InternalSwap(QNS_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.Swap(&other->var_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QNS_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROOM_PASS_THROUGH_REQ::InitAsDefaultInstance() {
}
class ROOM_PASS_THROUGH_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<ROOM_PASS_THROUGH_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_message_int(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ROOM_PASS_THROUGH_REQ::ROOM_PASS_THROUGH_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ROOM_PASS_THROUGH_REQ)
}
ROOM_PASS_THROUGH_REQ::ROOM_PASS_THROUGH_REQ(const ROOM_PASS_THROUGH_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_message()) {
    var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
  }
  ::memcpy(&var_message_int_, &from.var_message_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_message_int_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ROOM_PASS_THROUGH_REQ)
}

void ROOM_PASS_THROUGH_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ROOM_PASS_THROUGH_REQ_CLI_2eGS_2eproto.base);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_message_int_ = 0;
  id_ = 23;
}

ROOM_PASS_THROUGH_REQ::~ROOM_PASS_THROUGH_REQ() {
  // @@protoc_insertion_point(destructor:ROOM_PASS_THROUGH_REQ)
  SharedDtor();
}

void ROOM_PASS_THROUGH_REQ::SharedDtor() {
  var_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ROOM_PASS_THROUGH_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROOM_PASS_THROUGH_REQ& ROOM_PASS_THROUGH_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROOM_PASS_THROUGH_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void ROOM_PASS_THROUGH_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:ROOM_PASS_THROUGH_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    var_message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    var_message_int_ = 0;
    id_ = 23;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ROOM_PASS_THROUGH_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bytes var_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 var_message_int = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_message_int(&has_bits);
          var_message_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROOM_PASS_THROUGH_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ROOM_PASS_THROUGH_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_REQ];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required bytes var_message = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_var_message(), target);
  }

  // required int32 var_message_int = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_message_int(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ROOM_PASS_THROUGH_REQ)
  return target;
}

size_t ROOM_PASS_THROUGH_REQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ROOM_PASS_THROUGH_REQ)
  size_t total_size = 0;

  if (_internal_has_var_message()) {
    // required bytes var_message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_var_message());
  }

  if (_internal_has_var_message_int()) {
    // required int32 var_message_int = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_message_int());
  }

  return total_size;
}
size_t ROOM_PASS_THROUGH_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ROOM_PASS_THROUGH_REQ)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes var_message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_var_message());

    // required int32 var_message_int = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_message_int());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROOM_PASS_THROUGH_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ROOM_PASS_THROUGH_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const ROOM_PASS_THROUGH_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROOM_PASS_THROUGH_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ROOM_PASS_THROUGH_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ROOM_PASS_THROUGH_REQ)
    MergeFrom(*source);
  }
}

void ROOM_PASS_THROUGH_REQ::MergeFrom(const ROOM_PASS_THROUGH_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ROOM_PASS_THROUGH_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      var_message_int_ = from.var_message_int_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROOM_PASS_THROUGH_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ROOM_PASS_THROUGH_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROOM_PASS_THROUGH_REQ::CopyFrom(const ROOM_PASS_THROUGH_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ROOM_PASS_THROUGH_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROOM_PASS_THROUGH_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ROOM_PASS_THROUGH_REQ::InternalSwap(ROOM_PASS_THROUGH_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.Swap(&other->var_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_message_int_, other->var_message_int_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROOM_PASS_THROUGH_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CANCEL_MATCH_REQ::InitAsDefaultInstance() {
}
class CANCEL_MATCH_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<CANCEL_MATCH_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CANCEL_MATCH_REQ::CANCEL_MATCH_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CANCEL_MATCH_REQ)
}
CANCEL_MATCH_REQ::CANCEL_MATCH_REQ(const CANCEL_MATCH_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CANCEL_MATCH_REQ)
}

void CANCEL_MATCH_REQ::SharedCtor() {
  id_ = 25;
}

CANCEL_MATCH_REQ::~CANCEL_MATCH_REQ() {
  // @@protoc_insertion_point(destructor:CANCEL_MATCH_REQ)
  SharedDtor();
}

void CANCEL_MATCH_REQ::SharedDtor() {
}

void CANCEL_MATCH_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CANCEL_MATCH_REQ& CANCEL_MATCH_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CANCEL_MATCH_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void CANCEL_MATCH_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CANCEL_MATCH_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 25;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CANCEL_MATCH_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_CANCEL_MATCH_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CANCEL_MATCH_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CANCEL_MATCH_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_CANCEL_MATCH_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CANCEL_MATCH_REQ)
  return target;
}

size_t CANCEL_MATCH_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CANCEL_MATCH_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_CANCEL_MATCH_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CANCEL_MATCH_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CANCEL_MATCH_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const CANCEL_MATCH_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CANCEL_MATCH_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CANCEL_MATCH_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CANCEL_MATCH_REQ)
    MergeFrom(*source);
  }
}

void CANCEL_MATCH_REQ::MergeFrom(const CANCEL_MATCH_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CANCEL_MATCH_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void CANCEL_MATCH_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CANCEL_MATCH_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CANCEL_MATCH_REQ::CopyFrom(const CANCEL_MATCH_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CANCEL_MATCH_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CANCEL_MATCH_REQ::IsInitialized() const {
  return true;
}

void CANCEL_MATCH_REQ::InternalSwap(CANCEL_MATCH_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CANCEL_MATCH_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NOTICE_REQ::InitAsDefaultInstance() {
}
class NOTICE_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<NOTICE_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NOTICE_REQ::NOTICE_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NOTICE_REQ)
}
NOTICE_REQ::NOTICE_REQ(const NOTICE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:NOTICE_REQ)
}

void NOTICE_REQ::SharedCtor() {
  id_ = 27;
}

NOTICE_REQ::~NOTICE_REQ() {
  // @@protoc_insertion_point(destructor:NOTICE_REQ)
  SharedDtor();
}

void NOTICE_REQ::SharedDtor() {
}

void NOTICE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NOTICE_REQ& NOTICE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NOTICE_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void NOTICE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:NOTICE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 27;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NOTICE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NOTICE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NOTICE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NOTICE_REQ)
  return target;
}

size_t NOTICE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NOTICE_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NOTICE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NOTICE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const NOTICE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NOTICE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NOTICE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NOTICE_REQ)
    MergeFrom(*source);
  }
}

void NOTICE_REQ::MergeFrom(const NOTICE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NOTICE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void NOTICE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NOTICE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NOTICE_REQ::CopyFrom(const NOTICE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NOTICE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NOTICE_REQ::IsInitialized() const {
  return true;
}

void NOTICE_REQ::InternalSwap(NOTICE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NOTICE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CHECK_NICKNAME_REQ::InitAsDefaultInstance() {
}
class CHECK_NICKNAME_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<CHECK_NICKNAME_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CHECK_NICKNAME_REQ::CHECK_NICKNAME_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CHECK_NICKNAME_REQ)
}
CHECK_NICKNAME_REQ::CHECK_NICKNAME_REQ(const CHECK_NICKNAME_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CHECK_NICKNAME_REQ)
}

void CHECK_NICKNAME_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CHECK_NICKNAME_REQ_CLI_2eGS_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 29;
}

CHECK_NICKNAME_REQ::~CHECK_NICKNAME_REQ() {
  // @@protoc_insertion_point(destructor:CHECK_NICKNAME_REQ)
  SharedDtor();
}

void CHECK_NICKNAME_REQ::SharedDtor() {
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CHECK_NICKNAME_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CHECK_NICKNAME_REQ& CHECK_NICKNAME_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CHECK_NICKNAME_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void CHECK_NICKNAME_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CHECK_NICKNAME_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_name_.ClearNonDefaultToEmptyNoArena();
    }
    id_ = 29;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CHECK_NICKNAME_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_CHECK_NICKNAME_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required bytes var_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CHECK_NICKNAME_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CHECK_NICKNAME_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_CHECK_NICKNAME_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required bytes var_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_var_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CHECK_NICKNAME_REQ)
  return target;
}

size_t CHECK_NICKNAME_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CHECK_NICKNAME_REQ)
  size_t total_size = 0;

  // required bytes var_name = 2;
  if (_internal_has_var_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_var_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_CHECK_NICKNAME_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CHECK_NICKNAME_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CHECK_NICKNAME_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const CHECK_NICKNAME_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CHECK_NICKNAME_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CHECK_NICKNAME_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CHECK_NICKNAME_REQ)
    MergeFrom(*source);
  }
}

void CHECK_NICKNAME_REQ::MergeFrom(const CHECK_NICKNAME_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CHECK_NICKNAME_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CHECK_NICKNAME_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CHECK_NICKNAME_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CHECK_NICKNAME_REQ::CopyFrom(const CHECK_NICKNAME_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CHECK_NICKNAME_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CHECK_NICKNAME_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CHECK_NICKNAME_REQ::InternalSwap(CHECK_NICKNAME_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CHECK_NICKNAME_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BITMAP_MESSAGE_REQ::InitAsDefaultInstance() {
}
class BITMAP_MESSAGE_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<BITMAP_MESSAGE_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BITMAP_MESSAGE_REQ::BITMAP_MESSAGE_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BITMAP_MESSAGE_REQ)
}
BITMAP_MESSAGE_REQ::BITMAP_MESSAGE_REQ(const BITMAP_MESSAGE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_message_(from.var_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:BITMAP_MESSAGE_REQ)
}

void BITMAP_MESSAGE_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BITMAP_MESSAGE_REQ_CLI_2eGS_2eproto.base);
  id_ = 10;
}

BITMAP_MESSAGE_REQ::~BITMAP_MESSAGE_REQ() {
  // @@protoc_insertion_point(destructor:BITMAP_MESSAGE_REQ)
  SharedDtor();
}

void BITMAP_MESSAGE_REQ::SharedDtor() {
}

void BITMAP_MESSAGE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BITMAP_MESSAGE_REQ& BITMAP_MESSAGE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BITMAP_MESSAGE_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void BITMAP_MESSAGE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:BITMAP_MESSAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_message_.Clear();
  id_ = 10;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BITMAP_MESSAGE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated bytes var_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_var_message();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BITMAP_MESSAGE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BITMAP_MESSAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // repeated bytes var_message = 2;
  for (int i = 0, n = this->_internal_var_message_size(); i < n; i++) {
    const auto& s = this->_internal_var_message(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BITMAP_MESSAGE_REQ)
  return target;
}

size_t BITMAP_MESSAGE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BITMAP_MESSAGE_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes var_message = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(var_message_.size());
  for (int i = 0, n = var_message_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      var_message_.Get(i));
  }

  // optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BITMAP_MESSAGE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BITMAP_MESSAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const BITMAP_MESSAGE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BITMAP_MESSAGE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BITMAP_MESSAGE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BITMAP_MESSAGE_REQ)
    MergeFrom(*source);
  }
}

void BITMAP_MESSAGE_REQ::MergeFrom(const BITMAP_MESSAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BITMAP_MESSAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_message_.MergeFrom(from.var_message_);
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void BITMAP_MESSAGE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BITMAP_MESSAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BITMAP_MESSAGE_REQ::CopyFrom(const BITMAP_MESSAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BITMAP_MESSAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BITMAP_MESSAGE_REQ::IsInitialized() const {
  return true;
}

void BITMAP_MESSAGE_REQ::InternalSwap(BITMAP_MESSAGE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.InternalSwap(&other->var_message_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BITMAP_MESSAGE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AUDIO_MESSAGE_REQ::InitAsDefaultInstance() {
}
class AUDIO_MESSAGE_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<AUDIO_MESSAGE_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AUDIO_MESSAGE_REQ::AUDIO_MESSAGE_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AUDIO_MESSAGE_REQ)
}
AUDIO_MESSAGE_REQ::AUDIO_MESSAGE_REQ(const AUDIO_MESSAGE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_message_(from.var_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:AUDIO_MESSAGE_REQ)
}

void AUDIO_MESSAGE_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AUDIO_MESSAGE_REQ_CLI_2eGS_2eproto.base);
  id_ = 31;
}

AUDIO_MESSAGE_REQ::~AUDIO_MESSAGE_REQ() {
  // @@protoc_insertion_point(destructor:AUDIO_MESSAGE_REQ)
  SharedDtor();
}

void AUDIO_MESSAGE_REQ::SharedDtor() {
}

void AUDIO_MESSAGE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AUDIO_MESSAGE_REQ& AUDIO_MESSAGE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AUDIO_MESSAGE_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void AUDIO_MESSAGE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:AUDIO_MESSAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_message_.Clear();
  id_ = 31;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AUDIO_MESSAGE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated bytes var_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_var_message();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AUDIO_MESSAGE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUDIO_MESSAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // repeated bytes var_message = 2;
  for (int i = 0, n = this->_internal_var_message_size(); i < n; i++) {
    const auto& s = this->_internal_var_message(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUDIO_MESSAGE_REQ)
  return target;
}

size_t AUDIO_MESSAGE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUDIO_MESSAGE_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes var_message = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(var_message_.size());
  for (int i = 0, n = var_message_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      var_message_.Get(i));
  }

  // optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AUDIO_MESSAGE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AUDIO_MESSAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const AUDIO_MESSAGE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AUDIO_MESSAGE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AUDIO_MESSAGE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AUDIO_MESSAGE_REQ)
    MergeFrom(*source);
  }
}

void AUDIO_MESSAGE_REQ::MergeFrom(const AUDIO_MESSAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUDIO_MESSAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_message_.MergeFrom(from.var_message_);
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void AUDIO_MESSAGE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AUDIO_MESSAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AUDIO_MESSAGE_REQ::CopyFrom(const AUDIO_MESSAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUDIO_MESSAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUDIO_MESSAGE_REQ::IsInitialized() const {
  return true;
}

void AUDIO_MESSAGE_REQ::InternalSwap(AUDIO_MESSAGE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.InternalSwap(&other->var_message_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AUDIO_MESSAGE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VERSION_REQ* Arena::CreateMaybeMessage< ::VERSION_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::VERSION_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::LOGIN_REQ* Arena::CreateMaybeMessage< ::LOGIN_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::LOGIN_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CREATE_ROOM_REQ* Arena::CreateMaybeMessage< ::CREATE_ROOM_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::CREATE_ROOM_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::ENTER_ROOM_REQ* Arena::CreateMaybeMessage< ::ENTER_ROOM_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::ENTER_ROOM_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::LEAVE_ROOM_REQ* Arena::CreateMaybeMessage< ::LEAVE_ROOM_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::LEAVE_ROOM_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::ROOM_LIST_REQ* Arena::CreateMaybeMessage< ::ROOM_LIST_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::ROOM_LIST_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH_REQ* Arena::CreateMaybeMessage< ::MATCH_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::MATCH_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::RANK_REQ* Arena::CreateMaybeMessage< ::RANK_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::RANK_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::QNS_REQ* Arena::CreateMaybeMessage< ::QNS_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::QNS_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::ROOM_PASS_THROUGH_REQ* Arena::CreateMaybeMessage< ::ROOM_PASS_THROUGH_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::ROOM_PASS_THROUGH_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CANCEL_MATCH_REQ* Arena::CreateMaybeMessage< ::CANCEL_MATCH_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::CANCEL_MATCH_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::NOTICE_REQ* Arena::CreateMaybeMessage< ::NOTICE_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::NOTICE_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CHECK_NICKNAME_REQ* Arena::CreateMaybeMessage< ::CHECK_NICKNAME_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::CHECK_NICKNAME_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::BITMAP_MESSAGE_REQ* Arena::CreateMaybeMessage< ::BITMAP_MESSAGE_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::BITMAP_MESSAGE_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::AUDIO_MESSAGE_REQ* Arena::CreateMaybeMessage< ::AUDIO_MESSAGE_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::AUDIO_MESSAGE_REQ >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

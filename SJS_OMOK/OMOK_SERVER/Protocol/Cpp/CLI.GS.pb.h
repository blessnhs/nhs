// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CLI.GS.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CLI_2eGS_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CLI_2eGS_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Structure.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CLI_2eGS_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CLI_2eGS_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CLI_2eGS_2eproto;
class AUDIO_MESSAGE_REQ;
class AUDIO_MESSAGE_REQDefaultTypeInternal;
extern AUDIO_MESSAGE_REQDefaultTypeInternal _AUDIO_MESSAGE_REQ_default_instance_;
class BITMAP_MESSAGE_REQ;
class BITMAP_MESSAGE_REQDefaultTypeInternal;
extern BITMAP_MESSAGE_REQDefaultTypeInternal _BITMAP_MESSAGE_REQ_default_instance_;
class CANCEL_MATCH_REQ;
class CANCEL_MATCH_REQDefaultTypeInternal;
extern CANCEL_MATCH_REQDefaultTypeInternal _CANCEL_MATCH_REQ_default_instance_;
class CHECK_NICKNAME_REQ;
class CHECK_NICKNAME_REQDefaultTypeInternal;
extern CHECK_NICKNAME_REQDefaultTypeInternal _CHECK_NICKNAME_REQ_default_instance_;
class CREATE_ROOM_REQ;
class CREATE_ROOM_REQDefaultTypeInternal;
extern CREATE_ROOM_REQDefaultTypeInternal _CREATE_ROOM_REQ_default_instance_;
class ENTER_ROOM_REQ;
class ENTER_ROOM_REQDefaultTypeInternal;
extern ENTER_ROOM_REQDefaultTypeInternal _ENTER_ROOM_REQ_default_instance_;
class LEAVE_ROOM_REQ;
class LEAVE_ROOM_REQDefaultTypeInternal;
extern LEAVE_ROOM_REQDefaultTypeInternal _LEAVE_ROOM_REQ_default_instance_;
class LOGIN_REQ;
class LOGIN_REQDefaultTypeInternal;
extern LOGIN_REQDefaultTypeInternal _LOGIN_REQ_default_instance_;
class MATCH_REQ;
class MATCH_REQDefaultTypeInternal;
extern MATCH_REQDefaultTypeInternal _MATCH_REQ_default_instance_;
class NOTICE_REQ;
class NOTICE_REQDefaultTypeInternal;
extern NOTICE_REQDefaultTypeInternal _NOTICE_REQ_default_instance_;
class QNS_REQ;
class QNS_REQDefaultTypeInternal;
extern QNS_REQDefaultTypeInternal _QNS_REQ_default_instance_;
class RANK_REQ;
class RANK_REQDefaultTypeInternal;
extern RANK_REQDefaultTypeInternal _RANK_REQ_default_instance_;
class ROOM_LIST_REQ;
class ROOM_LIST_REQDefaultTypeInternal;
extern ROOM_LIST_REQDefaultTypeInternal _ROOM_LIST_REQ_default_instance_;
class ROOM_PASS_THROUGH_REQ;
class ROOM_PASS_THROUGH_REQDefaultTypeInternal;
extern ROOM_PASS_THROUGH_REQDefaultTypeInternal _ROOM_PASS_THROUGH_REQ_default_instance_;
class VERSION_REQ;
class VERSION_REQDefaultTypeInternal;
extern VERSION_REQDefaultTypeInternal _VERSION_REQ_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AUDIO_MESSAGE_REQ* Arena::CreateMaybeMessage<::AUDIO_MESSAGE_REQ>(Arena*);
template<> ::BITMAP_MESSAGE_REQ* Arena::CreateMaybeMessage<::BITMAP_MESSAGE_REQ>(Arena*);
template<> ::CANCEL_MATCH_REQ* Arena::CreateMaybeMessage<::CANCEL_MATCH_REQ>(Arena*);
template<> ::CHECK_NICKNAME_REQ* Arena::CreateMaybeMessage<::CHECK_NICKNAME_REQ>(Arena*);
template<> ::CREATE_ROOM_REQ* Arena::CreateMaybeMessage<::CREATE_ROOM_REQ>(Arena*);
template<> ::ENTER_ROOM_REQ* Arena::CreateMaybeMessage<::ENTER_ROOM_REQ>(Arena*);
template<> ::LEAVE_ROOM_REQ* Arena::CreateMaybeMessage<::LEAVE_ROOM_REQ>(Arena*);
template<> ::LOGIN_REQ* Arena::CreateMaybeMessage<::LOGIN_REQ>(Arena*);
template<> ::MATCH_REQ* Arena::CreateMaybeMessage<::MATCH_REQ>(Arena*);
template<> ::NOTICE_REQ* Arena::CreateMaybeMessage<::NOTICE_REQ>(Arena*);
template<> ::QNS_REQ* Arena::CreateMaybeMessage<::QNS_REQ>(Arena*);
template<> ::RANK_REQ* Arena::CreateMaybeMessage<::RANK_REQ>(Arena*);
template<> ::ROOM_LIST_REQ* Arena::CreateMaybeMessage<::ROOM_LIST_REQ>(Arena*);
template<> ::ROOM_PASS_THROUGH_REQ* Arena::CreateMaybeMessage<::ROOM_PASS_THROUGH_REQ>(Arena*);
template<> ::VERSION_REQ* Arena::CreateMaybeMessage<::VERSION_REQ>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class VERSION_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VERSION_REQ) */ {
 public:
  VERSION_REQ();
  virtual ~VERSION_REQ();

  VERSION_REQ(const VERSION_REQ& from);
  VERSION_REQ(VERSION_REQ&& from) noexcept
    : VERSION_REQ() {
    *this = ::std::move(from);
  }

  inline VERSION_REQ& operator=(const VERSION_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline VERSION_REQ& operator=(VERSION_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VERSION_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VERSION_REQ* internal_default_instance() {
    return reinterpret_cast<const VERSION_REQ*>(
               &_VERSION_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VERSION_REQ& a, VERSION_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(VERSION_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VERSION_REQ* New() const final {
    return CreateMaybeMessage<VERSION_REQ>(nullptr);
  }

  VERSION_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VERSION_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VERSION_REQ& from);
  void MergeFrom(const VERSION_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VERSION_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VERSION_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:VERSION_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class LOGIN_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOGIN_REQ) */ {
 public:
  LOGIN_REQ();
  virtual ~LOGIN_REQ();

  LOGIN_REQ(const LOGIN_REQ& from);
  LOGIN_REQ(LOGIN_REQ&& from) noexcept
    : LOGIN_REQ() {
    *this = ::std::move(from);
  }

  inline LOGIN_REQ& operator=(const LOGIN_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOGIN_REQ& operator=(LOGIN_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOGIN_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOGIN_REQ* internal_default_instance() {
    return reinterpret_cast<const LOGIN_REQ*>(
               &_LOGIN_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LOGIN_REQ& a, LOGIN_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(LOGIN_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOGIN_REQ* New() const final {
    return CreateMaybeMessage<LOGIN_REQ>(nullptr);
  }

  LOGIN_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOGIN_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOGIN_REQ& from);
  void MergeFrom(const LOGIN_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOGIN_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOGIN_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarUidFieldNumber = 2,
    kVarTokenFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // required string var_uid = 2;
  bool has_var_uid() const;
  private:
  bool _internal_has_var_uid() const;
  public:
  void clear_var_uid();
  const std::string& var_uid() const;
  void set_var_uid(const std::string& value);
  void set_var_uid(std::string&& value);
  void set_var_uid(const char* value);
  void set_var_uid(const char* value, size_t size);
  std::string* mutable_var_uid();
  std::string* release_var_uid();
  void set_allocated_var_uid(std::string* var_uid);
  private:
  const std::string& _internal_var_uid() const;
  void _internal_set_var_uid(const std::string& value);
  std::string* _internal_mutable_var_uid();
  public:

  // required string var_token = 3;
  bool has_var_token() const;
  private:
  bool _internal_has_var_token() const;
  public:
  void clear_var_token();
  const std::string& var_token() const;
  void set_var_token(const std::string& value);
  void set_var_token(std::string&& value);
  void set_var_token(const char* value);
  void set_var_token(const char* value, size_t size);
  std::string* mutable_var_token();
  std::string* release_var_token();
  void set_allocated_var_token(std::string* var_token);
  private:
  const std::string& _internal_var_token() const;
  void _internal_set_var_token(const std::string& value);
  std::string* _internal_mutable_var_token();
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:LOGIN_REQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_token_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class CREATE_ROOM_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CREATE_ROOM_REQ) */ {
 public:
  CREATE_ROOM_REQ();
  virtual ~CREATE_ROOM_REQ();

  CREATE_ROOM_REQ(const CREATE_ROOM_REQ& from);
  CREATE_ROOM_REQ(CREATE_ROOM_REQ&& from) noexcept
    : CREATE_ROOM_REQ() {
    *this = ::std::move(from);
  }

  inline CREATE_ROOM_REQ& operator=(const CREATE_ROOM_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CREATE_ROOM_REQ& operator=(CREATE_ROOM_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CREATE_ROOM_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CREATE_ROOM_REQ* internal_default_instance() {
    return reinterpret_cast<const CREATE_ROOM_REQ*>(
               &_CREATE_ROOM_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CREATE_ROOM_REQ& a, CREATE_ROOM_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CREATE_ROOM_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CREATE_ROOM_REQ* New() const final {
    return CreateMaybeMessage<CREATE_ROOM_REQ>(nullptr);
  }

  CREATE_ROOM_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CREATE_ROOM_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CREATE_ROOM_REQ& from);
  void MergeFrom(const CREATE_ROOM_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CREATE_ROOM_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CREATE_ROOM_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required bytes var_name = 2;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const void* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:CREATE_ROOM_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class ENTER_ROOM_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ENTER_ROOM_REQ) */ {
 public:
  ENTER_ROOM_REQ();
  virtual ~ENTER_ROOM_REQ();

  ENTER_ROOM_REQ(const ENTER_ROOM_REQ& from);
  ENTER_ROOM_REQ(ENTER_ROOM_REQ&& from) noexcept
    : ENTER_ROOM_REQ() {
    *this = ::std::move(from);
  }

  inline ENTER_ROOM_REQ& operator=(const ENTER_ROOM_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENTER_ROOM_REQ& operator=(ENTER_ROOM_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENTER_ROOM_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ENTER_ROOM_REQ* internal_default_instance() {
    return reinterpret_cast<const ENTER_ROOM_REQ*>(
               &_ENTER_ROOM_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ENTER_ROOM_REQ& a, ENTER_ROOM_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(ENTER_ROOM_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENTER_ROOM_REQ* New() const final {
    return CreateMaybeMessage<ENTER_ROOM_REQ>(nullptr);
  }

  ENTER_ROOM_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENTER_ROOM_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENTER_ROOM_REQ& from);
  void MergeFrom(const ENTER_ROOM_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENTER_ROOM_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ENTER_ROOM_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required int32 var_id = 2;
  bool has_var_id() const;
  private:
  bool _internal_has_var_id() const;
  public:
  void clear_var_id();
  ::PROTOBUF_NAMESPACE_ID::int32 var_id() const;
  void set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_id() const;
  void _internal_set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:ENTER_ROOM_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_id_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class LEAVE_ROOM_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LEAVE_ROOM_REQ) */ {
 public:
  LEAVE_ROOM_REQ();
  virtual ~LEAVE_ROOM_REQ();

  LEAVE_ROOM_REQ(const LEAVE_ROOM_REQ& from);
  LEAVE_ROOM_REQ(LEAVE_ROOM_REQ&& from) noexcept
    : LEAVE_ROOM_REQ() {
    *this = ::std::move(from);
  }

  inline LEAVE_ROOM_REQ& operator=(const LEAVE_ROOM_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline LEAVE_ROOM_REQ& operator=(LEAVE_ROOM_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LEAVE_ROOM_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LEAVE_ROOM_REQ* internal_default_instance() {
    return reinterpret_cast<const LEAVE_ROOM_REQ*>(
               &_LEAVE_ROOM_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LEAVE_ROOM_REQ& a, LEAVE_ROOM_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(LEAVE_ROOM_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LEAVE_ROOM_REQ* New() const final {
    return CreateMaybeMessage<LEAVE_ROOM_REQ>(nullptr);
  }

  LEAVE_ROOM_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LEAVE_ROOM_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LEAVE_ROOM_REQ& from);
  void MergeFrom(const LEAVE_ROOM_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LEAVE_ROOM_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LEAVE_ROOM_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required int32 var_id = 2;
  bool has_var_id() const;
  private:
  bool _internal_has_var_id() const;
  public:
  void clear_var_id();
  ::PROTOBUF_NAMESPACE_ID::int32 var_id() const;
  void set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_id() const;
  void _internal_set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:LEAVE_ROOM_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_id_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class ROOM_LIST_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ROOM_LIST_REQ) */ {
 public:
  ROOM_LIST_REQ();
  virtual ~ROOM_LIST_REQ();

  ROOM_LIST_REQ(const ROOM_LIST_REQ& from);
  ROOM_LIST_REQ(ROOM_LIST_REQ&& from) noexcept
    : ROOM_LIST_REQ() {
    *this = ::std::move(from);
  }

  inline ROOM_LIST_REQ& operator=(const ROOM_LIST_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROOM_LIST_REQ& operator=(ROOM_LIST_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROOM_LIST_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROOM_LIST_REQ* internal_default_instance() {
    return reinterpret_cast<const ROOM_LIST_REQ*>(
               &_ROOM_LIST_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ROOM_LIST_REQ& a, ROOM_LIST_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(ROOM_LIST_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROOM_LIST_REQ* New() const final {
    return CreateMaybeMessage<ROOM_LIST_REQ>(nullptr);
  }

  ROOM_LIST_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROOM_LIST_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROOM_LIST_REQ& from);
  void MergeFrom(const ROOM_LIST_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROOM_LIST_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ROOM_LIST_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:ROOM_LIST_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class MATCH_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH_REQ) */ {
 public:
  MATCH_REQ();
  virtual ~MATCH_REQ();

  MATCH_REQ(const MATCH_REQ& from);
  MATCH_REQ(MATCH_REQ&& from) noexcept
    : MATCH_REQ() {
    *this = ::std::move(from);
  }

  inline MATCH_REQ& operator=(const MATCH_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline MATCH_REQ& operator=(MATCH_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MATCH_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MATCH_REQ* internal_default_instance() {
    return reinterpret_cast<const MATCH_REQ*>(
               &_MATCH_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MATCH_REQ& a, MATCH_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(MATCH_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MATCH_REQ* New() const final {
    return CreateMaybeMessage<MATCH_REQ>(nullptr);
  }

  MATCH_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MATCH_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MATCH_REQ& from);
  void MergeFrom(const MATCH_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MATCH_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .PROTOCOL id = 1 [default = ID_PKT_MATCH_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class RANK_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RANK_REQ) */ {
 public:
  RANK_REQ();
  virtual ~RANK_REQ();

  RANK_REQ(const RANK_REQ& from);
  RANK_REQ(RANK_REQ&& from) noexcept
    : RANK_REQ() {
    *this = ::std::move(from);
  }

  inline RANK_REQ& operator=(const RANK_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline RANK_REQ& operator=(RANK_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RANK_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RANK_REQ* internal_default_instance() {
    return reinterpret_cast<const RANK_REQ*>(
               &_RANK_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RANK_REQ& a, RANK_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(RANK_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RANK_REQ* New() const final {
    return CreateMaybeMessage<RANK_REQ>(nullptr);
  }

  RANK_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RANK_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RANK_REQ& from);
  void MergeFrom(const RANK_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RANK_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RANK_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .PROTOCOL id = 1 [default = ID_PKT_RANK_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:RANK_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class QNS_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QNS_REQ) */ {
 public:
  QNS_REQ();
  virtual ~QNS_REQ();

  QNS_REQ(const QNS_REQ& from);
  QNS_REQ(QNS_REQ&& from) noexcept
    : QNS_REQ() {
    *this = ::std::move(from);
  }

  inline QNS_REQ& operator=(const QNS_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline QNS_REQ& operator=(QNS_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QNS_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QNS_REQ* internal_default_instance() {
    return reinterpret_cast<const QNS_REQ*>(
               &_QNS_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QNS_REQ& a, QNS_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(QNS_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QNS_REQ* New() const final {
    return CreateMaybeMessage<QNS_REQ>(nullptr);
  }

  QNS_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QNS_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QNS_REQ& from);
  void MergeFrom(const QNS_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QNS_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QNS_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required bytes var_message = 2;
  bool has_var_message() const;
  private:
  bool _internal_has_var_message() const;
  public:
  void clear_var_message();
  const std::string& var_message() const;
  void set_var_message(const std::string& value);
  void set_var_message(std::string&& value);
  void set_var_message(const char* value);
  void set_var_message(const void* value, size_t size);
  std::string* mutable_var_message();
  std::string* release_var_message();
  void set_allocated_var_message(std::string* var_message);
  private:
  const std::string& _internal_var_message() const;
  void _internal_set_var_message(const std::string& value);
  std::string* _internal_mutable_var_message();
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_QNS_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:QNS_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_message_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class ROOM_PASS_THROUGH_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ROOM_PASS_THROUGH_REQ) */ {
 public:
  ROOM_PASS_THROUGH_REQ();
  virtual ~ROOM_PASS_THROUGH_REQ();

  ROOM_PASS_THROUGH_REQ(const ROOM_PASS_THROUGH_REQ& from);
  ROOM_PASS_THROUGH_REQ(ROOM_PASS_THROUGH_REQ&& from) noexcept
    : ROOM_PASS_THROUGH_REQ() {
    *this = ::std::move(from);
  }

  inline ROOM_PASS_THROUGH_REQ& operator=(const ROOM_PASS_THROUGH_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROOM_PASS_THROUGH_REQ& operator=(ROOM_PASS_THROUGH_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROOM_PASS_THROUGH_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROOM_PASS_THROUGH_REQ* internal_default_instance() {
    return reinterpret_cast<const ROOM_PASS_THROUGH_REQ*>(
               &_ROOM_PASS_THROUGH_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ROOM_PASS_THROUGH_REQ& a, ROOM_PASS_THROUGH_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(ROOM_PASS_THROUGH_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROOM_PASS_THROUGH_REQ* New() const final {
    return CreateMaybeMessage<ROOM_PASS_THROUGH_REQ>(nullptr);
  }

  ROOM_PASS_THROUGH_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROOM_PASS_THROUGH_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROOM_PASS_THROUGH_REQ& from);
  void MergeFrom(const ROOM_PASS_THROUGH_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROOM_PASS_THROUGH_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ROOM_PASS_THROUGH_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 2,
    kVarMessageIntFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // required bytes var_message = 2;
  bool has_var_message() const;
  private:
  bool _internal_has_var_message() const;
  public:
  void clear_var_message();
  const std::string& var_message() const;
  void set_var_message(const std::string& value);
  void set_var_message(std::string&& value);
  void set_var_message(const char* value);
  void set_var_message(const void* value, size_t size);
  std::string* mutable_var_message();
  std::string* release_var_message();
  void set_allocated_var_message(std::string* var_message);
  private:
  const std::string& _internal_var_message() const;
  void _internal_set_var_message(const std::string& value);
  std::string* _internal_mutable_var_message();
  public:

  // required int32 var_message_int = 3;
  bool has_var_message_int() const;
  private:
  bool _internal_has_var_message_int() const;
  public:
  void clear_var_message_int();
  ::PROTOBUF_NAMESPACE_ID::int32 var_message_int() const;
  void set_var_message_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_message_int() const;
  void _internal_set_var_message_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:ROOM_PASS_THROUGH_REQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_message_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_message_int_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class CANCEL_MATCH_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CANCEL_MATCH_REQ) */ {
 public:
  CANCEL_MATCH_REQ();
  virtual ~CANCEL_MATCH_REQ();

  CANCEL_MATCH_REQ(const CANCEL_MATCH_REQ& from);
  CANCEL_MATCH_REQ(CANCEL_MATCH_REQ&& from) noexcept
    : CANCEL_MATCH_REQ() {
    *this = ::std::move(from);
  }

  inline CANCEL_MATCH_REQ& operator=(const CANCEL_MATCH_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CANCEL_MATCH_REQ& operator=(CANCEL_MATCH_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CANCEL_MATCH_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CANCEL_MATCH_REQ* internal_default_instance() {
    return reinterpret_cast<const CANCEL_MATCH_REQ*>(
               &_CANCEL_MATCH_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CANCEL_MATCH_REQ& a, CANCEL_MATCH_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CANCEL_MATCH_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CANCEL_MATCH_REQ* New() const final {
    return CreateMaybeMessage<CANCEL_MATCH_REQ>(nullptr);
  }

  CANCEL_MATCH_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CANCEL_MATCH_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CANCEL_MATCH_REQ& from);
  void MergeFrom(const CANCEL_MATCH_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CANCEL_MATCH_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CANCEL_MATCH_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .PROTOCOL id = 1 [default = ID_PKT_CANCEL_MATCH_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:CANCEL_MATCH_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class NOTICE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NOTICE_REQ) */ {
 public:
  NOTICE_REQ();
  virtual ~NOTICE_REQ();

  NOTICE_REQ(const NOTICE_REQ& from);
  NOTICE_REQ(NOTICE_REQ&& from) noexcept
    : NOTICE_REQ() {
    *this = ::std::move(from);
  }

  inline NOTICE_REQ& operator=(const NOTICE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline NOTICE_REQ& operator=(NOTICE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NOTICE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NOTICE_REQ* internal_default_instance() {
    return reinterpret_cast<const NOTICE_REQ*>(
               &_NOTICE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NOTICE_REQ& a, NOTICE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(NOTICE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NOTICE_REQ* New() const final {
    return CreateMaybeMessage<NOTICE_REQ>(nullptr);
  }

  NOTICE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NOTICE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NOTICE_REQ& from);
  void MergeFrom(const NOTICE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NOTICE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NOTICE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:NOTICE_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class CHECK_NICKNAME_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CHECK_NICKNAME_REQ) */ {
 public:
  CHECK_NICKNAME_REQ();
  virtual ~CHECK_NICKNAME_REQ();

  CHECK_NICKNAME_REQ(const CHECK_NICKNAME_REQ& from);
  CHECK_NICKNAME_REQ(CHECK_NICKNAME_REQ&& from) noexcept
    : CHECK_NICKNAME_REQ() {
    *this = ::std::move(from);
  }

  inline CHECK_NICKNAME_REQ& operator=(const CHECK_NICKNAME_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CHECK_NICKNAME_REQ& operator=(CHECK_NICKNAME_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CHECK_NICKNAME_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CHECK_NICKNAME_REQ* internal_default_instance() {
    return reinterpret_cast<const CHECK_NICKNAME_REQ*>(
               &_CHECK_NICKNAME_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CHECK_NICKNAME_REQ& a, CHECK_NICKNAME_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CHECK_NICKNAME_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CHECK_NICKNAME_REQ* New() const final {
    return CreateMaybeMessage<CHECK_NICKNAME_REQ>(nullptr);
  }

  CHECK_NICKNAME_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CHECK_NICKNAME_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CHECK_NICKNAME_REQ& from);
  void MergeFrom(const CHECK_NICKNAME_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CHECK_NICKNAME_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CHECK_NICKNAME_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required bytes var_name = 2;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const void* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_CHECK_NICKNAME_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:CHECK_NICKNAME_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class BITMAP_MESSAGE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BITMAP_MESSAGE_REQ) */ {
 public:
  BITMAP_MESSAGE_REQ();
  virtual ~BITMAP_MESSAGE_REQ();

  BITMAP_MESSAGE_REQ(const BITMAP_MESSAGE_REQ& from);
  BITMAP_MESSAGE_REQ(BITMAP_MESSAGE_REQ&& from) noexcept
    : BITMAP_MESSAGE_REQ() {
    *this = ::std::move(from);
  }

  inline BITMAP_MESSAGE_REQ& operator=(const BITMAP_MESSAGE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline BITMAP_MESSAGE_REQ& operator=(BITMAP_MESSAGE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BITMAP_MESSAGE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BITMAP_MESSAGE_REQ* internal_default_instance() {
    return reinterpret_cast<const BITMAP_MESSAGE_REQ*>(
               &_BITMAP_MESSAGE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BITMAP_MESSAGE_REQ& a, BITMAP_MESSAGE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(BITMAP_MESSAGE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BITMAP_MESSAGE_REQ* New() const final {
    return CreateMaybeMessage<BITMAP_MESSAGE_REQ>(nullptr);
  }

  BITMAP_MESSAGE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BITMAP_MESSAGE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BITMAP_MESSAGE_REQ& from);
  void MergeFrom(const BITMAP_MESSAGE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BITMAP_MESSAGE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BITMAP_MESSAGE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated bytes var_message = 2;
  int var_message_size() const;
  private:
  int _internal_var_message_size() const;
  public:
  void clear_var_message();
  const std::string& var_message(int index) const;
  std::string* mutable_var_message(int index);
  void set_var_message(int index, const std::string& value);
  void set_var_message(int index, std::string&& value);
  void set_var_message(int index, const char* value);
  void set_var_message(int index, const void* value, size_t size);
  std::string* add_var_message();
  void add_var_message(const std::string& value);
  void add_var_message(std::string&& value);
  void add_var_message(const char* value);
  void add_var_message(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& var_message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_var_message();
  private:
  const std::string& _internal_var_message(int index) const;
  std::string* _internal_add_var_message();
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:BITMAP_MESSAGE_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> var_message_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class AUDIO_MESSAGE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUDIO_MESSAGE_REQ) */ {
 public:
  AUDIO_MESSAGE_REQ();
  virtual ~AUDIO_MESSAGE_REQ();

  AUDIO_MESSAGE_REQ(const AUDIO_MESSAGE_REQ& from);
  AUDIO_MESSAGE_REQ(AUDIO_MESSAGE_REQ&& from) noexcept
    : AUDIO_MESSAGE_REQ() {
    *this = ::std::move(from);
  }

  inline AUDIO_MESSAGE_REQ& operator=(const AUDIO_MESSAGE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUDIO_MESSAGE_REQ& operator=(AUDIO_MESSAGE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AUDIO_MESSAGE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AUDIO_MESSAGE_REQ* internal_default_instance() {
    return reinterpret_cast<const AUDIO_MESSAGE_REQ*>(
               &_AUDIO_MESSAGE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AUDIO_MESSAGE_REQ& a, AUDIO_MESSAGE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(AUDIO_MESSAGE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AUDIO_MESSAGE_REQ* New() const final {
    return CreateMaybeMessage<AUDIO_MESSAGE_REQ>(nullptr);
  }

  AUDIO_MESSAGE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AUDIO_MESSAGE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AUDIO_MESSAGE_REQ& from);
  void MergeFrom(const AUDIO_MESSAGE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUDIO_MESSAGE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUDIO_MESSAGE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated bytes var_message = 2;
  int var_message_size() const;
  private:
  int _internal_var_message_size() const;
  public:
  void clear_var_message();
  const std::string& var_message(int index) const;
  std::string* mutable_var_message(int index);
  void set_var_message(int index, const std::string& value);
  void set_var_message(int index, std::string&& value);
  void set_var_message(int index, const char* value);
  void set_var_message(int index, const void* value, size_t size);
  std::string* add_var_message();
  void add_var_message(const std::string& value);
  void add_var_message(std::string&& value);
  void add_var_message(const char* value);
  void add_var_message(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& var_message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_var_message();
  private:
  const std::string& _internal_var_message(int index) const;
  std::string* _internal_add_var_message();
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:AUDIO_MESSAGE_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> var_message_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VERSION_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_REQ];
inline bool VERSION_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VERSION_REQ::has_id() const {
  return _internal_has_id();
}
inline void VERSION_REQ::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL VERSION_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL VERSION_REQ::id() const {
  // @@protoc_insertion_point(field_get:VERSION_REQ.id)
  return _internal_id();
}
inline void VERSION_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void VERSION_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:VERSION_REQ.id)
}

// -------------------------------------------------------------------

// LOGIN_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_REQ];
inline bool LOGIN_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LOGIN_REQ::has_id() const {
  return _internal_has_id();
}
inline void LOGIN_REQ::clear_id() {
  id_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOCOL LOGIN_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL LOGIN_REQ::id() const {
  // @@protoc_insertion_point(field_get:LOGIN_REQ.id)
  return _internal_id();
}
inline void LOGIN_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void LOGIN_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LOGIN_REQ.id)
}

// required string var_uid = 2;
inline bool LOGIN_REQ::_internal_has_var_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LOGIN_REQ::has_var_uid() const {
  return _internal_has_var_uid();
}
inline void LOGIN_REQ::clear_var_uid() {
  var_uid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LOGIN_REQ::var_uid() const {
  // @@protoc_insertion_point(field_get:LOGIN_REQ.var_uid)
  return _internal_var_uid();
}
inline void LOGIN_REQ::set_var_uid(const std::string& value) {
  _internal_set_var_uid(value);
  // @@protoc_insertion_point(field_set:LOGIN_REQ.var_uid)
}
inline std::string* LOGIN_REQ::mutable_var_uid() {
  // @@protoc_insertion_point(field_mutable:LOGIN_REQ.var_uid)
  return _internal_mutable_var_uid();
}
inline const std::string& LOGIN_REQ::_internal_var_uid() const {
  return var_uid_.GetNoArena();
}
inline void LOGIN_REQ::_internal_set_var_uid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LOGIN_REQ::set_var_uid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_uid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOGIN_REQ.var_uid)
}
inline void LOGIN_REQ::set_var_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOGIN_REQ.var_uid)
}
inline void LOGIN_REQ::set_var_uid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOGIN_REQ.var_uid)
}
inline std::string* LOGIN_REQ::_internal_mutable_var_uid() {
  _has_bits_[0] |= 0x00000001u;
  return var_uid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LOGIN_REQ::release_var_uid() {
  // @@protoc_insertion_point(field_release:LOGIN_REQ.var_uid)
  if (!_internal_has_var_uid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_uid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LOGIN_REQ::set_allocated_var_uid(std::string* var_uid) {
  if (var_uid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_uid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_uid);
  // @@protoc_insertion_point(field_set_allocated:LOGIN_REQ.var_uid)
}

// required string var_token = 3;
inline bool LOGIN_REQ::_internal_has_var_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LOGIN_REQ::has_var_token() const {
  return _internal_has_var_token();
}
inline void LOGIN_REQ::clear_var_token() {
  var_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LOGIN_REQ::var_token() const {
  // @@protoc_insertion_point(field_get:LOGIN_REQ.var_token)
  return _internal_var_token();
}
inline void LOGIN_REQ::set_var_token(const std::string& value) {
  _internal_set_var_token(value);
  // @@protoc_insertion_point(field_set:LOGIN_REQ.var_token)
}
inline std::string* LOGIN_REQ::mutable_var_token() {
  // @@protoc_insertion_point(field_mutable:LOGIN_REQ.var_token)
  return _internal_mutable_var_token();
}
inline const std::string& LOGIN_REQ::_internal_var_token() const {
  return var_token_.GetNoArena();
}
inline void LOGIN_REQ::_internal_set_var_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  var_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LOGIN_REQ::set_var_token(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  var_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOGIN_REQ.var_token)
}
inline void LOGIN_REQ::set_var_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  var_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOGIN_REQ.var_token)
}
inline void LOGIN_REQ::set_var_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  var_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOGIN_REQ.var_token)
}
inline std::string* LOGIN_REQ::_internal_mutable_var_token() {
  _has_bits_[0] |= 0x00000002u;
  return var_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LOGIN_REQ::release_var_token() {
  // @@protoc_insertion_point(field_release:LOGIN_REQ.var_token)
  if (!_internal_has_var_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return var_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LOGIN_REQ::set_allocated_var_token(std::string* var_token) {
  if (var_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  var_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_token);
  // @@protoc_insertion_point(field_set_allocated:LOGIN_REQ.var_token)
}

// -------------------------------------------------------------------

// CREATE_ROOM_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_REQ];
inline bool CREATE_ROOM_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CREATE_ROOM_REQ::has_id() const {
  return _internal_has_id();
}
inline void CREATE_ROOM_REQ::clear_id() {
  id_ = 4;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL CREATE_ROOM_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL CREATE_ROOM_REQ::id() const {
  // @@protoc_insertion_point(field_get:CREATE_ROOM_REQ.id)
  return _internal_id();
}
inline void CREATE_ROOM_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CREATE_ROOM_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CREATE_ROOM_REQ.id)
}

// required bytes var_name = 2;
inline bool CREATE_ROOM_REQ::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CREATE_ROOM_REQ::has_var_name() const {
  return _internal_has_var_name();
}
inline void CREATE_ROOM_REQ::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CREATE_ROOM_REQ::var_name() const {
  // @@protoc_insertion_point(field_get:CREATE_ROOM_REQ.var_name)
  return _internal_var_name();
}
inline void CREATE_ROOM_REQ::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:CREATE_ROOM_REQ.var_name)
}
inline std::string* CREATE_ROOM_REQ::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:CREATE_ROOM_REQ.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& CREATE_ROOM_REQ::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void CREATE_ROOM_REQ::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CREATE_ROOM_REQ::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CREATE_ROOM_REQ.var_name)
}
inline void CREATE_ROOM_REQ::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CREATE_ROOM_REQ.var_name)
}
inline void CREATE_ROOM_REQ::set_var_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CREATE_ROOM_REQ.var_name)
}
inline std::string* CREATE_ROOM_REQ::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CREATE_ROOM_REQ::release_var_name() {
  // @@protoc_insertion_point(field_release:CREATE_ROOM_REQ.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CREATE_ROOM_REQ::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:CREATE_ROOM_REQ.var_name)
}

// -------------------------------------------------------------------

// ENTER_ROOM_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_REQ];
inline bool ENTER_ROOM_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ENTER_ROOM_REQ::has_id() const {
  return _internal_has_id();
}
inline void ENTER_ROOM_REQ::clear_id() {
  id_ = 6;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL ENTER_ROOM_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL ENTER_ROOM_REQ::id() const {
  // @@protoc_insertion_point(field_get:ENTER_ROOM_REQ.id)
  return _internal_id();
}
inline void ENTER_ROOM_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void ENTER_ROOM_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ENTER_ROOM_REQ.id)
}

// required int32 var_id = 2;
inline bool ENTER_ROOM_REQ::_internal_has_var_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ENTER_ROOM_REQ::has_var_id() const {
  return _internal_has_var_id();
}
inline void ENTER_ROOM_REQ::clear_var_id() {
  var_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ENTER_ROOM_REQ::_internal_var_id() const {
  return var_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ENTER_ROOM_REQ::var_id() const {
  // @@protoc_insertion_point(field_get:ENTER_ROOM_REQ.var_id)
  return _internal_var_id();
}
inline void ENTER_ROOM_REQ::_internal_set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  var_id_ = value;
}
inline void ENTER_ROOM_REQ::set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_id(value);
  // @@protoc_insertion_point(field_set:ENTER_ROOM_REQ.var_id)
}

// -------------------------------------------------------------------

// LEAVE_ROOM_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_REQ];
inline bool LEAVE_ROOM_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LEAVE_ROOM_REQ::has_id() const {
  return _internal_has_id();
}
inline void LEAVE_ROOM_REQ::clear_id() {
  id_ = 8;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL LEAVE_ROOM_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL LEAVE_ROOM_REQ::id() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_REQ.id)
  return _internal_id();
}
inline void LEAVE_ROOM_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void LEAVE_ROOM_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_REQ.id)
}

// required int32 var_id = 2;
inline bool LEAVE_ROOM_REQ::_internal_has_var_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LEAVE_ROOM_REQ::has_var_id() const {
  return _internal_has_var_id();
}
inline void LEAVE_ROOM_REQ::clear_var_id() {
  var_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LEAVE_ROOM_REQ::_internal_var_id() const {
  return var_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LEAVE_ROOM_REQ::var_id() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_REQ.var_id)
  return _internal_var_id();
}
inline void LEAVE_ROOM_REQ::_internal_set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  var_id_ = value;
}
inline void LEAVE_ROOM_REQ::set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_id(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_REQ.var_id)
}

// -------------------------------------------------------------------

// ROOM_LIST_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_REQ];
inline bool ROOM_LIST_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROOM_LIST_REQ::has_id() const {
  return _internal_has_id();
}
inline void ROOM_LIST_REQ::clear_id() {
  id_ = 13;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL ROOM_LIST_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL ROOM_LIST_REQ::id() const {
  // @@protoc_insertion_point(field_get:ROOM_LIST_REQ.id)
  return _internal_id();
}
inline void ROOM_LIST_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void ROOM_LIST_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ROOM_LIST_REQ.id)
}

// -------------------------------------------------------------------

// MATCH_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_MATCH_REQ];
inline bool MATCH_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MATCH_REQ::has_id() const {
  return _internal_has_id();
}
inline void MATCH_REQ::clear_id() {
  id_ = 15;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL MATCH_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL MATCH_REQ::id() const {
  // @@protoc_insertion_point(field_get:MATCH_REQ.id)
  return _internal_id();
}
inline void MATCH_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void MATCH_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MATCH_REQ.id)
}

// -------------------------------------------------------------------

// RANK_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_RANK_REQ];
inline bool RANK_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RANK_REQ::has_id() const {
  return _internal_has_id();
}
inline void RANK_REQ::clear_id() {
  id_ = 19;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL RANK_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL RANK_REQ::id() const {
  // @@protoc_insertion_point(field_get:RANK_REQ.id)
  return _internal_id();
}
inline void RANK_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void RANK_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RANK_REQ.id)
}

// -------------------------------------------------------------------

// QNS_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_QNS_REQ];
inline bool QNS_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QNS_REQ::has_id() const {
  return _internal_has_id();
}
inline void QNS_REQ::clear_id() {
  id_ = 21;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL QNS_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL QNS_REQ::id() const {
  // @@protoc_insertion_point(field_get:QNS_REQ.id)
  return _internal_id();
}
inline void QNS_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void QNS_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:QNS_REQ.id)
}

// required bytes var_message = 2;
inline bool QNS_REQ::_internal_has_var_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QNS_REQ::has_var_message() const {
  return _internal_has_var_message();
}
inline void QNS_REQ::clear_var_message() {
  var_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QNS_REQ::var_message() const {
  // @@protoc_insertion_point(field_get:QNS_REQ.var_message)
  return _internal_var_message();
}
inline void QNS_REQ::set_var_message(const std::string& value) {
  _internal_set_var_message(value);
  // @@protoc_insertion_point(field_set:QNS_REQ.var_message)
}
inline std::string* QNS_REQ::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable:QNS_REQ.var_message)
  return _internal_mutable_var_message();
}
inline const std::string& QNS_REQ::_internal_var_message() const {
  return var_message_.GetNoArena();
}
inline void QNS_REQ::_internal_set_var_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QNS_REQ::set_var_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QNS_REQ.var_message)
}
inline void QNS_REQ::set_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QNS_REQ.var_message)
}
inline void QNS_REQ::set_var_message(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QNS_REQ.var_message)
}
inline std::string* QNS_REQ::_internal_mutable_var_message() {
  _has_bits_[0] |= 0x00000001u;
  return var_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QNS_REQ::release_var_message() {
  // @@protoc_insertion_point(field_release:QNS_REQ.var_message)
  if (!_internal_has_var_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QNS_REQ::set_allocated_var_message(std::string* var_message) {
  if (var_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_message);
  // @@protoc_insertion_point(field_set_allocated:QNS_REQ.var_message)
}

// -------------------------------------------------------------------

// ROOM_PASS_THROUGH_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_REQ];
inline bool ROOM_PASS_THROUGH_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ROOM_PASS_THROUGH_REQ::has_id() const {
  return _internal_has_id();
}
inline void ROOM_PASS_THROUGH_REQ::clear_id() {
  id_ = 23;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOCOL ROOM_PASS_THROUGH_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL ROOM_PASS_THROUGH_REQ::id() const {
  // @@protoc_insertion_point(field_get:ROOM_PASS_THROUGH_REQ.id)
  return _internal_id();
}
inline void ROOM_PASS_THROUGH_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void ROOM_PASS_THROUGH_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ROOM_PASS_THROUGH_REQ.id)
}

// required bytes var_message = 2;
inline bool ROOM_PASS_THROUGH_REQ::_internal_has_var_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROOM_PASS_THROUGH_REQ::has_var_message() const {
  return _internal_has_var_message();
}
inline void ROOM_PASS_THROUGH_REQ::clear_var_message() {
  var_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ROOM_PASS_THROUGH_REQ::var_message() const {
  // @@protoc_insertion_point(field_get:ROOM_PASS_THROUGH_REQ.var_message)
  return _internal_var_message();
}
inline void ROOM_PASS_THROUGH_REQ::set_var_message(const std::string& value) {
  _internal_set_var_message(value);
  // @@protoc_insertion_point(field_set:ROOM_PASS_THROUGH_REQ.var_message)
}
inline std::string* ROOM_PASS_THROUGH_REQ::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable:ROOM_PASS_THROUGH_REQ.var_message)
  return _internal_mutable_var_message();
}
inline const std::string& ROOM_PASS_THROUGH_REQ::_internal_var_message() const {
  return var_message_.GetNoArena();
}
inline void ROOM_PASS_THROUGH_REQ::_internal_set_var_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ROOM_PASS_THROUGH_REQ::set_var_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ROOM_PASS_THROUGH_REQ.var_message)
}
inline void ROOM_PASS_THROUGH_REQ::set_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ROOM_PASS_THROUGH_REQ.var_message)
}
inline void ROOM_PASS_THROUGH_REQ::set_var_message(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ROOM_PASS_THROUGH_REQ.var_message)
}
inline std::string* ROOM_PASS_THROUGH_REQ::_internal_mutable_var_message() {
  _has_bits_[0] |= 0x00000001u;
  return var_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ROOM_PASS_THROUGH_REQ::release_var_message() {
  // @@protoc_insertion_point(field_release:ROOM_PASS_THROUGH_REQ.var_message)
  if (!_internal_has_var_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ROOM_PASS_THROUGH_REQ::set_allocated_var_message(std::string* var_message) {
  if (var_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_message);
  // @@protoc_insertion_point(field_set_allocated:ROOM_PASS_THROUGH_REQ.var_message)
}

// required int32 var_message_int = 3;
inline bool ROOM_PASS_THROUGH_REQ::_internal_has_var_message_int() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ROOM_PASS_THROUGH_REQ::has_var_message_int() const {
  return _internal_has_var_message_int();
}
inline void ROOM_PASS_THROUGH_REQ::clear_var_message_int() {
  var_message_int_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ROOM_PASS_THROUGH_REQ::_internal_var_message_int() const {
  return var_message_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ROOM_PASS_THROUGH_REQ::var_message_int() const {
  // @@protoc_insertion_point(field_get:ROOM_PASS_THROUGH_REQ.var_message_int)
  return _internal_var_message_int();
}
inline void ROOM_PASS_THROUGH_REQ::_internal_set_var_message_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  var_message_int_ = value;
}
inline void ROOM_PASS_THROUGH_REQ::set_var_message_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_message_int(value);
  // @@protoc_insertion_point(field_set:ROOM_PASS_THROUGH_REQ.var_message_int)
}

// -------------------------------------------------------------------

// CANCEL_MATCH_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_CANCEL_MATCH_REQ];
inline bool CANCEL_MATCH_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CANCEL_MATCH_REQ::has_id() const {
  return _internal_has_id();
}
inline void CANCEL_MATCH_REQ::clear_id() {
  id_ = 25;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL CANCEL_MATCH_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL CANCEL_MATCH_REQ::id() const {
  // @@protoc_insertion_point(field_get:CANCEL_MATCH_REQ.id)
  return _internal_id();
}
inline void CANCEL_MATCH_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CANCEL_MATCH_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CANCEL_MATCH_REQ.id)
}

// -------------------------------------------------------------------

// NOTICE_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_REQ];
inline bool NOTICE_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NOTICE_REQ::has_id() const {
  return _internal_has_id();
}
inline void NOTICE_REQ::clear_id() {
  id_ = 27;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL NOTICE_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL NOTICE_REQ::id() const {
  // @@protoc_insertion_point(field_get:NOTICE_REQ.id)
  return _internal_id();
}
inline void NOTICE_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void NOTICE_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NOTICE_REQ.id)
}

// -------------------------------------------------------------------

// CHECK_NICKNAME_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_CHECK_NICKNAME_REQ];
inline bool CHECK_NICKNAME_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CHECK_NICKNAME_REQ::has_id() const {
  return _internal_has_id();
}
inline void CHECK_NICKNAME_REQ::clear_id() {
  id_ = 29;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL CHECK_NICKNAME_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL CHECK_NICKNAME_REQ::id() const {
  // @@protoc_insertion_point(field_get:CHECK_NICKNAME_REQ.id)
  return _internal_id();
}
inline void CHECK_NICKNAME_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CHECK_NICKNAME_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CHECK_NICKNAME_REQ.id)
}

// required bytes var_name = 2;
inline bool CHECK_NICKNAME_REQ::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CHECK_NICKNAME_REQ::has_var_name() const {
  return _internal_has_var_name();
}
inline void CHECK_NICKNAME_REQ::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CHECK_NICKNAME_REQ::var_name() const {
  // @@protoc_insertion_point(field_get:CHECK_NICKNAME_REQ.var_name)
  return _internal_var_name();
}
inline void CHECK_NICKNAME_REQ::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:CHECK_NICKNAME_REQ.var_name)
}
inline std::string* CHECK_NICKNAME_REQ::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:CHECK_NICKNAME_REQ.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& CHECK_NICKNAME_REQ::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void CHECK_NICKNAME_REQ::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CHECK_NICKNAME_REQ::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CHECK_NICKNAME_REQ.var_name)
}
inline void CHECK_NICKNAME_REQ::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CHECK_NICKNAME_REQ.var_name)
}
inline void CHECK_NICKNAME_REQ::set_var_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CHECK_NICKNAME_REQ.var_name)
}
inline std::string* CHECK_NICKNAME_REQ::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CHECK_NICKNAME_REQ::release_var_name() {
  // @@protoc_insertion_point(field_release:CHECK_NICKNAME_REQ.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CHECK_NICKNAME_REQ::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:CHECK_NICKNAME_REQ.var_name)
}

// -------------------------------------------------------------------

// BITMAP_MESSAGE_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_REQ];
inline bool BITMAP_MESSAGE_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BITMAP_MESSAGE_REQ::has_id() const {
  return _internal_has_id();
}
inline void BITMAP_MESSAGE_REQ::clear_id() {
  id_ = 10;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL BITMAP_MESSAGE_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL BITMAP_MESSAGE_REQ::id() const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_REQ.id)
  return _internal_id();
}
inline void BITMAP_MESSAGE_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void BITMAP_MESSAGE_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_REQ.id)
}

// repeated bytes var_message = 2;
inline int BITMAP_MESSAGE_REQ::_internal_var_message_size() const {
  return var_message_.size();
}
inline int BITMAP_MESSAGE_REQ::var_message_size() const {
  return _internal_var_message_size();
}
inline void BITMAP_MESSAGE_REQ::clear_var_message() {
  var_message_.Clear();
}
inline std::string* BITMAP_MESSAGE_REQ::add_var_message() {
  // @@protoc_insertion_point(field_add_mutable:BITMAP_MESSAGE_REQ.var_message)
  return _internal_add_var_message();
}
inline const std::string& BITMAP_MESSAGE_REQ::_internal_var_message(int index) const {
  return var_message_.Get(index);
}
inline const std::string& BITMAP_MESSAGE_REQ::var_message(int index) const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_REQ.var_message)
  return _internal_var_message(index);
}
inline std::string* BITMAP_MESSAGE_REQ::mutable_var_message(int index) {
  // @@protoc_insertion_point(field_mutable:BITMAP_MESSAGE_REQ.var_message)
  return var_message_.Mutable(index);
}
inline void BITMAP_MESSAGE_REQ::set_var_message(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_REQ.var_message)
  var_message_.Mutable(index)->assign(value);
}
inline void BITMAP_MESSAGE_REQ::set_var_message(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_REQ.var_message)
  var_message_.Mutable(index)->assign(std::move(value));
}
inline void BITMAP_MESSAGE_REQ::set_var_message(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BITMAP_MESSAGE_REQ.var_message)
}
inline void BITMAP_MESSAGE_REQ::set_var_message(int index, const void* value, size_t size) {
  var_message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BITMAP_MESSAGE_REQ.var_message)
}
inline std::string* BITMAP_MESSAGE_REQ::_internal_add_var_message() {
  return var_message_.Add();
}
inline void BITMAP_MESSAGE_REQ::add_var_message(const std::string& value) {
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BITMAP_MESSAGE_REQ.var_message)
}
inline void BITMAP_MESSAGE_REQ::add_var_message(std::string&& value) {
  var_message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BITMAP_MESSAGE_REQ.var_message)
}
inline void BITMAP_MESSAGE_REQ::add_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BITMAP_MESSAGE_REQ.var_message)
}
inline void BITMAP_MESSAGE_REQ::add_var_message(const void* value, size_t size) {
  var_message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BITMAP_MESSAGE_REQ.var_message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BITMAP_MESSAGE_REQ::var_message() const {
  // @@protoc_insertion_point(field_list:BITMAP_MESSAGE_REQ.var_message)
  return var_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BITMAP_MESSAGE_REQ::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable_list:BITMAP_MESSAGE_REQ.var_message)
  return &var_message_;
}

// -------------------------------------------------------------------

// AUDIO_MESSAGE_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_REQ];
inline bool AUDIO_MESSAGE_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUDIO_MESSAGE_REQ::has_id() const {
  return _internal_has_id();
}
inline void AUDIO_MESSAGE_REQ::clear_id() {
  id_ = 31;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL AUDIO_MESSAGE_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL AUDIO_MESSAGE_REQ::id() const {
  // @@protoc_insertion_point(field_get:AUDIO_MESSAGE_REQ.id)
  return _internal_id();
}
inline void AUDIO_MESSAGE_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void AUDIO_MESSAGE_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_REQ.id)
}

// repeated bytes var_message = 2;
inline int AUDIO_MESSAGE_REQ::_internal_var_message_size() const {
  return var_message_.size();
}
inline int AUDIO_MESSAGE_REQ::var_message_size() const {
  return _internal_var_message_size();
}
inline void AUDIO_MESSAGE_REQ::clear_var_message() {
  var_message_.Clear();
}
inline std::string* AUDIO_MESSAGE_REQ::add_var_message() {
  // @@protoc_insertion_point(field_add_mutable:AUDIO_MESSAGE_REQ.var_message)
  return _internal_add_var_message();
}
inline const std::string& AUDIO_MESSAGE_REQ::_internal_var_message(int index) const {
  return var_message_.Get(index);
}
inline const std::string& AUDIO_MESSAGE_REQ::var_message(int index) const {
  // @@protoc_insertion_point(field_get:AUDIO_MESSAGE_REQ.var_message)
  return _internal_var_message(index);
}
inline std::string* AUDIO_MESSAGE_REQ::mutable_var_message(int index) {
  // @@protoc_insertion_point(field_mutable:AUDIO_MESSAGE_REQ.var_message)
  return var_message_.Mutable(index);
}
inline void AUDIO_MESSAGE_REQ::set_var_message(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_REQ.var_message)
  var_message_.Mutable(index)->assign(value);
}
inline void AUDIO_MESSAGE_REQ::set_var_message(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_REQ.var_message)
  var_message_.Mutable(index)->assign(std::move(value));
}
inline void AUDIO_MESSAGE_REQ::set_var_message(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AUDIO_MESSAGE_REQ.var_message)
}
inline void AUDIO_MESSAGE_REQ::set_var_message(int index, const void* value, size_t size) {
  var_message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AUDIO_MESSAGE_REQ.var_message)
}
inline std::string* AUDIO_MESSAGE_REQ::_internal_add_var_message() {
  return var_message_.Add();
}
inline void AUDIO_MESSAGE_REQ::add_var_message(const std::string& value) {
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AUDIO_MESSAGE_REQ.var_message)
}
inline void AUDIO_MESSAGE_REQ::add_var_message(std::string&& value) {
  var_message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AUDIO_MESSAGE_REQ.var_message)
}
inline void AUDIO_MESSAGE_REQ::add_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AUDIO_MESSAGE_REQ.var_message)
}
inline void AUDIO_MESSAGE_REQ::add_var_message(const void* value, size_t size) {
  var_message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AUDIO_MESSAGE_REQ.var_message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AUDIO_MESSAGE_REQ::var_message() const {
  // @@protoc_insertion_point(field_list:AUDIO_MESSAGE_REQ.var_message)
  return var_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AUDIO_MESSAGE_REQ::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable_list:AUDIO_MESSAGE_REQ.var_message)
  return &var_message_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CLI_2eGS_2eproto

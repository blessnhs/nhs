// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GS.CLI.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GS_2eCLI_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GS_2eCLI_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Structure.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GS_2eCLI_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GS_2eCLI_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GS_2eCLI_2eproto;
class AUDIO_MESSAGE_RES;
class AUDIO_MESSAGE_RESDefaultTypeInternal;
extern AUDIO_MESSAGE_RESDefaultTypeInternal _AUDIO_MESSAGE_RES_default_instance_;
class BITMAP_MESSAGE_RES;
class BITMAP_MESSAGE_RESDefaultTypeInternal;
extern BITMAP_MESSAGE_RESDefaultTypeInternal _BITMAP_MESSAGE_RES_default_instance_;
class CAMERA_CONTROL_RES;
class CAMERA_CONTROL_RESDefaultTypeInternal;
extern CAMERA_CONTROL_RESDefaultTypeInternal _CAMERA_CONTROL_RES_default_instance_;
class CLIENT_KICK;
class CLIENT_KICKDefaultTypeInternal;
extern CLIENT_KICKDefaultTypeInternal _CLIENT_KICK_default_instance_;
class CLIENT_LOGOUT_RES;
class CLIENT_LOGOUT_RESDefaultTypeInternal;
extern CLIENT_LOGOUT_RESDefaultTypeInternal _CLIENT_LOGOUT_RES_default_instance_;
class CREATE_ROOM_RES;
class CREATE_ROOM_RESDefaultTypeInternal;
extern CREATE_ROOM_RESDefaultTypeInternal _CREATE_ROOM_RES_default_instance_;
class ENTER_ROOM_RES;
class ENTER_ROOM_RESDefaultTypeInternal;
extern ENTER_ROOM_RESDefaultTypeInternal _ENTER_ROOM_RES_default_instance_;
class LEAVE_ROOM_RES;
class LEAVE_ROOM_RESDefaultTypeInternal;
extern LEAVE_ROOM_RESDefaultTypeInternal _LEAVE_ROOM_RES_default_instance_;
class LOGIN_RES;
class LOGIN_RESDefaultTypeInternal;
extern LOGIN_RESDefaultTypeInternal _LOGIN_RES_default_instance_;
class MAIL_LIST_RES;
class MAIL_LIST_RESDefaultTypeInternal;
extern MAIL_LIST_RESDefaultTypeInternal _MAIL_LIST_RES_default_instance_;
class MPEG2TS_MESSAGE_RES;
class MPEG2TS_MESSAGE_RESDefaultTypeInternal;
extern MPEG2TS_MESSAGE_RESDefaultTypeInternal _MPEG2TS_MESSAGE_RES_default_instance_;
class MPEG2TS_WAKE_UP_RES;
class MPEG2TS_WAKE_UP_RESDefaultTypeInternal;
extern MPEG2TS_WAKE_UP_RESDefaultTypeInternal _MPEG2TS_WAKE_UP_RES_default_instance_;
class NEW_USER_IN_ROOM_NTY;
class NEW_USER_IN_ROOM_NTYDefaultTypeInternal;
extern NEW_USER_IN_ROOM_NTYDefaultTypeInternal _NEW_USER_IN_ROOM_NTY_default_instance_;
class NOTICE_RES;
class NOTICE_RESDefaultTypeInternal;
extern NOTICE_RESDefaultTypeInternal _NOTICE_RES_default_instance_;
class PRAY_MESSAGE_REG_RES;
class PRAY_MESSAGE_REG_RESDefaultTypeInternal;
extern PRAY_MESSAGE_REG_RESDefaultTypeInternal _PRAY_MESSAGE_REG_RES_default_instance_;
class PRAY_MESSAGE_RES;
class PRAY_MESSAGE_RESDefaultTypeInternal;
extern PRAY_MESSAGE_RESDefaultTypeInternal _PRAY_MESSAGE_RES_default_instance_;
class QNA_RES;
class QNA_RESDefaultTypeInternal;
extern QNA_RESDefaultTypeInternal _QNA_RES_default_instance_;
class REG_RES;
class REG_RESDefaultTypeInternal;
extern REG_RESDefaultTypeInternal _REG_RES_default_instance_;
class ROOM_LIST_RES;
class ROOM_LIST_RESDefaultTypeInternal;
extern ROOM_LIST_RESDefaultTypeInternal _ROOM_LIST_RES_default_instance_;
class ROOM_PASS_THROUGH_RES;
class ROOM_PASS_THROUGH_RESDefaultTypeInternal;
extern ROOM_PASS_THROUGH_RESDefaultTypeInternal _ROOM_PASS_THROUGH_RES_default_instance_;
class VERSION_RES;
class VERSION_RESDefaultTypeInternal;
extern VERSION_RESDefaultTypeInternal _VERSION_RES_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AUDIO_MESSAGE_RES* Arena::CreateMaybeMessage<::AUDIO_MESSAGE_RES>(Arena*);
template<> ::BITMAP_MESSAGE_RES* Arena::CreateMaybeMessage<::BITMAP_MESSAGE_RES>(Arena*);
template<> ::CAMERA_CONTROL_RES* Arena::CreateMaybeMessage<::CAMERA_CONTROL_RES>(Arena*);
template<> ::CLIENT_KICK* Arena::CreateMaybeMessage<::CLIENT_KICK>(Arena*);
template<> ::CLIENT_LOGOUT_RES* Arena::CreateMaybeMessage<::CLIENT_LOGOUT_RES>(Arena*);
template<> ::CREATE_ROOM_RES* Arena::CreateMaybeMessage<::CREATE_ROOM_RES>(Arena*);
template<> ::ENTER_ROOM_RES* Arena::CreateMaybeMessage<::ENTER_ROOM_RES>(Arena*);
template<> ::LEAVE_ROOM_RES* Arena::CreateMaybeMessage<::LEAVE_ROOM_RES>(Arena*);
template<> ::LOGIN_RES* Arena::CreateMaybeMessage<::LOGIN_RES>(Arena*);
template<> ::MAIL_LIST_RES* Arena::CreateMaybeMessage<::MAIL_LIST_RES>(Arena*);
template<> ::MPEG2TS_MESSAGE_RES* Arena::CreateMaybeMessage<::MPEG2TS_MESSAGE_RES>(Arena*);
template<> ::MPEG2TS_WAKE_UP_RES* Arena::CreateMaybeMessage<::MPEG2TS_WAKE_UP_RES>(Arena*);
template<> ::NEW_USER_IN_ROOM_NTY* Arena::CreateMaybeMessage<::NEW_USER_IN_ROOM_NTY>(Arena*);
template<> ::NOTICE_RES* Arena::CreateMaybeMessage<::NOTICE_RES>(Arena*);
template<> ::PRAY_MESSAGE_REG_RES* Arena::CreateMaybeMessage<::PRAY_MESSAGE_REG_RES>(Arena*);
template<> ::PRAY_MESSAGE_RES* Arena::CreateMaybeMessage<::PRAY_MESSAGE_RES>(Arena*);
template<> ::QNA_RES* Arena::CreateMaybeMessage<::QNA_RES>(Arena*);
template<> ::REG_RES* Arena::CreateMaybeMessage<::REG_RES>(Arena*);
template<> ::ROOM_LIST_RES* Arena::CreateMaybeMessage<::ROOM_LIST_RES>(Arena*);
template<> ::ROOM_PASS_THROUGH_RES* Arena::CreateMaybeMessage<::ROOM_PASS_THROUGH_RES>(Arena*);
template<> ::VERSION_RES* Arena::CreateMaybeMessage<::VERSION_RES>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class VERSION_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VERSION_RES) */ {
 public:
  VERSION_RES();
  virtual ~VERSION_RES();

  VERSION_RES(const VERSION_RES& from);
  VERSION_RES(VERSION_RES&& from) noexcept
    : VERSION_RES() {
    *this = ::std::move(from);
  }

  inline VERSION_RES& operator=(const VERSION_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline VERSION_RES& operator=(VERSION_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VERSION_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VERSION_RES* internal_default_instance() {
    return reinterpret_cast<const VERSION_RES*>(
               &_VERSION_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VERSION_RES& a, VERSION_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(VERSION_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VERSION_RES* New() const final {
    return CreateMaybeMessage<VERSION_RES>(nullptr);
  }

  VERSION_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VERSION_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VERSION_RES& from);
  void MergeFrom(const VERSION_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VERSION_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VERSION_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarVersionFieldNumber = 2,
    kVarCodeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional float var_version = 2;
  bool has_var_version() const;
  private:
  bool _internal_has_var_version() const;
  public:
  void clear_var_version();
  float var_version() const;
  void set_var_version(float value);
  private:
  float _internal_var_version() const;
  void _internal_set_var_version(float value);
  public:

  // optional .ErrorCode var_code = 3;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:VERSION_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float var_version_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class LOGIN_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOGIN_RES) */ {
 public:
  LOGIN_RES();
  virtual ~LOGIN_RES();

  LOGIN_RES(const LOGIN_RES& from);
  LOGIN_RES(LOGIN_RES&& from) noexcept
    : LOGIN_RES() {
    *this = ::std::move(from);
  }

  inline LOGIN_RES& operator=(const LOGIN_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOGIN_RES& operator=(LOGIN_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOGIN_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOGIN_RES* internal_default_instance() {
    return reinterpret_cast<const LOGIN_RES*>(
               &_LOGIN_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LOGIN_RES& a, LOGIN_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(LOGIN_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOGIN_RES* New() const final {
    return CreateMaybeMessage<LOGIN_RES>(nullptr);
  }

  LOGIN_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOGIN_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOGIN_RES& from);
  void MergeFrom(const LOGIN_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOGIN_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOGIN_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarLocaleFieldNumber = 4,
    kVarNameFieldNumber = 5,
    kVarIndexFieldNumber = 3,
    kVarCodeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string var_locale = 4;
  bool has_var_locale() const;
  private:
  bool _internal_has_var_locale() const;
  public:
  void clear_var_locale();
  const std::string& var_locale() const;
  void set_var_locale(const std::string& value);
  void set_var_locale(std::string&& value);
  void set_var_locale(const char* value);
  void set_var_locale(const char* value, size_t size);
  std::string* mutable_var_locale();
  std::string* release_var_locale();
  void set_allocated_var_locale(std::string* var_locale);
  private:
  const std::string& _internal_var_locale() const;
  void _internal_set_var_locale(const std::string& value);
  std::string* _internal_mutable_var_locale();
  public:

  // optional string var_name = 5;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const char* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional int64 var_index = 3;
  bool has_var_index() const;
  private:
  bool _internal_has_var_index() const;
  public:
  void clear_var_index();
  ::PROTOBUF_NAMESPACE_ID::int64 var_index() const;
  void set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_var_index() const;
  void _internal_set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:LOGIN_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_locale_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 var_index_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class CREATE_ROOM_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CREATE_ROOM_RES) */ {
 public:
  CREATE_ROOM_RES();
  virtual ~CREATE_ROOM_RES();

  CREATE_ROOM_RES(const CREATE_ROOM_RES& from);
  CREATE_ROOM_RES(CREATE_ROOM_RES&& from) noexcept
    : CREATE_ROOM_RES() {
    *this = ::std::move(from);
  }

  inline CREATE_ROOM_RES& operator=(const CREATE_ROOM_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline CREATE_ROOM_RES& operator=(CREATE_ROOM_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CREATE_ROOM_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CREATE_ROOM_RES* internal_default_instance() {
    return reinterpret_cast<const CREATE_ROOM_RES*>(
               &_CREATE_ROOM_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CREATE_ROOM_RES& a, CREATE_ROOM_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(CREATE_ROOM_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CREATE_ROOM_RES* New() const final {
    return CreateMaybeMessage<CREATE_ROOM_RES>(nullptr);
  }

  CREATE_ROOM_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CREATE_ROOM_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CREATE_ROOM_RES& from);
  void MergeFrom(const CREATE_ROOM_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CREATE_ROOM_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CREATE_ROOM_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 2,
    kVarRoomIdFieldNumber = 3,
    kVarCodeFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // optional string var_name = 2;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const char* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional int32 var_room_id = 3;
  bool has_var_room_id() const;
  private:
  bool _internal_has_var_room_id() const;
  public:
  void clear_var_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_id() const;
  void set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_id() const;
  void _internal_set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .ErrorCode var_code = 4;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:CREATE_ROOM_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_id_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class ENTER_ROOM_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ENTER_ROOM_RES) */ {
 public:
  ENTER_ROOM_RES();
  virtual ~ENTER_ROOM_RES();

  ENTER_ROOM_RES(const ENTER_ROOM_RES& from);
  ENTER_ROOM_RES(ENTER_ROOM_RES&& from) noexcept
    : ENTER_ROOM_RES() {
    *this = ::std::move(from);
  }

  inline ENTER_ROOM_RES& operator=(const ENTER_ROOM_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENTER_ROOM_RES& operator=(ENTER_ROOM_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENTER_ROOM_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ENTER_ROOM_RES* internal_default_instance() {
    return reinterpret_cast<const ENTER_ROOM_RES*>(
               &_ENTER_ROOM_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ENTER_ROOM_RES& a, ENTER_ROOM_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(ENTER_ROOM_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENTER_ROOM_RES* New() const final {
    return CreateMaybeMessage<ENTER_ROOM_RES>(nullptr);
  }

  ENTER_ROOM_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENTER_ROOM_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENTER_ROOM_RES& from);
  void MergeFrom(const ENTER_ROOM_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENTER_ROOM_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ENTER_ROOM_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessagesFieldNumber = 5,
    kVarNameFieldNumber = 2,
    kVarRoomIdFieldNumber = 3,
    kVarCodeFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // repeated .RoomMessage var_messages = 5;
  int var_messages_size() const;
  private:
  int _internal_var_messages_size() const;
  public:
  void clear_var_messages();
  ::RoomMessage* mutable_var_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomMessage >*
      mutable_var_messages();
  private:
  const ::RoomMessage& _internal_var_messages(int index) const;
  ::RoomMessage* _internal_add_var_messages();
  public:
  const ::RoomMessage& var_messages(int index) const;
  ::RoomMessage* add_var_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomMessage >&
      var_messages() const;

  // optional string var_name = 2;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const char* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional int32 var_room_id = 3;
  bool has_var_room_id() const;
  private:
  bool _internal_has_var_room_id() const;
  public:
  void clear_var_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_id() const;
  void set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_id() const;
  void _internal_set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .ErrorCode var_code = 4;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:ENTER_ROOM_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomMessage > var_messages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_id_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class NEW_USER_IN_ROOM_NTY :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NEW_USER_IN_ROOM_NTY) */ {
 public:
  NEW_USER_IN_ROOM_NTY();
  virtual ~NEW_USER_IN_ROOM_NTY();

  NEW_USER_IN_ROOM_NTY(const NEW_USER_IN_ROOM_NTY& from);
  NEW_USER_IN_ROOM_NTY(NEW_USER_IN_ROOM_NTY&& from) noexcept
    : NEW_USER_IN_ROOM_NTY() {
    *this = ::std::move(from);
  }

  inline NEW_USER_IN_ROOM_NTY& operator=(const NEW_USER_IN_ROOM_NTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline NEW_USER_IN_ROOM_NTY& operator=(NEW_USER_IN_ROOM_NTY&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NEW_USER_IN_ROOM_NTY& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NEW_USER_IN_ROOM_NTY* internal_default_instance() {
    return reinterpret_cast<const NEW_USER_IN_ROOM_NTY*>(
               &_NEW_USER_IN_ROOM_NTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NEW_USER_IN_ROOM_NTY& a, NEW_USER_IN_ROOM_NTY& b) {
    a.Swap(&b);
  }
  inline void Swap(NEW_USER_IN_ROOM_NTY* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NEW_USER_IN_ROOM_NTY* New() const final {
    return CreateMaybeMessage<NEW_USER_IN_ROOM_NTY>(nullptr);
  }

  NEW_USER_IN_ROOM_NTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NEW_USER_IN_ROOM_NTY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NEW_USER_IN_ROOM_NTY& from);
  void MergeFrom(const NEW_USER_IN_ROOM_NTY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NEW_USER_IN_ROOM_NTY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NEW_USER_IN_ROOM_NTY";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarRoomUserFieldNumber = 2,
    kVarCodeFieldNumber = 3,
    kVarTypeFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // optional .RoomUserInfo var_room_user = 2;
  bool has_var_room_user() const;
  private:
  bool _internal_has_var_room_user() const;
  public:
  void clear_var_room_user();
  const ::RoomUserInfo& var_room_user() const;
  ::RoomUserInfo* release_var_room_user();
  ::RoomUserInfo* mutable_var_room_user();
  void set_allocated_var_room_user(::RoomUserInfo* var_room_user);
  private:
  const ::RoomUserInfo& _internal_var_room_user() const;
  ::RoomUserInfo* _internal_mutable_var_room_user();
  public:

  // optional .ErrorCode var_code = 3;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional int32 var_type = 4;
  bool has_var_type() const;
  private:
  bool _internal_has_var_type() const;
  public:
  void clear_var_type();
  ::PROTOBUF_NAMESPACE_ID::int32 var_type() const;
  void set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_type() const;
  void _internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_NEW_USER_IN_ROOM_NTY];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:NEW_USER_IN_ROOM_NTY)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::RoomUserInfo* var_room_user_;
  int var_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_type_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class LEAVE_ROOM_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LEAVE_ROOM_RES) */ {
 public:
  LEAVE_ROOM_RES();
  virtual ~LEAVE_ROOM_RES();

  LEAVE_ROOM_RES(const LEAVE_ROOM_RES& from);
  LEAVE_ROOM_RES(LEAVE_ROOM_RES&& from) noexcept
    : LEAVE_ROOM_RES() {
    *this = ::std::move(from);
  }

  inline LEAVE_ROOM_RES& operator=(const LEAVE_ROOM_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline LEAVE_ROOM_RES& operator=(LEAVE_ROOM_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LEAVE_ROOM_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LEAVE_ROOM_RES* internal_default_instance() {
    return reinterpret_cast<const LEAVE_ROOM_RES*>(
               &_LEAVE_ROOM_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LEAVE_ROOM_RES& a, LEAVE_ROOM_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(LEAVE_ROOM_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LEAVE_ROOM_RES* New() const final {
    return CreateMaybeMessage<LEAVE_ROOM_RES>(nullptr);
  }

  LEAVE_ROOM_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LEAVE_ROOM_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LEAVE_ROOM_RES& from);
  void MergeFrom(const LEAVE_ROOM_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LEAVE_ROOM_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LEAVE_ROOM_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 2,
    kVarIndexFieldNumber = 4,
    kVarCodeFieldNumber = 3,
    kVarRoomNumberFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // optional string var_name = 2;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const char* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional int64 var_index = 4;
  bool has_var_index() const;
  private:
  bool _internal_has_var_index() const;
  public:
  void clear_var_index();
  ::PROTOBUF_NAMESPACE_ID::int64 var_index() const;
  void set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_var_index() const;
  void _internal_set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .ErrorCode var_code = 3;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional int32 var_room_number = 5;
  bool has_var_room_number() const;
  private:
  bool _internal_has_var_room_number() const;
  public:
  void clear_var_room_number();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number() const;
  void set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_number() const;
  void _internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:LEAVE_ROOM_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 var_index_;
  int var_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class ROOM_LIST_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ROOM_LIST_RES) */ {
 public:
  ROOM_LIST_RES();
  virtual ~ROOM_LIST_RES();

  ROOM_LIST_RES(const ROOM_LIST_RES& from);
  ROOM_LIST_RES(ROOM_LIST_RES&& from) noexcept
    : ROOM_LIST_RES() {
    *this = ::std::move(from);
  }

  inline ROOM_LIST_RES& operator=(const ROOM_LIST_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROOM_LIST_RES& operator=(ROOM_LIST_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROOM_LIST_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROOM_LIST_RES* internal_default_instance() {
    return reinterpret_cast<const ROOM_LIST_RES*>(
               &_ROOM_LIST_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ROOM_LIST_RES& a, ROOM_LIST_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(ROOM_LIST_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROOM_LIST_RES* New() const final {
    return CreateMaybeMessage<ROOM_LIST_RES>(nullptr);
  }

  ROOM_LIST_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROOM_LIST_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROOM_LIST_RES& from);
  void MergeFrom(const ROOM_LIST_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROOM_LIST_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ROOM_LIST_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarRoomListFieldNumber = 3,
    kVarCodeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .RoomInfo2 var_room_list = 3;
  int var_room_list_size() const;
  private:
  int _internal_var_room_list_size() const;
  public:
  void clear_var_room_list();
  ::RoomInfo2* mutable_var_room_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomInfo2 >*
      mutable_var_room_list();
  private:
  const ::RoomInfo2& _internal_var_room_list(int index) const;
  ::RoomInfo2* _internal_add_var_room_list();
  public:
  const ::RoomInfo2& var_room_list(int index) const;
  ::RoomInfo2* add_var_room_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomInfo2 >&
      var_room_list() const;

  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:ROOM_LIST_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomInfo2 > var_room_list_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class ROOM_PASS_THROUGH_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ROOM_PASS_THROUGH_RES) */ {
 public:
  ROOM_PASS_THROUGH_RES();
  virtual ~ROOM_PASS_THROUGH_RES();

  ROOM_PASS_THROUGH_RES(const ROOM_PASS_THROUGH_RES& from);
  ROOM_PASS_THROUGH_RES(ROOM_PASS_THROUGH_RES&& from) noexcept
    : ROOM_PASS_THROUGH_RES() {
    *this = ::std::move(from);
  }

  inline ROOM_PASS_THROUGH_RES& operator=(const ROOM_PASS_THROUGH_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROOM_PASS_THROUGH_RES& operator=(ROOM_PASS_THROUGH_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROOM_PASS_THROUGH_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROOM_PASS_THROUGH_RES* internal_default_instance() {
    return reinterpret_cast<const ROOM_PASS_THROUGH_RES*>(
               &_ROOM_PASS_THROUGH_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ROOM_PASS_THROUGH_RES& a, ROOM_PASS_THROUGH_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(ROOM_PASS_THROUGH_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROOM_PASS_THROUGH_RES* New() const final {
    return CreateMaybeMessage<ROOM_PASS_THROUGH_RES>(nullptr);
  }

  ROOM_PASS_THROUGH_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROOM_PASS_THROUGH_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROOM_PASS_THROUGH_RES& from);
  void MergeFrom(const ROOM_PASS_THROUGH_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROOM_PASS_THROUGH_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ROOM_PASS_THROUGH_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessagesFieldNumber = 3,
    kVarCodeFieldNumber = 2,
    kVarRoomNumberFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // repeated .RoomMessage var_messages = 3;
  int var_messages_size() const;
  private:
  int _internal_var_messages_size() const;
  public:
  void clear_var_messages();
  ::RoomMessage* mutable_var_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomMessage >*
      mutable_var_messages();
  private:
  const ::RoomMessage& _internal_var_messages(int index) const;
  ::RoomMessage* _internal_add_var_messages();
  public:
  const ::RoomMessage& var_messages(int index) const;
  ::RoomMessage* add_var_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomMessage >&
      var_messages() const;

  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional int32 var_room_number = 4;
  bool has_var_room_number() const;
  private:
  bool _internal_has_var_room_number() const;
  public:
  void clear_var_room_number();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number() const;
  void set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_number() const;
  void _internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:ROOM_PASS_THROUGH_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomMessage > var_messages_;
  int var_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class NOTICE_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NOTICE_RES) */ {
 public:
  NOTICE_RES();
  virtual ~NOTICE_RES();

  NOTICE_RES(const NOTICE_RES& from);
  NOTICE_RES(NOTICE_RES&& from) noexcept
    : NOTICE_RES() {
    *this = ::std::move(from);
  }

  inline NOTICE_RES& operator=(const NOTICE_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline NOTICE_RES& operator=(NOTICE_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NOTICE_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NOTICE_RES* internal_default_instance() {
    return reinterpret_cast<const NOTICE_RES*>(
               &_NOTICE_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NOTICE_RES& a, NOTICE_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(NOTICE_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NOTICE_RES* New() const final {
    return CreateMaybeMessage<NOTICE_RES>(nullptr);
  }

  NOTICE_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NOTICE_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NOTICE_RES& from);
  void MergeFrom(const NOTICE_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NOTICE_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NOTICE_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarListFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .NotifyInfo var_list = 2;
  int var_list_size() const;
  private:
  int _internal_var_list_size() const;
  public:
  void clear_var_list();
  ::NotifyInfo* mutable_var_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NotifyInfo >*
      mutable_var_list();
  private:
  const ::NotifyInfo& _internal_var_list(int index) const;
  ::NotifyInfo* _internal_add_var_list();
  public:
  const ::NotifyInfo& var_list(int index) const;
  ::NotifyInfo* add_var_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NotifyInfo >&
      var_list() const;

  // optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:NOTICE_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NotifyInfo > var_list_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class BITMAP_MESSAGE_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BITMAP_MESSAGE_RES) */ {
 public:
  BITMAP_MESSAGE_RES();
  virtual ~BITMAP_MESSAGE_RES();

  BITMAP_MESSAGE_RES(const BITMAP_MESSAGE_RES& from);
  BITMAP_MESSAGE_RES(BITMAP_MESSAGE_RES&& from) noexcept
    : BITMAP_MESSAGE_RES() {
    *this = ::std::move(from);
  }

  inline BITMAP_MESSAGE_RES& operator=(const BITMAP_MESSAGE_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline BITMAP_MESSAGE_RES& operator=(BITMAP_MESSAGE_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BITMAP_MESSAGE_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BITMAP_MESSAGE_RES* internal_default_instance() {
    return reinterpret_cast<const BITMAP_MESSAGE_RES*>(
               &_BITMAP_MESSAGE_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BITMAP_MESSAGE_RES& a, BITMAP_MESSAGE_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(BITMAP_MESSAGE_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BITMAP_MESSAGE_RES* New() const final {
    return CreateMaybeMessage<BITMAP_MESSAGE_RES>(nullptr);
  }

  BITMAP_MESSAGE_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BITMAP_MESSAGE_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BITMAP_MESSAGE_RES& from);
  void MergeFrom(const BITMAP_MESSAGE_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BITMAP_MESSAGE_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BITMAP_MESSAGE_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 3,
    kVarNameFieldNumber = 4,
    kVarCodeFieldNumber = 2,
    kVarPosFieldNumber = 5,
    kVarTypeFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // repeated bytes var_message = 3;
  int var_message_size() const;
  private:
  int _internal_var_message_size() const;
  public:
  void clear_var_message();
  const std::string& var_message(int index) const;
  std::string* mutable_var_message(int index);
  void set_var_message(int index, const std::string& value);
  void set_var_message(int index, std::string&& value);
  void set_var_message(int index, const char* value);
  void set_var_message(int index, const void* value, size_t size);
  std::string* add_var_message();
  void add_var_message(const std::string& value);
  void add_var_message(std::string&& value);
  void add_var_message(const char* value);
  void add_var_message(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& var_message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_var_message();
  private:
  const std::string& _internal_var_message(int index) const;
  std::string* _internal_add_var_message();
  public:

  // optional bytes var_name = 4;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const void* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional int32 var_pos = 5;
  bool has_var_pos() const;
  private:
  bool _internal_has_var_pos() const;
  public:
  void clear_var_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 var_pos() const;
  void set_var_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_pos() const;
  void _internal_set_var_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 var_type = 6;
  bool has_var_type() const;
  private:
  bool _internal_has_var_type() const;
  public:
  void clear_var_type();
  ::PROTOBUF_NAMESPACE_ID::int32 var_type() const;
  void set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_type() const;
  void _internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:BITMAP_MESSAGE_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> var_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  int var_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_type_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class AUDIO_MESSAGE_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUDIO_MESSAGE_RES) */ {
 public:
  AUDIO_MESSAGE_RES();
  virtual ~AUDIO_MESSAGE_RES();

  AUDIO_MESSAGE_RES(const AUDIO_MESSAGE_RES& from);
  AUDIO_MESSAGE_RES(AUDIO_MESSAGE_RES&& from) noexcept
    : AUDIO_MESSAGE_RES() {
    *this = ::std::move(from);
  }

  inline AUDIO_MESSAGE_RES& operator=(const AUDIO_MESSAGE_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUDIO_MESSAGE_RES& operator=(AUDIO_MESSAGE_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AUDIO_MESSAGE_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AUDIO_MESSAGE_RES* internal_default_instance() {
    return reinterpret_cast<const AUDIO_MESSAGE_RES*>(
               &_AUDIO_MESSAGE_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AUDIO_MESSAGE_RES& a, AUDIO_MESSAGE_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(AUDIO_MESSAGE_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AUDIO_MESSAGE_RES* New() const final {
    return CreateMaybeMessage<AUDIO_MESSAGE_RES>(nullptr);
  }

  AUDIO_MESSAGE_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AUDIO_MESSAGE_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AUDIO_MESSAGE_RES& from);
  void MergeFrom(const AUDIO_MESSAGE_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUDIO_MESSAGE_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUDIO_MESSAGE_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 3,
    kVarNameFieldNumber = 4,
    kVarCodeFieldNumber = 2,
    kVarPosFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // repeated bytes var_message = 3;
  int var_message_size() const;
  private:
  int _internal_var_message_size() const;
  public:
  void clear_var_message();
  const std::string& var_message(int index) const;
  std::string* mutable_var_message(int index);
  void set_var_message(int index, const std::string& value);
  void set_var_message(int index, std::string&& value);
  void set_var_message(int index, const char* value);
  void set_var_message(int index, const void* value, size_t size);
  std::string* add_var_message();
  void add_var_message(const std::string& value);
  void add_var_message(std::string&& value);
  void add_var_message(const char* value);
  void add_var_message(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& var_message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_var_message();
  private:
  const std::string& _internal_var_message(int index) const;
  std::string* _internal_add_var_message();
  public:

  // optional bytes var_name = 4;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const void* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional int32 var_pos = 5;
  bool has_var_pos() const;
  private:
  bool _internal_has_var_pos() const;
  public:
  void clear_var_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 var_pos() const;
  void set_var_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_pos() const;
  void _internal_set_var_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:AUDIO_MESSAGE_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> var_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  int var_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_pos_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class PRAY_MESSAGE_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRAY_MESSAGE_RES) */ {
 public:
  PRAY_MESSAGE_RES();
  virtual ~PRAY_MESSAGE_RES();

  PRAY_MESSAGE_RES(const PRAY_MESSAGE_RES& from);
  PRAY_MESSAGE_RES(PRAY_MESSAGE_RES&& from) noexcept
    : PRAY_MESSAGE_RES() {
    *this = ::std::move(from);
  }

  inline PRAY_MESSAGE_RES& operator=(const PRAY_MESSAGE_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PRAY_MESSAGE_RES& operator=(PRAY_MESSAGE_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PRAY_MESSAGE_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PRAY_MESSAGE_RES* internal_default_instance() {
    return reinterpret_cast<const PRAY_MESSAGE_RES*>(
               &_PRAY_MESSAGE_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PRAY_MESSAGE_RES& a, PRAY_MESSAGE_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PRAY_MESSAGE_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PRAY_MESSAGE_RES* New() const final {
    return CreateMaybeMessage<PRAY_MESSAGE_RES>(nullptr);
  }

  PRAY_MESSAGE_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PRAY_MESSAGE_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PRAY_MESSAGE_RES& from);
  void MergeFrom(const PRAY_MESSAGE_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PRAY_MESSAGE_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRAY_MESSAGE_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarListFieldNumber = 3,
    kVarCodeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .PrayInfo var_list = 3;
  int var_list_size() const;
  private:
  int _internal_var_list_size() const;
  public:
  void clear_var_list();
  ::PrayInfo* mutable_var_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrayInfo >*
      mutable_var_list();
  private:
  const ::PrayInfo& _internal_var_list(int index) const;
  ::PrayInfo* _internal_add_var_list();
  public:
  const ::PrayInfo& var_list(int index) const;
  ::PrayInfo* add_var_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrayInfo >&
      var_list() const;

  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:PRAY_MESSAGE_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrayInfo > var_list_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class PRAY_MESSAGE_REG_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRAY_MESSAGE_REG_RES) */ {
 public:
  PRAY_MESSAGE_REG_RES();
  virtual ~PRAY_MESSAGE_REG_RES();

  PRAY_MESSAGE_REG_RES(const PRAY_MESSAGE_REG_RES& from);
  PRAY_MESSAGE_REG_RES(PRAY_MESSAGE_REG_RES&& from) noexcept
    : PRAY_MESSAGE_REG_RES() {
    *this = ::std::move(from);
  }

  inline PRAY_MESSAGE_REG_RES& operator=(const PRAY_MESSAGE_REG_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline PRAY_MESSAGE_REG_RES& operator=(PRAY_MESSAGE_REG_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PRAY_MESSAGE_REG_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PRAY_MESSAGE_REG_RES* internal_default_instance() {
    return reinterpret_cast<const PRAY_MESSAGE_REG_RES*>(
               &_PRAY_MESSAGE_REG_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PRAY_MESSAGE_REG_RES& a, PRAY_MESSAGE_REG_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(PRAY_MESSAGE_REG_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PRAY_MESSAGE_REG_RES* New() const final {
    return CreateMaybeMessage<PRAY_MESSAGE_REG_RES>(nullptr);
  }

  PRAY_MESSAGE_REG_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PRAY_MESSAGE_REG_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PRAY_MESSAGE_REG_RES& from);
  void MergeFrom(const PRAY_MESSAGE_REG_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PRAY_MESSAGE_REG_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRAY_MESSAGE_REG_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 3,
    kVarTimeFieldNumber = 4,
    kVarCodeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string var_message = 3;
  bool has_var_message() const;
  private:
  bool _internal_has_var_message() const;
  public:
  void clear_var_message();
  const std::string& var_message() const;
  void set_var_message(const std::string& value);
  void set_var_message(std::string&& value);
  void set_var_message(const char* value);
  void set_var_message(const char* value, size_t size);
  std::string* mutable_var_message();
  std::string* release_var_message();
  void set_allocated_var_message(std::string* var_message);
  private:
  const std::string& _internal_var_message() const;
  void _internal_set_var_message(const std::string& value);
  std::string* _internal_mutable_var_message();
  public:

  // optional string var_time = 4;
  bool has_var_time() const;
  private:
  bool _internal_has_var_time() const;
  public:
  void clear_var_time();
  const std::string& var_time() const;
  void set_var_time(const std::string& value);
  void set_var_time(std::string&& value);
  void set_var_time(const char* value);
  void set_var_time(const char* value, size_t size);
  std::string* mutable_var_time();
  std::string* release_var_time();
  void set_allocated_var_time(std::string* var_time);
  private:
  const std::string& _internal_var_time() const;
  void _internal_set_var_time(const std::string& value);
  std::string* _internal_mutable_var_time();
  public:

  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REG_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:PRAY_MESSAGE_REG_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_time_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class QNA_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QNA_RES) */ {
 public:
  QNA_RES();
  virtual ~QNA_RES();

  QNA_RES(const QNA_RES& from);
  QNA_RES(QNA_RES&& from) noexcept
    : QNA_RES() {
    *this = ::std::move(from);
  }

  inline QNA_RES& operator=(const QNA_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline QNA_RES& operator=(QNA_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QNA_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QNA_RES* internal_default_instance() {
    return reinterpret_cast<const QNA_RES*>(
               &_QNA_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QNA_RES& a, QNA_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(QNA_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QNA_RES* New() const final {
    return CreateMaybeMessage<QNA_RES>(nullptr);
  }

  QNA_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QNA_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QNA_RES& from);
  void MergeFrom(const QNA_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QNA_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QNA_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarCodeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_QNA_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:QNA_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class MAIL_LIST_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MAIL_LIST_RES) */ {
 public:
  MAIL_LIST_RES();
  virtual ~MAIL_LIST_RES();

  MAIL_LIST_RES(const MAIL_LIST_RES& from);
  MAIL_LIST_RES(MAIL_LIST_RES&& from) noexcept
    : MAIL_LIST_RES() {
    *this = ::std::move(from);
  }

  inline MAIL_LIST_RES& operator=(const MAIL_LIST_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MAIL_LIST_RES& operator=(MAIL_LIST_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MAIL_LIST_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MAIL_LIST_RES* internal_default_instance() {
    return reinterpret_cast<const MAIL_LIST_RES*>(
               &_MAIL_LIST_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MAIL_LIST_RES& a, MAIL_LIST_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MAIL_LIST_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MAIL_LIST_RES* New() const final {
    return CreateMaybeMessage<MAIL_LIST_RES>(nullptr);
  }

  MAIL_LIST_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MAIL_LIST_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MAIL_LIST_RES& from);
  void MergeFrom(const MAIL_LIST_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MAIL_LIST_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MAIL_LIST_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarListFieldNumber = 3,
    kVarCodeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .MailInfo var_list = 3;
  int var_list_size() const;
  private:
  int _internal_var_list_size() const;
  public:
  void clear_var_list();
  ::MailInfo* mutable_var_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailInfo >*
      mutable_var_list();
  private:
  const ::MailInfo& _internal_var_list(int index) const;
  ::MailInfo* _internal_add_var_list();
  public:
  const ::MailInfo& var_list(int index) const;
  ::MailInfo* add_var_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailInfo >&
      var_list() const;

  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_MAIL_LIST_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:MAIL_LIST_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailInfo > var_list_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class REG_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:REG_RES) */ {
 public:
  REG_RES();
  virtual ~REG_RES();

  REG_RES(const REG_RES& from);
  REG_RES(REG_RES&& from) noexcept
    : REG_RES() {
    *this = ::std::move(from);
  }

  inline REG_RES& operator=(const REG_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline REG_RES& operator=(REG_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const REG_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const REG_RES* internal_default_instance() {
    return reinterpret_cast<const REG_RES*>(
               &_REG_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(REG_RES& a, REG_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(REG_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline REG_RES* New() const final {
    return CreateMaybeMessage<REG_RES>(nullptr);
  }

  REG_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<REG_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const REG_RES& from);
  void MergeFrom(const REG_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(REG_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "REG_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarCodeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_REG_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:REG_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class CLIENT_LOGOUT_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLIENT_LOGOUT_RES) */ {
 public:
  CLIENT_LOGOUT_RES();
  virtual ~CLIENT_LOGOUT_RES();

  CLIENT_LOGOUT_RES(const CLIENT_LOGOUT_RES& from);
  CLIENT_LOGOUT_RES(CLIENT_LOGOUT_RES&& from) noexcept
    : CLIENT_LOGOUT_RES() {
    *this = ::std::move(from);
  }

  inline CLIENT_LOGOUT_RES& operator=(const CLIENT_LOGOUT_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLIENT_LOGOUT_RES& operator=(CLIENT_LOGOUT_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLIENT_LOGOUT_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLIENT_LOGOUT_RES* internal_default_instance() {
    return reinterpret_cast<const CLIENT_LOGOUT_RES*>(
               &_CLIENT_LOGOUT_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CLIENT_LOGOUT_RES& a, CLIENT_LOGOUT_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(CLIENT_LOGOUT_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLIENT_LOGOUT_RES* New() const final {
    return CreateMaybeMessage<CLIENT_LOGOUT_RES>(nullptr);
  }

  CLIENT_LOGOUT_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLIENT_LOGOUT_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLIENT_LOGOUT_RES& from);
  void MergeFrom(const CLIENT_LOGOUT_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLIENT_LOGOUT_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLIENT_LOGOUT_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarCodeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_LOGOUT_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:CLIENT_LOGOUT_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class CLIENT_KICK :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLIENT_KICK) */ {
 public:
  CLIENT_KICK();
  virtual ~CLIENT_KICK();

  CLIENT_KICK(const CLIENT_KICK& from);
  CLIENT_KICK(CLIENT_KICK&& from) noexcept
    : CLIENT_KICK() {
    *this = ::std::move(from);
  }

  inline CLIENT_KICK& operator=(const CLIENT_KICK& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLIENT_KICK& operator=(CLIENT_KICK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLIENT_KICK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLIENT_KICK* internal_default_instance() {
    return reinterpret_cast<const CLIENT_KICK*>(
               &_CLIENT_KICK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CLIENT_KICK& a, CLIENT_KICK& b) {
    a.Swap(&b);
  }
  inline void Swap(CLIENT_KICK* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLIENT_KICK* New() const final {
    return CreateMaybeMessage<CLIENT_KICK>(nullptr);
  }

  CLIENT_KICK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLIENT_KICK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLIENT_KICK& from);
  void MergeFrom(const CLIENT_KICK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLIENT_KICK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLIENT_KICK";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSidFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional int32 sid = 2;
  bool has_sid() const;
  private:
  bool _internal_has_sid() const;
  public:
  void clear_sid();
  ::PROTOBUF_NAMESPACE_ID::int32 sid() const;
  void set_sid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sid() const;
  void _internal_set_sid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_KICK];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:CLIENT_KICK)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 sid_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class CAMERA_CONTROL_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAMERA_CONTROL_RES) */ {
 public:
  CAMERA_CONTROL_RES();
  virtual ~CAMERA_CONTROL_RES();

  CAMERA_CONTROL_RES(const CAMERA_CONTROL_RES& from);
  CAMERA_CONTROL_RES(CAMERA_CONTROL_RES&& from) noexcept
    : CAMERA_CONTROL_RES() {
    *this = ::std::move(from);
  }

  inline CAMERA_CONTROL_RES& operator=(const CAMERA_CONTROL_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAMERA_CONTROL_RES& operator=(CAMERA_CONTROL_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CAMERA_CONTROL_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAMERA_CONTROL_RES* internal_default_instance() {
    return reinterpret_cast<const CAMERA_CONTROL_RES*>(
               &_CAMERA_CONTROL_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CAMERA_CONTROL_RES& a, CAMERA_CONTROL_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(CAMERA_CONTROL_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAMERA_CONTROL_RES* New() const final {
    return CreateMaybeMessage<CAMERA_CONTROL_RES>(nullptr);
  }

  CAMERA_CONTROL_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAMERA_CONTROL_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAMERA_CONTROL_RES& from);
  void MergeFrom(const CAMERA_CONTROL_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAMERA_CONTROL_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAMERA_CONTROL_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarCodeFieldNumber = 2,
    kVarTypeFieldNumber = 3,
    kVarPosFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .CameraControlType var_type = 3;
  bool has_var_type() const;
  private:
  bool _internal_has_var_type() const;
  public:
  void clear_var_type();
  ::CameraControlType var_type() const;
  void set_var_type(::CameraControlType value);
  private:
  ::CameraControlType _internal_var_type() const;
  void _internal_set_var_type(::CameraControlType value);
  public:

  // optional int32 var_pos = 4;
  bool has_var_pos() const;
  private:
  bool _internal_has_var_pos() const;
  public:
  void clear_var_pos();
  ::PROTOBUF_NAMESPACE_ID::int32 var_pos() const;
  void set_var_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_pos() const;
  void _internal_set_var_pos(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_CONTROL];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:CAMERA_CONTROL_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int var_code_;
  int var_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_pos_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class MPEG2TS_MESSAGE_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MPEG2TS_MESSAGE_RES) */ {
 public:
  MPEG2TS_MESSAGE_RES();
  virtual ~MPEG2TS_MESSAGE_RES();

  MPEG2TS_MESSAGE_RES(const MPEG2TS_MESSAGE_RES& from);
  MPEG2TS_MESSAGE_RES(MPEG2TS_MESSAGE_RES&& from) noexcept
    : MPEG2TS_MESSAGE_RES() {
    *this = ::std::move(from);
  }

  inline MPEG2TS_MESSAGE_RES& operator=(const MPEG2TS_MESSAGE_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPEG2TS_MESSAGE_RES& operator=(MPEG2TS_MESSAGE_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MPEG2TS_MESSAGE_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MPEG2TS_MESSAGE_RES* internal_default_instance() {
    return reinterpret_cast<const MPEG2TS_MESSAGE_RES*>(
               &_MPEG2TS_MESSAGE_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MPEG2TS_MESSAGE_RES& a, MPEG2TS_MESSAGE_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MPEG2TS_MESSAGE_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MPEG2TS_MESSAGE_RES* New() const final {
    return CreateMaybeMessage<MPEG2TS_MESSAGE_RES>(nullptr);
  }

  MPEG2TS_MESSAGE_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MPEG2TS_MESSAGE_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MPEG2TS_MESSAGE_RES& from);
  void MergeFrom(const MPEG2TS_MESSAGE_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MPEG2TS_MESSAGE_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MPEG2TS_MESSAGE_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 3,
    kVarCodeFieldNumber = 2,
    kVarTypeFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // repeated bytes var_message = 3;
  int var_message_size() const;
  private:
  int _internal_var_message_size() const;
  public:
  void clear_var_message();
  const std::string& var_message(int index) const;
  std::string* mutable_var_message(int index);
  void set_var_message(int index, const std::string& value);
  void set_var_message(int index, std::string&& value);
  void set_var_message(int index, const char* value);
  void set_var_message(int index, const void* value, size_t size);
  std::string* add_var_message();
  void add_var_message(const std::string& value);
  void add_var_message(std::string&& value);
  void add_var_message(const char* value);
  void add_var_message(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& var_message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_var_message();
  private:
  const std::string& _internal_var_message(int index) const;
  std::string* _internal_add_var_message();
  public:

  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional int32 var_type = 4;
  bool has_var_type() const;
  private:
  bool _internal_has_var_type() const;
  public:
  void clear_var_type();
  ::PROTOBUF_NAMESPACE_ID::int32 var_type() const;
  void set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_type() const;
  void _internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_MESSAGE_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:MPEG2TS_MESSAGE_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> var_message_;
  int var_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_type_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class MPEG2TS_WAKE_UP_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MPEG2TS_WAKE_UP_RES) */ {
 public:
  MPEG2TS_WAKE_UP_RES();
  virtual ~MPEG2TS_WAKE_UP_RES();

  MPEG2TS_WAKE_UP_RES(const MPEG2TS_WAKE_UP_RES& from);
  MPEG2TS_WAKE_UP_RES(MPEG2TS_WAKE_UP_RES&& from) noexcept
    : MPEG2TS_WAKE_UP_RES() {
    *this = ::std::move(from);
  }

  inline MPEG2TS_WAKE_UP_RES& operator=(const MPEG2TS_WAKE_UP_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPEG2TS_WAKE_UP_RES& operator=(MPEG2TS_WAKE_UP_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MPEG2TS_WAKE_UP_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MPEG2TS_WAKE_UP_RES* internal_default_instance() {
    return reinterpret_cast<const MPEG2TS_WAKE_UP_RES*>(
               &_MPEG2TS_WAKE_UP_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MPEG2TS_WAKE_UP_RES& a, MPEG2TS_WAKE_UP_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MPEG2TS_WAKE_UP_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MPEG2TS_WAKE_UP_RES* New() const final {
    return CreateMaybeMessage<MPEG2TS_WAKE_UP_RES>(nullptr);
  }

  MPEG2TS_WAKE_UP_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MPEG2TS_WAKE_UP_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MPEG2TS_WAKE_UP_RES& from);
  void MergeFrom(const MPEG2TS_WAKE_UP_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MPEG2TS_WAKE_UP_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MPEG2TS_WAKE_UP_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarCodeFieldNumber = 2,
    kVarTypeFieldNumber = 3,
    kVarRoomNumberFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional int32 var_type = 3;
  bool has_var_type() const;
  private:
  bool _internal_has_var_type() const;
  public:
  void clear_var_type();
  ::PROTOBUF_NAMESPACE_ID::int32 var_type() const;
  void set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_type() const;
  void _internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 var_room_number = 4;
  bool has_var_room_number() const;
  private:
  bool _internal_has_var_room_number() const;
  public:
  void clear_var_room_number();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number() const;
  void set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_number() const;
  void _internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_WAKE_UP_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:MPEG2TS_WAKE_UP_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int var_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VERSION_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_RES];
inline bool VERSION_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VERSION_RES::has_id() const {
  return _internal_has_id();
}
inline void VERSION_RES::clear_id() {
  id_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOCOL VERSION_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL VERSION_RES::id() const {
  // @@protoc_insertion_point(field_get:VERSION_RES.id)
  return _internal_id();
}
inline void VERSION_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void VERSION_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:VERSION_RES.id)
}

// optional float var_version = 2;
inline bool VERSION_RES::_internal_has_var_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VERSION_RES::has_var_version() const {
  return _internal_has_var_version();
}
inline void VERSION_RES::clear_var_version() {
  var_version_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float VERSION_RES::_internal_var_version() const {
  return var_version_;
}
inline float VERSION_RES::var_version() const {
  // @@protoc_insertion_point(field_get:VERSION_RES.var_version)
  return _internal_var_version();
}
inline void VERSION_RES::_internal_set_var_version(float value) {
  _has_bits_[0] |= 0x00000001u;
  var_version_ = value;
}
inline void VERSION_RES::set_var_version(float value) {
  _internal_set_var_version(value);
  // @@protoc_insertion_point(field_set:VERSION_RES.var_version)
}

// optional .ErrorCode var_code = 3;
inline bool VERSION_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VERSION_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void VERSION_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ErrorCode VERSION_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode VERSION_RES::var_code() const {
  // @@protoc_insertion_point(field_get:VERSION_RES.var_code)
  return _internal_var_code();
}
inline void VERSION_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  var_code_ = value;
}
inline void VERSION_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:VERSION_RES.var_code)
}

// -------------------------------------------------------------------

// LOGIN_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_RES];
inline bool LOGIN_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LOGIN_RES::has_id() const {
  return _internal_has_id();
}
inline void LOGIN_RES::clear_id() {
  id_ = 3;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOCOL LOGIN_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL LOGIN_RES::id() const {
  // @@protoc_insertion_point(field_get:LOGIN_RES.id)
  return _internal_id();
}
inline void LOGIN_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void LOGIN_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LOGIN_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool LOGIN_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LOGIN_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void LOGIN_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::ErrorCode LOGIN_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode LOGIN_RES::var_code() const {
  // @@protoc_insertion_point(field_get:LOGIN_RES.var_code)
  return _internal_var_code();
}
inline void LOGIN_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  var_code_ = value;
}
inline void LOGIN_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:LOGIN_RES.var_code)
}

// optional int64 var_index = 3;
inline bool LOGIN_RES::_internal_has_var_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LOGIN_RES::has_var_index() const {
  return _internal_has_var_index();
}
inline void LOGIN_RES::clear_var_index() {
  var_index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LOGIN_RES::_internal_var_index() const {
  return var_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LOGIN_RES::var_index() const {
  // @@protoc_insertion_point(field_get:LOGIN_RES.var_index)
  return _internal_var_index();
}
inline void LOGIN_RES::_internal_set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  var_index_ = value;
}
inline void LOGIN_RES::set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_var_index(value);
  // @@protoc_insertion_point(field_set:LOGIN_RES.var_index)
}

// optional string var_locale = 4;
inline bool LOGIN_RES::_internal_has_var_locale() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LOGIN_RES::has_var_locale() const {
  return _internal_has_var_locale();
}
inline void LOGIN_RES::clear_var_locale() {
  var_locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LOGIN_RES::var_locale() const {
  // @@protoc_insertion_point(field_get:LOGIN_RES.var_locale)
  return _internal_var_locale();
}
inline void LOGIN_RES::set_var_locale(const std::string& value) {
  _internal_set_var_locale(value);
  // @@protoc_insertion_point(field_set:LOGIN_RES.var_locale)
}
inline std::string* LOGIN_RES::mutable_var_locale() {
  // @@protoc_insertion_point(field_mutable:LOGIN_RES.var_locale)
  return _internal_mutable_var_locale();
}
inline const std::string& LOGIN_RES::_internal_var_locale() const {
  return var_locale_.GetNoArena();
}
inline void LOGIN_RES::_internal_set_var_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LOGIN_RES::set_var_locale(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_locale_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOGIN_RES.var_locale)
}
inline void LOGIN_RES::set_var_locale(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOGIN_RES.var_locale)
}
inline void LOGIN_RES::set_var_locale(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOGIN_RES.var_locale)
}
inline std::string* LOGIN_RES::_internal_mutable_var_locale() {
  _has_bits_[0] |= 0x00000001u;
  return var_locale_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LOGIN_RES::release_var_locale() {
  // @@protoc_insertion_point(field_release:LOGIN_RES.var_locale)
  if (!_internal_has_var_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_locale_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LOGIN_RES::set_allocated_var_locale(std::string* var_locale) {
  if (var_locale != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_locale_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_locale);
  // @@protoc_insertion_point(field_set_allocated:LOGIN_RES.var_locale)
}

// optional string var_name = 5;
inline bool LOGIN_RES::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LOGIN_RES::has_var_name() const {
  return _internal_has_var_name();
}
inline void LOGIN_RES::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LOGIN_RES::var_name() const {
  // @@protoc_insertion_point(field_get:LOGIN_RES.var_name)
  return _internal_var_name();
}
inline void LOGIN_RES::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:LOGIN_RES.var_name)
}
inline std::string* LOGIN_RES::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:LOGIN_RES.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& LOGIN_RES::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void LOGIN_RES::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LOGIN_RES::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOGIN_RES.var_name)
}
inline void LOGIN_RES::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOGIN_RES.var_name)
}
inline void LOGIN_RES::set_var_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOGIN_RES.var_name)
}
inline std::string* LOGIN_RES::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000002u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LOGIN_RES::release_var_name() {
  // @@protoc_insertion_point(field_release:LOGIN_RES.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LOGIN_RES::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:LOGIN_RES.var_name)
}

// -------------------------------------------------------------------

// CREATE_ROOM_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_RES];
inline bool CREATE_ROOM_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CREATE_ROOM_RES::has_id() const {
  return _internal_has_id();
}
inline void CREATE_ROOM_RES::clear_id() {
  id_ = 5;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOCOL CREATE_ROOM_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL CREATE_ROOM_RES::id() const {
  // @@protoc_insertion_point(field_get:CREATE_ROOM_RES.id)
  return _internal_id();
}
inline void CREATE_ROOM_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void CREATE_ROOM_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CREATE_ROOM_RES.id)
}

// optional string var_name = 2;
inline bool CREATE_ROOM_RES::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CREATE_ROOM_RES::has_var_name() const {
  return _internal_has_var_name();
}
inline void CREATE_ROOM_RES::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CREATE_ROOM_RES::var_name() const {
  // @@protoc_insertion_point(field_get:CREATE_ROOM_RES.var_name)
  return _internal_var_name();
}
inline void CREATE_ROOM_RES::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:CREATE_ROOM_RES.var_name)
}
inline std::string* CREATE_ROOM_RES::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:CREATE_ROOM_RES.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& CREATE_ROOM_RES::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void CREATE_ROOM_RES::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CREATE_ROOM_RES::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CREATE_ROOM_RES.var_name)
}
inline void CREATE_ROOM_RES::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CREATE_ROOM_RES.var_name)
}
inline void CREATE_ROOM_RES::set_var_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CREATE_ROOM_RES.var_name)
}
inline std::string* CREATE_ROOM_RES::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CREATE_ROOM_RES::release_var_name() {
  // @@protoc_insertion_point(field_release:CREATE_ROOM_RES.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CREATE_ROOM_RES::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:CREATE_ROOM_RES.var_name)
}

// optional int32 var_room_id = 3;
inline bool CREATE_ROOM_RES::_internal_has_var_room_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CREATE_ROOM_RES::has_var_room_id() const {
  return _internal_has_var_room_id();
}
inline void CREATE_ROOM_RES::clear_var_room_id() {
  var_room_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CREATE_ROOM_RES::_internal_var_room_id() const {
  return var_room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CREATE_ROOM_RES::var_room_id() const {
  // @@protoc_insertion_point(field_get:CREATE_ROOM_RES.var_room_id)
  return _internal_var_room_id();
}
inline void CREATE_ROOM_RES::_internal_set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  var_room_id_ = value;
}
inline void CREATE_ROOM_RES::set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_id(value);
  // @@protoc_insertion_point(field_set:CREATE_ROOM_RES.var_room_id)
}

// optional .ErrorCode var_code = 4;
inline bool CREATE_ROOM_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CREATE_ROOM_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void CREATE_ROOM_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ErrorCode CREATE_ROOM_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode CREATE_ROOM_RES::var_code() const {
  // @@protoc_insertion_point(field_get:CREATE_ROOM_RES.var_code)
  return _internal_var_code();
}
inline void CREATE_ROOM_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  var_code_ = value;
}
inline void CREATE_ROOM_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:CREATE_ROOM_RES.var_code)
}

// -------------------------------------------------------------------

// ENTER_ROOM_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_RES];
inline bool ENTER_ROOM_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ENTER_ROOM_RES::has_id() const {
  return _internal_has_id();
}
inline void ENTER_ROOM_RES::clear_id() {
  id_ = 7;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOCOL ENTER_ROOM_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL ENTER_ROOM_RES::id() const {
  // @@protoc_insertion_point(field_get:ENTER_ROOM_RES.id)
  return _internal_id();
}
inline void ENTER_ROOM_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void ENTER_ROOM_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ENTER_ROOM_RES.id)
}

// optional string var_name = 2;
inline bool ENTER_ROOM_RES::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ENTER_ROOM_RES::has_var_name() const {
  return _internal_has_var_name();
}
inline void ENTER_ROOM_RES::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ENTER_ROOM_RES::var_name() const {
  // @@protoc_insertion_point(field_get:ENTER_ROOM_RES.var_name)
  return _internal_var_name();
}
inline void ENTER_ROOM_RES::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:ENTER_ROOM_RES.var_name)
}
inline std::string* ENTER_ROOM_RES::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:ENTER_ROOM_RES.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& ENTER_ROOM_RES::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void ENTER_ROOM_RES::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ENTER_ROOM_RES::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ENTER_ROOM_RES.var_name)
}
inline void ENTER_ROOM_RES::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ENTER_ROOM_RES.var_name)
}
inline void ENTER_ROOM_RES::set_var_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ENTER_ROOM_RES.var_name)
}
inline std::string* ENTER_ROOM_RES::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ENTER_ROOM_RES::release_var_name() {
  // @@protoc_insertion_point(field_release:ENTER_ROOM_RES.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ENTER_ROOM_RES::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:ENTER_ROOM_RES.var_name)
}

// optional int32 var_room_id = 3;
inline bool ENTER_ROOM_RES::_internal_has_var_room_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ENTER_ROOM_RES::has_var_room_id() const {
  return _internal_has_var_room_id();
}
inline void ENTER_ROOM_RES::clear_var_room_id() {
  var_room_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ENTER_ROOM_RES::_internal_var_room_id() const {
  return var_room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ENTER_ROOM_RES::var_room_id() const {
  // @@protoc_insertion_point(field_get:ENTER_ROOM_RES.var_room_id)
  return _internal_var_room_id();
}
inline void ENTER_ROOM_RES::_internal_set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  var_room_id_ = value;
}
inline void ENTER_ROOM_RES::set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_id(value);
  // @@protoc_insertion_point(field_set:ENTER_ROOM_RES.var_room_id)
}

// optional .ErrorCode var_code = 4;
inline bool ENTER_ROOM_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ENTER_ROOM_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void ENTER_ROOM_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ErrorCode ENTER_ROOM_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode ENTER_ROOM_RES::var_code() const {
  // @@protoc_insertion_point(field_get:ENTER_ROOM_RES.var_code)
  return _internal_var_code();
}
inline void ENTER_ROOM_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  var_code_ = value;
}
inline void ENTER_ROOM_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:ENTER_ROOM_RES.var_code)
}

// repeated .RoomMessage var_messages = 5;
inline int ENTER_ROOM_RES::_internal_var_messages_size() const {
  return var_messages_.size();
}
inline int ENTER_ROOM_RES::var_messages_size() const {
  return _internal_var_messages_size();
}
inline ::RoomMessage* ENTER_ROOM_RES::mutable_var_messages(int index) {
  // @@protoc_insertion_point(field_mutable:ENTER_ROOM_RES.var_messages)
  return var_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomMessage >*
ENTER_ROOM_RES::mutable_var_messages() {
  // @@protoc_insertion_point(field_mutable_list:ENTER_ROOM_RES.var_messages)
  return &var_messages_;
}
inline const ::RoomMessage& ENTER_ROOM_RES::_internal_var_messages(int index) const {
  return var_messages_.Get(index);
}
inline const ::RoomMessage& ENTER_ROOM_RES::var_messages(int index) const {
  // @@protoc_insertion_point(field_get:ENTER_ROOM_RES.var_messages)
  return _internal_var_messages(index);
}
inline ::RoomMessage* ENTER_ROOM_RES::_internal_add_var_messages() {
  return var_messages_.Add();
}
inline ::RoomMessage* ENTER_ROOM_RES::add_var_messages() {
  // @@protoc_insertion_point(field_add:ENTER_ROOM_RES.var_messages)
  return _internal_add_var_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomMessage >&
ENTER_ROOM_RES::var_messages() const {
  // @@protoc_insertion_point(field_list:ENTER_ROOM_RES.var_messages)
  return var_messages_;
}

// -------------------------------------------------------------------

// NEW_USER_IN_ROOM_NTY

// optional .PROTOCOL id = 1 [default = ID_PKT_NEW_USER_IN_ROOM_NTY];
inline bool NEW_USER_IN_ROOM_NTY::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NEW_USER_IN_ROOM_NTY::has_id() const {
  return _internal_has_id();
}
inline void NEW_USER_IN_ROOM_NTY::clear_id() {
  id_ = 12;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOCOL NEW_USER_IN_ROOM_NTY::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL NEW_USER_IN_ROOM_NTY::id() const {
  // @@protoc_insertion_point(field_get:NEW_USER_IN_ROOM_NTY.id)
  return _internal_id();
}
inline void NEW_USER_IN_ROOM_NTY::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void NEW_USER_IN_ROOM_NTY::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NEW_USER_IN_ROOM_NTY.id)
}

// optional .RoomUserInfo var_room_user = 2;
inline bool NEW_USER_IN_ROOM_NTY::_internal_has_var_room_user() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || var_room_user_ != nullptr);
  return value;
}
inline bool NEW_USER_IN_ROOM_NTY::has_var_room_user() const {
  return _internal_has_var_room_user();
}
inline const ::RoomUserInfo& NEW_USER_IN_ROOM_NTY::_internal_var_room_user() const {
  const ::RoomUserInfo* p = var_room_user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoomUserInfo*>(
      &::_RoomUserInfo_default_instance_);
}
inline const ::RoomUserInfo& NEW_USER_IN_ROOM_NTY::var_room_user() const {
  // @@protoc_insertion_point(field_get:NEW_USER_IN_ROOM_NTY.var_room_user)
  return _internal_var_room_user();
}
inline ::RoomUserInfo* NEW_USER_IN_ROOM_NTY::release_var_room_user() {
  // @@protoc_insertion_point(field_release:NEW_USER_IN_ROOM_NTY.var_room_user)
  _has_bits_[0] &= ~0x00000001u;
  ::RoomUserInfo* temp = var_room_user_;
  var_room_user_ = nullptr;
  return temp;
}
inline ::RoomUserInfo* NEW_USER_IN_ROOM_NTY::_internal_mutable_var_room_user() {
  _has_bits_[0] |= 0x00000001u;
  if (var_room_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoomUserInfo>(GetArenaNoVirtual());
    var_room_user_ = p;
  }
  return var_room_user_;
}
inline ::RoomUserInfo* NEW_USER_IN_ROOM_NTY::mutable_var_room_user() {
  // @@protoc_insertion_point(field_mutable:NEW_USER_IN_ROOM_NTY.var_room_user)
  return _internal_mutable_var_room_user();
}
inline void NEW_USER_IN_ROOM_NTY::set_allocated_var_room_user(::RoomUserInfo* var_room_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_room_user_);
  }
  if (var_room_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      var_room_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_room_user, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_room_user_ = var_room_user;
  // @@protoc_insertion_point(field_set_allocated:NEW_USER_IN_ROOM_NTY.var_room_user)
}

// optional .ErrorCode var_code = 3;
inline bool NEW_USER_IN_ROOM_NTY::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NEW_USER_IN_ROOM_NTY::has_var_code() const {
  return _internal_has_var_code();
}
inline void NEW_USER_IN_ROOM_NTY::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ErrorCode NEW_USER_IN_ROOM_NTY::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode NEW_USER_IN_ROOM_NTY::var_code() const {
  // @@protoc_insertion_point(field_get:NEW_USER_IN_ROOM_NTY.var_code)
  return _internal_var_code();
}
inline void NEW_USER_IN_ROOM_NTY::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  var_code_ = value;
}
inline void NEW_USER_IN_ROOM_NTY::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:NEW_USER_IN_ROOM_NTY.var_code)
}

// optional int32 var_type = 4;
inline bool NEW_USER_IN_ROOM_NTY::_internal_has_var_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NEW_USER_IN_ROOM_NTY::has_var_type() const {
  return _internal_has_var_type();
}
inline void NEW_USER_IN_ROOM_NTY::clear_var_type() {
  var_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NEW_USER_IN_ROOM_NTY::_internal_var_type() const {
  return var_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NEW_USER_IN_ROOM_NTY::var_type() const {
  // @@protoc_insertion_point(field_get:NEW_USER_IN_ROOM_NTY.var_type)
  return _internal_var_type();
}
inline void NEW_USER_IN_ROOM_NTY::_internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  var_type_ = value;
}
inline void NEW_USER_IN_ROOM_NTY::set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_type(value);
  // @@protoc_insertion_point(field_set:NEW_USER_IN_ROOM_NTY.var_type)
}

// -------------------------------------------------------------------

// LEAVE_ROOM_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_RES];
inline bool LEAVE_ROOM_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LEAVE_ROOM_RES::has_id() const {
  return _internal_has_id();
}
inline void LEAVE_ROOM_RES::clear_id() {
  id_ = 9;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOCOL LEAVE_ROOM_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL LEAVE_ROOM_RES::id() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_RES.id)
  return _internal_id();
}
inline void LEAVE_ROOM_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void LEAVE_ROOM_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_RES.id)
}

// optional string var_name = 2;
inline bool LEAVE_ROOM_RES::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LEAVE_ROOM_RES::has_var_name() const {
  return _internal_has_var_name();
}
inline void LEAVE_ROOM_RES::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LEAVE_ROOM_RES::var_name() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_RES.var_name)
  return _internal_var_name();
}
inline void LEAVE_ROOM_RES::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_RES.var_name)
}
inline std::string* LEAVE_ROOM_RES::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:LEAVE_ROOM_RES.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& LEAVE_ROOM_RES::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void LEAVE_ROOM_RES::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LEAVE_ROOM_RES::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LEAVE_ROOM_RES.var_name)
}
inline void LEAVE_ROOM_RES::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LEAVE_ROOM_RES.var_name)
}
inline void LEAVE_ROOM_RES::set_var_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LEAVE_ROOM_RES.var_name)
}
inline std::string* LEAVE_ROOM_RES::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LEAVE_ROOM_RES::release_var_name() {
  // @@protoc_insertion_point(field_release:LEAVE_ROOM_RES.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LEAVE_ROOM_RES::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:LEAVE_ROOM_RES.var_name)
}

// optional .ErrorCode var_code = 3;
inline bool LEAVE_ROOM_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LEAVE_ROOM_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void LEAVE_ROOM_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ErrorCode LEAVE_ROOM_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode LEAVE_ROOM_RES::var_code() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_RES.var_code)
  return _internal_var_code();
}
inline void LEAVE_ROOM_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  var_code_ = value;
}
inline void LEAVE_ROOM_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_RES.var_code)
}

// optional int64 var_index = 4;
inline bool LEAVE_ROOM_RES::_internal_has_var_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LEAVE_ROOM_RES::has_var_index() const {
  return _internal_has_var_index();
}
inline void LEAVE_ROOM_RES::clear_var_index() {
  var_index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LEAVE_ROOM_RES::_internal_var_index() const {
  return var_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LEAVE_ROOM_RES::var_index() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_RES.var_index)
  return _internal_var_index();
}
inline void LEAVE_ROOM_RES::_internal_set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  var_index_ = value;
}
inline void LEAVE_ROOM_RES::set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_var_index(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_RES.var_index)
}

// optional int32 var_room_number = 5;
inline bool LEAVE_ROOM_RES::_internal_has_var_room_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LEAVE_ROOM_RES::has_var_room_number() const {
  return _internal_has_var_room_number();
}
inline void LEAVE_ROOM_RES::clear_var_room_number() {
  var_room_number_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LEAVE_ROOM_RES::_internal_var_room_number() const {
  return var_room_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LEAVE_ROOM_RES::var_room_number() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_RES.var_room_number)
  return _internal_var_room_number();
}
inline void LEAVE_ROOM_RES::_internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  var_room_number_ = value;
}
inline void LEAVE_ROOM_RES::set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_number(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_RES.var_room_number)
}

// -------------------------------------------------------------------

// ROOM_LIST_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_RES];
inline bool ROOM_LIST_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ROOM_LIST_RES::has_id() const {
  return _internal_has_id();
}
inline void ROOM_LIST_RES::clear_id() {
  id_ = 14;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL ROOM_LIST_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL ROOM_LIST_RES::id() const {
  // @@protoc_insertion_point(field_get:ROOM_LIST_RES.id)
  return _internal_id();
}
inline void ROOM_LIST_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void ROOM_LIST_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ROOM_LIST_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool ROOM_LIST_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROOM_LIST_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void ROOM_LIST_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ErrorCode ROOM_LIST_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode ROOM_LIST_RES::var_code() const {
  // @@protoc_insertion_point(field_get:ROOM_LIST_RES.var_code)
  return _internal_var_code();
}
inline void ROOM_LIST_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  var_code_ = value;
}
inline void ROOM_LIST_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:ROOM_LIST_RES.var_code)
}

// repeated .RoomInfo2 var_room_list = 3;
inline int ROOM_LIST_RES::_internal_var_room_list_size() const {
  return var_room_list_.size();
}
inline int ROOM_LIST_RES::var_room_list_size() const {
  return _internal_var_room_list_size();
}
inline ::RoomInfo2* ROOM_LIST_RES::mutable_var_room_list(int index) {
  // @@protoc_insertion_point(field_mutable:ROOM_LIST_RES.var_room_list)
  return var_room_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomInfo2 >*
ROOM_LIST_RES::mutable_var_room_list() {
  // @@protoc_insertion_point(field_mutable_list:ROOM_LIST_RES.var_room_list)
  return &var_room_list_;
}
inline const ::RoomInfo2& ROOM_LIST_RES::_internal_var_room_list(int index) const {
  return var_room_list_.Get(index);
}
inline const ::RoomInfo2& ROOM_LIST_RES::var_room_list(int index) const {
  // @@protoc_insertion_point(field_get:ROOM_LIST_RES.var_room_list)
  return _internal_var_room_list(index);
}
inline ::RoomInfo2* ROOM_LIST_RES::_internal_add_var_room_list() {
  return var_room_list_.Add();
}
inline ::RoomInfo2* ROOM_LIST_RES::add_var_room_list() {
  // @@protoc_insertion_point(field_add:ROOM_LIST_RES.var_room_list)
  return _internal_add_var_room_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomInfo2 >&
ROOM_LIST_RES::var_room_list() const {
  // @@protoc_insertion_point(field_list:ROOM_LIST_RES.var_room_list)
  return var_room_list_;
}

// -------------------------------------------------------------------

// ROOM_PASS_THROUGH_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_RES];
inline bool ROOM_PASS_THROUGH_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ROOM_PASS_THROUGH_RES::has_id() const {
  return _internal_has_id();
}
inline void ROOM_PASS_THROUGH_RES::clear_id() {
  id_ = 18;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOCOL ROOM_PASS_THROUGH_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL ROOM_PASS_THROUGH_RES::id() const {
  // @@protoc_insertion_point(field_get:ROOM_PASS_THROUGH_RES.id)
  return _internal_id();
}
inline void ROOM_PASS_THROUGH_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void ROOM_PASS_THROUGH_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ROOM_PASS_THROUGH_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool ROOM_PASS_THROUGH_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROOM_PASS_THROUGH_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void ROOM_PASS_THROUGH_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ErrorCode ROOM_PASS_THROUGH_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode ROOM_PASS_THROUGH_RES::var_code() const {
  // @@protoc_insertion_point(field_get:ROOM_PASS_THROUGH_RES.var_code)
  return _internal_var_code();
}
inline void ROOM_PASS_THROUGH_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  var_code_ = value;
}
inline void ROOM_PASS_THROUGH_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:ROOM_PASS_THROUGH_RES.var_code)
}

// repeated .RoomMessage var_messages = 3;
inline int ROOM_PASS_THROUGH_RES::_internal_var_messages_size() const {
  return var_messages_.size();
}
inline int ROOM_PASS_THROUGH_RES::var_messages_size() const {
  return _internal_var_messages_size();
}
inline ::RoomMessage* ROOM_PASS_THROUGH_RES::mutable_var_messages(int index) {
  // @@protoc_insertion_point(field_mutable:ROOM_PASS_THROUGH_RES.var_messages)
  return var_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomMessage >*
ROOM_PASS_THROUGH_RES::mutable_var_messages() {
  // @@protoc_insertion_point(field_mutable_list:ROOM_PASS_THROUGH_RES.var_messages)
  return &var_messages_;
}
inline const ::RoomMessage& ROOM_PASS_THROUGH_RES::_internal_var_messages(int index) const {
  return var_messages_.Get(index);
}
inline const ::RoomMessage& ROOM_PASS_THROUGH_RES::var_messages(int index) const {
  // @@protoc_insertion_point(field_get:ROOM_PASS_THROUGH_RES.var_messages)
  return _internal_var_messages(index);
}
inline ::RoomMessage* ROOM_PASS_THROUGH_RES::_internal_add_var_messages() {
  return var_messages_.Add();
}
inline ::RoomMessage* ROOM_PASS_THROUGH_RES::add_var_messages() {
  // @@protoc_insertion_point(field_add:ROOM_PASS_THROUGH_RES.var_messages)
  return _internal_add_var_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomMessage >&
ROOM_PASS_THROUGH_RES::var_messages() const {
  // @@protoc_insertion_point(field_list:ROOM_PASS_THROUGH_RES.var_messages)
  return var_messages_;
}

// optional int32 var_room_number = 4;
inline bool ROOM_PASS_THROUGH_RES::_internal_has_var_room_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ROOM_PASS_THROUGH_RES::has_var_room_number() const {
  return _internal_has_var_room_number();
}
inline void ROOM_PASS_THROUGH_RES::clear_var_room_number() {
  var_room_number_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ROOM_PASS_THROUGH_RES::_internal_var_room_number() const {
  return var_room_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ROOM_PASS_THROUGH_RES::var_room_number() const {
  // @@protoc_insertion_point(field_get:ROOM_PASS_THROUGH_RES.var_room_number)
  return _internal_var_room_number();
}
inline void ROOM_PASS_THROUGH_RES::_internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  var_room_number_ = value;
}
inline void ROOM_PASS_THROUGH_RES::set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_number(value);
  // @@protoc_insertion_point(field_set:ROOM_PASS_THROUGH_RES.var_room_number)
}

// -------------------------------------------------------------------

// NOTICE_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_RES];
inline bool NOTICE_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NOTICE_RES::has_id() const {
  return _internal_has_id();
}
inline void NOTICE_RES::clear_id() {
  id_ = 20;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL NOTICE_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL NOTICE_RES::id() const {
  // @@protoc_insertion_point(field_get:NOTICE_RES.id)
  return _internal_id();
}
inline void NOTICE_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void NOTICE_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NOTICE_RES.id)
}

// repeated .NotifyInfo var_list = 2;
inline int NOTICE_RES::_internal_var_list_size() const {
  return var_list_.size();
}
inline int NOTICE_RES::var_list_size() const {
  return _internal_var_list_size();
}
inline ::NotifyInfo* NOTICE_RES::mutable_var_list(int index) {
  // @@protoc_insertion_point(field_mutable:NOTICE_RES.var_list)
  return var_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NotifyInfo >*
NOTICE_RES::mutable_var_list() {
  // @@protoc_insertion_point(field_mutable_list:NOTICE_RES.var_list)
  return &var_list_;
}
inline const ::NotifyInfo& NOTICE_RES::_internal_var_list(int index) const {
  return var_list_.Get(index);
}
inline const ::NotifyInfo& NOTICE_RES::var_list(int index) const {
  // @@protoc_insertion_point(field_get:NOTICE_RES.var_list)
  return _internal_var_list(index);
}
inline ::NotifyInfo* NOTICE_RES::_internal_add_var_list() {
  return var_list_.Add();
}
inline ::NotifyInfo* NOTICE_RES::add_var_list() {
  // @@protoc_insertion_point(field_add:NOTICE_RES.var_list)
  return _internal_add_var_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NotifyInfo >&
NOTICE_RES::var_list() const {
  // @@protoc_insertion_point(field_list:NOTICE_RES.var_list)
  return var_list_;
}

// -------------------------------------------------------------------

// BITMAP_MESSAGE_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_RES];
inline bool BITMAP_MESSAGE_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BITMAP_MESSAGE_RES::has_id() const {
  return _internal_has_id();
}
inline void BITMAP_MESSAGE_RES::clear_id() {
  id_ = 11;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOCOL BITMAP_MESSAGE_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL BITMAP_MESSAGE_RES::id() const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_RES.id)
  return _internal_id();
}
inline void BITMAP_MESSAGE_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void BITMAP_MESSAGE_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool BITMAP_MESSAGE_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BITMAP_MESSAGE_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void BITMAP_MESSAGE_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ErrorCode BITMAP_MESSAGE_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode BITMAP_MESSAGE_RES::var_code() const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_RES.var_code)
  return _internal_var_code();
}
inline void BITMAP_MESSAGE_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  var_code_ = value;
}
inline void BITMAP_MESSAGE_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_RES.var_code)
}

// repeated bytes var_message = 3;
inline int BITMAP_MESSAGE_RES::_internal_var_message_size() const {
  return var_message_.size();
}
inline int BITMAP_MESSAGE_RES::var_message_size() const {
  return _internal_var_message_size();
}
inline void BITMAP_MESSAGE_RES::clear_var_message() {
  var_message_.Clear();
}
inline std::string* BITMAP_MESSAGE_RES::add_var_message() {
  // @@protoc_insertion_point(field_add_mutable:BITMAP_MESSAGE_RES.var_message)
  return _internal_add_var_message();
}
inline const std::string& BITMAP_MESSAGE_RES::_internal_var_message(int index) const {
  return var_message_.Get(index);
}
inline const std::string& BITMAP_MESSAGE_RES::var_message(int index) const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_RES.var_message)
  return _internal_var_message(index);
}
inline std::string* BITMAP_MESSAGE_RES::mutable_var_message(int index) {
  // @@protoc_insertion_point(field_mutable:BITMAP_MESSAGE_RES.var_message)
  return var_message_.Mutable(index);
}
inline void BITMAP_MESSAGE_RES::set_var_message(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_RES.var_message)
  var_message_.Mutable(index)->assign(value);
}
inline void BITMAP_MESSAGE_RES::set_var_message(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_RES.var_message)
  var_message_.Mutable(index)->assign(std::move(value));
}
inline void BITMAP_MESSAGE_RES::set_var_message(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BITMAP_MESSAGE_RES.var_message)
}
inline void BITMAP_MESSAGE_RES::set_var_message(int index, const void* value, size_t size) {
  var_message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BITMAP_MESSAGE_RES.var_message)
}
inline std::string* BITMAP_MESSAGE_RES::_internal_add_var_message() {
  return var_message_.Add();
}
inline void BITMAP_MESSAGE_RES::add_var_message(const std::string& value) {
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BITMAP_MESSAGE_RES.var_message)
}
inline void BITMAP_MESSAGE_RES::add_var_message(std::string&& value) {
  var_message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BITMAP_MESSAGE_RES.var_message)
}
inline void BITMAP_MESSAGE_RES::add_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BITMAP_MESSAGE_RES.var_message)
}
inline void BITMAP_MESSAGE_RES::add_var_message(const void* value, size_t size) {
  var_message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BITMAP_MESSAGE_RES.var_message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BITMAP_MESSAGE_RES::var_message() const {
  // @@protoc_insertion_point(field_list:BITMAP_MESSAGE_RES.var_message)
  return var_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BITMAP_MESSAGE_RES::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable_list:BITMAP_MESSAGE_RES.var_message)
  return &var_message_;
}

// optional bytes var_name = 4;
inline bool BITMAP_MESSAGE_RES::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BITMAP_MESSAGE_RES::has_var_name() const {
  return _internal_has_var_name();
}
inline void BITMAP_MESSAGE_RES::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BITMAP_MESSAGE_RES::var_name() const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_RES.var_name)
  return _internal_var_name();
}
inline void BITMAP_MESSAGE_RES::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_RES.var_name)
}
inline std::string* BITMAP_MESSAGE_RES::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:BITMAP_MESSAGE_RES.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& BITMAP_MESSAGE_RES::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void BITMAP_MESSAGE_RES::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BITMAP_MESSAGE_RES::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BITMAP_MESSAGE_RES.var_name)
}
inline void BITMAP_MESSAGE_RES::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BITMAP_MESSAGE_RES.var_name)
}
inline void BITMAP_MESSAGE_RES::set_var_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BITMAP_MESSAGE_RES.var_name)
}
inline std::string* BITMAP_MESSAGE_RES::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BITMAP_MESSAGE_RES::release_var_name() {
  // @@protoc_insertion_point(field_release:BITMAP_MESSAGE_RES.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BITMAP_MESSAGE_RES::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:BITMAP_MESSAGE_RES.var_name)
}

// optional int32 var_pos = 5;
inline bool BITMAP_MESSAGE_RES::_internal_has_var_pos() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BITMAP_MESSAGE_RES::has_var_pos() const {
  return _internal_has_var_pos();
}
inline void BITMAP_MESSAGE_RES::clear_var_pos() {
  var_pos_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BITMAP_MESSAGE_RES::_internal_var_pos() const {
  return var_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BITMAP_MESSAGE_RES::var_pos() const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_RES.var_pos)
  return _internal_var_pos();
}
inline void BITMAP_MESSAGE_RES::_internal_set_var_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  var_pos_ = value;
}
inline void BITMAP_MESSAGE_RES::set_var_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_pos(value);
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_RES.var_pos)
}

// optional int32 var_type = 6;
inline bool BITMAP_MESSAGE_RES::_internal_has_var_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BITMAP_MESSAGE_RES::has_var_type() const {
  return _internal_has_var_type();
}
inline void BITMAP_MESSAGE_RES::clear_var_type() {
  var_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BITMAP_MESSAGE_RES::_internal_var_type() const {
  return var_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BITMAP_MESSAGE_RES::var_type() const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_RES.var_type)
  return _internal_var_type();
}
inline void BITMAP_MESSAGE_RES::_internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  var_type_ = value;
}
inline void BITMAP_MESSAGE_RES::set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_type(value);
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_RES.var_type)
}

// -------------------------------------------------------------------

// AUDIO_MESSAGE_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_RES];
inline bool AUDIO_MESSAGE_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AUDIO_MESSAGE_RES::has_id() const {
  return _internal_has_id();
}
inline void AUDIO_MESSAGE_RES::clear_id() {
  id_ = 22;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOCOL AUDIO_MESSAGE_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL AUDIO_MESSAGE_RES::id() const {
  // @@protoc_insertion_point(field_get:AUDIO_MESSAGE_RES.id)
  return _internal_id();
}
inline void AUDIO_MESSAGE_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void AUDIO_MESSAGE_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool AUDIO_MESSAGE_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AUDIO_MESSAGE_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void AUDIO_MESSAGE_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ErrorCode AUDIO_MESSAGE_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode AUDIO_MESSAGE_RES::var_code() const {
  // @@protoc_insertion_point(field_get:AUDIO_MESSAGE_RES.var_code)
  return _internal_var_code();
}
inline void AUDIO_MESSAGE_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  var_code_ = value;
}
inline void AUDIO_MESSAGE_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_RES.var_code)
}

// repeated bytes var_message = 3;
inline int AUDIO_MESSAGE_RES::_internal_var_message_size() const {
  return var_message_.size();
}
inline int AUDIO_MESSAGE_RES::var_message_size() const {
  return _internal_var_message_size();
}
inline void AUDIO_MESSAGE_RES::clear_var_message() {
  var_message_.Clear();
}
inline std::string* AUDIO_MESSAGE_RES::add_var_message() {
  // @@protoc_insertion_point(field_add_mutable:AUDIO_MESSAGE_RES.var_message)
  return _internal_add_var_message();
}
inline const std::string& AUDIO_MESSAGE_RES::_internal_var_message(int index) const {
  return var_message_.Get(index);
}
inline const std::string& AUDIO_MESSAGE_RES::var_message(int index) const {
  // @@protoc_insertion_point(field_get:AUDIO_MESSAGE_RES.var_message)
  return _internal_var_message(index);
}
inline std::string* AUDIO_MESSAGE_RES::mutable_var_message(int index) {
  // @@protoc_insertion_point(field_mutable:AUDIO_MESSAGE_RES.var_message)
  return var_message_.Mutable(index);
}
inline void AUDIO_MESSAGE_RES::set_var_message(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_RES.var_message)
  var_message_.Mutable(index)->assign(value);
}
inline void AUDIO_MESSAGE_RES::set_var_message(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_RES.var_message)
  var_message_.Mutable(index)->assign(std::move(value));
}
inline void AUDIO_MESSAGE_RES::set_var_message(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AUDIO_MESSAGE_RES.var_message)
}
inline void AUDIO_MESSAGE_RES::set_var_message(int index, const void* value, size_t size) {
  var_message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AUDIO_MESSAGE_RES.var_message)
}
inline std::string* AUDIO_MESSAGE_RES::_internal_add_var_message() {
  return var_message_.Add();
}
inline void AUDIO_MESSAGE_RES::add_var_message(const std::string& value) {
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AUDIO_MESSAGE_RES.var_message)
}
inline void AUDIO_MESSAGE_RES::add_var_message(std::string&& value) {
  var_message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AUDIO_MESSAGE_RES.var_message)
}
inline void AUDIO_MESSAGE_RES::add_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AUDIO_MESSAGE_RES.var_message)
}
inline void AUDIO_MESSAGE_RES::add_var_message(const void* value, size_t size) {
  var_message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AUDIO_MESSAGE_RES.var_message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AUDIO_MESSAGE_RES::var_message() const {
  // @@protoc_insertion_point(field_list:AUDIO_MESSAGE_RES.var_message)
  return var_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AUDIO_MESSAGE_RES::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable_list:AUDIO_MESSAGE_RES.var_message)
  return &var_message_;
}

// optional bytes var_name = 4;
inline bool AUDIO_MESSAGE_RES::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUDIO_MESSAGE_RES::has_var_name() const {
  return _internal_has_var_name();
}
inline void AUDIO_MESSAGE_RES::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AUDIO_MESSAGE_RES::var_name() const {
  // @@protoc_insertion_point(field_get:AUDIO_MESSAGE_RES.var_name)
  return _internal_var_name();
}
inline void AUDIO_MESSAGE_RES::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_RES.var_name)
}
inline std::string* AUDIO_MESSAGE_RES::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:AUDIO_MESSAGE_RES.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& AUDIO_MESSAGE_RES::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void AUDIO_MESSAGE_RES::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AUDIO_MESSAGE_RES::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AUDIO_MESSAGE_RES.var_name)
}
inline void AUDIO_MESSAGE_RES::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AUDIO_MESSAGE_RES.var_name)
}
inline void AUDIO_MESSAGE_RES::set_var_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AUDIO_MESSAGE_RES.var_name)
}
inline std::string* AUDIO_MESSAGE_RES::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AUDIO_MESSAGE_RES::release_var_name() {
  // @@protoc_insertion_point(field_release:AUDIO_MESSAGE_RES.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AUDIO_MESSAGE_RES::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:AUDIO_MESSAGE_RES.var_name)
}

// optional int32 var_pos = 5;
inline bool AUDIO_MESSAGE_RES::_internal_has_var_pos() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AUDIO_MESSAGE_RES::has_var_pos() const {
  return _internal_has_var_pos();
}
inline void AUDIO_MESSAGE_RES::clear_var_pos() {
  var_pos_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AUDIO_MESSAGE_RES::_internal_var_pos() const {
  return var_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AUDIO_MESSAGE_RES::var_pos() const {
  // @@protoc_insertion_point(field_get:AUDIO_MESSAGE_RES.var_pos)
  return _internal_var_pos();
}
inline void AUDIO_MESSAGE_RES::_internal_set_var_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  var_pos_ = value;
}
inline void AUDIO_MESSAGE_RES::set_var_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_pos(value);
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_RES.var_pos)
}

// -------------------------------------------------------------------

// PRAY_MESSAGE_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_RES];
inline bool PRAY_MESSAGE_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PRAY_MESSAGE_RES::has_id() const {
  return _internal_has_id();
}
inline void PRAY_MESSAGE_RES::clear_id() {
  id_ = 24;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL PRAY_MESSAGE_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL PRAY_MESSAGE_RES::id() const {
  // @@protoc_insertion_point(field_get:PRAY_MESSAGE_RES.id)
  return _internal_id();
}
inline void PRAY_MESSAGE_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void PRAY_MESSAGE_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PRAY_MESSAGE_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool PRAY_MESSAGE_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PRAY_MESSAGE_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void PRAY_MESSAGE_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ErrorCode PRAY_MESSAGE_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode PRAY_MESSAGE_RES::var_code() const {
  // @@protoc_insertion_point(field_get:PRAY_MESSAGE_RES.var_code)
  return _internal_var_code();
}
inline void PRAY_MESSAGE_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  var_code_ = value;
}
inline void PRAY_MESSAGE_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:PRAY_MESSAGE_RES.var_code)
}

// repeated .PrayInfo var_list = 3;
inline int PRAY_MESSAGE_RES::_internal_var_list_size() const {
  return var_list_.size();
}
inline int PRAY_MESSAGE_RES::var_list_size() const {
  return _internal_var_list_size();
}
inline ::PrayInfo* PRAY_MESSAGE_RES::mutable_var_list(int index) {
  // @@protoc_insertion_point(field_mutable:PRAY_MESSAGE_RES.var_list)
  return var_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrayInfo >*
PRAY_MESSAGE_RES::mutable_var_list() {
  // @@protoc_insertion_point(field_mutable_list:PRAY_MESSAGE_RES.var_list)
  return &var_list_;
}
inline const ::PrayInfo& PRAY_MESSAGE_RES::_internal_var_list(int index) const {
  return var_list_.Get(index);
}
inline const ::PrayInfo& PRAY_MESSAGE_RES::var_list(int index) const {
  // @@protoc_insertion_point(field_get:PRAY_MESSAGE_RES.var_list)
  return _internal_var_list(index);
}
inline ::PrayInfo* PRAY_MESSAGE_RES::_internal_add_var_list() {
  return var_list_.Add();
}
inline ::PrayInfo* PRAY_MESSAGE_RES::add_var_list() {
  // @@protoc_insertion_point(field_add:PRAY_MESSAGE_RES.var_list)
  return _internal_add_var_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PrayInfo >&
PRAY_MESSAGE_RES::var_list() const {
  // @@protoc_insertion_point(field_list:PRAY_MESSAGE_RES.var_list)
  return var_list_;
}

// -------------------------------------------------------------------

// PRAY_MESSAGE_REG_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REG_RES];
inline bool PRAY_MESSAGE_REG_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PRAY_MESSAGE_REG_RES::has_id() const {
  return _internal_has_id();
}
inline void PRAY_MESSAGE_REG_RES::clear_id() {
  id_ = 26;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOCOL PRAY_MESSAGE_REG_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL PRAY_MESSAGE_REG_RES::id() const {
  // @@protoc_insertion_point(field_get:PRAY_MESSAGE_REG_RES.id)
  return _internal_id();
}
inline void PRAY_MESSAGE_REG_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void PRAY_MESSAGE_REG_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PRAY_MESSAGE_REG_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool PRAY_MESSAGE_REG_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PRAY_MESSAGE_REG_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void PRAY_MESSAGE_REG_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ErrorCode PRAY_MESSAGE_REG_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode PRAY_MESSAGE_REG_RES::var_code() const {
  // @@protoc_insertion_point(field_get:PRAY_MESSAGE_REG_RES.var_code)
  return _internal_var_code();
}
inline void PRAY_MESSAGE_REG_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  var_code_ = value;
}
inline void PRAY_MESSAGE_REG_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:PRAY_MESSAGE_REG_RES.var_code)
}

// optional string var_message = 3;
inline bool PRAY_MESSAGE_REG_RES::_internal_has_var_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PRAY_MESSAGE_REG_RES::has_var_message() const {
  return _internal_has_var_message();
}
inline void PRAY_MESSAGE_REG_RES::clear_var_message() {
  var_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PRAY_MESSAGE_REG_RES::var_message() const {
  // @@protoc_insertion_point(field_get:PRAY_MESSAGE_REG_RES.var_message)
  return _internal_var_message();
}
inline void PRAY_MESSAGE_REG_RES::set_var_message(const std::string& value) {
  _internal_set_var_message(value);
  // @@protoc_insertion_point(field_set:PRAY_MESSAGE_REG_RES.var_message)
}
inline std::string* PRAY_MESSAGE_REG_RES::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable:PRAY_MESSAGE_REG_RES.var_message)
  return _internal_mutable_var_message();
}
inline const std::string& PRAY_MESSAGE_REG_RES::_internal_var_message() const {
  return var_message_.GetNoArena();
}
inline void PRAY_MESSAGE_REG_RES::_internal_set_var_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PRAY_MESSAGE_REG_RES::set_var_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PRAY_MESSAGE_REG_RES.var_message)
}
inline void PRAY_MESSAGE_REG_RES::set_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PRAY_MESSAGE_REG_RES.var_message)
}
inline void PRAY_MESSAGE_REG_RES::set_var_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PRAY_MESSAGE_REG_RES.var_message)
}
inline std::string* PRAY_MESSAGE_REG_RES::_internal_mutable_var_message() {
  _has_bits_[0] |= 0x00000001u;
  return var_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PRAY_MESSAGE_REG_RES::release_var_message() {
  // @@protoc_insertion_point(field_release:PRAY_MESSAGE_REG_RES.var_message)
  if (!_internal_has_var_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PRAY_MESSAGE_REG_RES::set_allocated_var_message(std::string* var_message) {
  if (var_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_message);
  // @@protoc_insertion_point(field_set_allocated:PRAY_MESSAGE_REG_RES.var_message)
}

// optional string var_time = 4;
inline bool PRAY_MESSAGE_REG_RES::_internal_has_var_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PRAY_MESSAGE_REG_RES::has_var_time() const {
  return _internal_has_var_time();
}
inline void PRAY_MESSAGE_REG_RES::clear_var_time() {
  var_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PRAY_MESSAGE_REG_RES::var_time() const {
  // @@protoc_insertion_point(field_get:PRAY_MESSAGE_REG_RES.var_time)
  return _internal_var_time();
}
inline void PRAY_MESSAGE_REG_RES::set_var_time(const std::string& value) {
  _internal_set_var_time(value);
  // @@protoc_insertion_point(field_set:PRAY_MESSAGE_REG_RES.var_time)
}
inline std::string* PRAY_MESSAGE_REG_RES::mutable_var_time() {
  // @@protoc_insertion_point(field_mutable:PRAY_MESSAGE_REG_RES.var_time)
  return _internal_mutable_var_time();
}
inline const std::string& PRAY_MESSAGE_REG_RES::_internal_var_time() const {
  return var_time_.GetNoArena();
}
inline void PRAY_MESSAGE_REG_RES::_internal_set_var_time(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  var_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PRAY_MESSAGE_REG_RES::set_var_time(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  var_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PRAY_MESSAGE_REG_RES.var_time)
}
inline void PRAY_MESSAGE_REG_RES::set_var_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  var_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PRAY_MESSAGE_REG_RES.var_time)
}
inline void PRAY_MESSAGE_REG_RES::set_var_time(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  var_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PRAY_MESSAGE_REG_RES.var_time)
}
inline std::string* PRAY_MESSAGE_REG_RES::_internal_mutable_var_time() {
  _has_bits_[0] |= 0x00000002u;
  return var_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PRAY_MESSAGE_REG_RES::release_var_time() {
  // @@protoc_insertion_point(field_release:PRAY_MESSAGE_REG_RES.var_time)
  if (!_internal_has_var_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return var_time_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PRAY_MESSAGE_REG_RES::set_allocated_var_time(std::string* var_time) {
  if (var_time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  var_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_time);
  // @@protoc_insertion_point(field_set_allocated:PRAY_MESSAGE_REG_RES.var_time)
}

// -------------------------------------------------------------------

// QNA_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_QNA_RES];
inline bool QNA_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QNA_RES::has_id() const {
  return _internal_has_id();
}
inline void QNA_RES::clear_id() {
  id_ = 28;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL QNA_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL QNA_RES::id() const {
  // @@protoc_insertion_point(field_get:QNA_RES.id)
  return _internal_id();
}
inline void QNA_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void QNA_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:QNA_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool QNA_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QNA_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void QNA_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ErrorCode QNA_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode QNA_RES::var_code() const {
  // @@protoc_insertion_point(field_get:QNA_RES.var_code)
  return _internal_var_code();
}
inline void QNA_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  var_code_ = value;
}
inline void QNA_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:QNA_RES.var_code)
}

// -------------------------------------------------------------------

// MAIL_LIST_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_MAIL_LIST_RES];
inline bool MAIL_LIST_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MAIL_LIST_RES::has_id() const {
  return _internal_has_id();
}
inline void MAIL_LIST_RES::clear_id() {
  id_ = 30;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL MAIL_LIST_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL MAIL_LIST_RES::id() const {
  // @@protoc_insertion_point(field_get:MAIL_LIST_RES.id)
  return _internal_id();
}
inline void MAIL_LIST_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void MAIL_LIST_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MAIL_LIST_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool MAIL_LIST_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MAIL_LIST_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void MAIL_LIST_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ErrorCode MAIL_LIST_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode MAIL_LIST_RES::var_code() const {
  // @@protoc_insertion_point(field_get:MAIL_LIST_RES.var_code)
  return _internal_var_code();
}
inline void MAIL_LIST_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  var_code_ = value;
}
inline void MAIL_LIST_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:MAIL_LIST_RES.var_code)
}

// repeated .MailInfo var_list = 3;
inline int MAIL_LIST_RES::_internal_var_list_size() const {
  return var_list_.size();
}
inline int MAIL_LIST_RES::var_list_size() const {
  return _internal_var_list_size();
}
inline ::MailInfo* MAIL_LIST_RES::mutable_var_list(int index) {
  // @@protoc_insertion_point(field_mutable:MAIL_LIST_RES.var_list)
  return var_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailInfo >*
MAIL_LIST_RES::mutable_var_list() {
  // @@protoc_insertion_point(field_mutable_list:MAIL_LIST_RES.var_list)
  return &var_list_;
}
inline const ::MailInfo& MAIL_LIST_RES::_internal_var_list(int index) const {
  return var_list_.Get(index);
}
inline const ::MailInfo& MAIL_LIST_RES::var_list(int index) const {
  // @@protoc_insertion_point(field_get:MAIL_LIST_RES.var_list)
  return _internal_var_list(index);
}
inline ::MailInfo* MAIL_LIST_RES::_internal_add_var_list() {
  return var_list_.Add();
}
inline ::MailInfo* MAIL_LIST_RES::add_var_list() {
  // @@protoc_insertion_point(field_add:MAIL_LIST_RES.var_list)
  return _internal_add_var_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MailInfo >&
MAIL_LIST_RES::var_list() const {
  // @@protoc_insertion_point(field_list:MAIL_LIST_RES.var_list)
  return var_list_;
}

// -------------------------------------------------------------------

// REG_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_REG_RES];
inline bool REG_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool REG_RES::has_id() const {
  return _internal_has_id();
}
inline void REG_RES::clear_id() {
  id_ = 38;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL REG_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL REG_RES::id() const {
  // @@protoc_insertion_point(field_get:REG_RES.id)
  return _internal_id();
}
inline void REG_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void REG_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:REG_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool REG_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool REG_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void REG_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ErrorCode REG_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode REG_RES::var_code() const {
  // @@protoc_insertion_point(field_get:REG_RES.var_code)
  return _internal_var_code();
}
inline void REG_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  var_code_ = value;
}
inline void REG_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:REG_RES.var_code)
}

// -------------------------------------------------------------------

// CLIENT_LOGOUT_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_LOGOUT_RES];
inline bool CLIENT_LOGOUT_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLIENT_LOGOUT_RES::has_id() const {
  return _internal_has_id();
}
inline void CLIENT_LOGOUT_RES::clear_id() {
  id_ = 40;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL CLIENT_LOGOUT_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL CLIENT_LOGOUT_RES::id() const {
  // @@protoc_insertion_point(field_get:CLIENT_LOGOUT_RES.id)
  return _internal_id();
}
inline void CLIENT_LOGOUT_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CLIENT_LOGOUT_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CLIENT_LOGOUT_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool CLIENT_LOGOUT_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLIENT_LOGOUT_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void CLIENT_LOGOUT_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ErrorCode CLIENT_LOGOUT_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode CLIENT_LOGOUT_RES::var_code() const {
  // @@protoc_insertion_point(field_get:CLIENT_LOGOUT_RES.var_code)
  return _internal_var_code();
}
inline void CLIENT_LOGOUT_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  var_code_ = value;
}
inline void CLIENT_LOGOUT_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:CLIENT_LOGOUT_RES.var_code)
}

// -------------------------------------------------------------------

// CLIENT_KICK

// optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_KICK];
inline bool CLIENT_KICK::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLIENT_KICK::has_id() const {
  return _internal_has_id();
}
inline void CLIENT_KICK::clear_id() {
  id_ = 41;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL CLIENT_KICK::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL CLIENT_KICK::id() const {
  // @@protoc_insertion_point(field_get:CLIENT_KICK.id)
  return _internal_id();
}
inline void CLIENT_KICK::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CLIENT_KICK::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CLIENT_KICK.id)
}

// optional int32 sid = 2;
inline bool CLIENT_KICK::_internal_has_sid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLIENT_KICK::has_sid() const {
  return _internal_has_sid();
}
inline void CLIENT_KICK::clear_sid() {
  sid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLIENT_KICK::_internal_sid() const {
  return sid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CLIENT_KICK::sid() const {
  // @@protoc_insertion_point(field_get:CLIENT_KICK.sid)
  return _internal_sid();
}
inline void CLIENT_KICK::_internal_set_sid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sid_ = value;
}
inline void CLIENT_KICK::set_sid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:CLIENT_KICK.sid)
}

// -------------------------------------------------------------------

// CAMERA_CONTROL_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_CONTROL];
inline bool CAMERA_CONTROL_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAMERA_CONTROL_RES::has_id() const {
  return _internal_has_id();
}
inline void CAMERA_CONTROL_RES::clear_id() {
  id_ = 42;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOCOL CAMERA_CONTROL_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL CAMERA_CONTROL_RES::id() const {
  // @@protoc_insertion_point(field_get:CAMERA_CONTROL_RES.id)
  return _internal_id();
}
inline void CAMERA_CONTROL_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void CAMERA_CONTROL_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CAMERA_CONTROL_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool CAMERA_CONTROL_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAMERA_CONTROL_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void CAMERA_CONTROL_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ErrorCode CAMERA_CONTROL_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode CAMERA_CONTROL_RES::var_code() const {
  // @@protoc_insertion_point(field_get:CAMERA_CONTROL_RES.var_code)
  return _internal_var_code();
}
inline void CAMERA_CONTROL_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  var_code_ = value;
}
inline void CAMERA_CONTROL_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:CAMERA_CONTROL_RES.var_code)
}

// optional .CameraControlType var_type = 3;
inline bool CAMERA_CONTROL_RES::_internal_has_var_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAMERA_CONTROL_RES::has_var_type() const {
  return _internal_has_var_type();
}
inline void CAMERA_CONTROL_RES::clear_var_type() {
  var_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::CameraControlType CAMERA_CONTROL_RES::_internal_var_type() const {
  return static_cast< ::CameraControlType >(var_type_);
}
inline ::CameraControlType CAMERA_CONTROL_RES::var_type() const {
  // @@protoc_insertion_point(field_get:CAMERA_CONTROL_RES.var_type)
  return _internal_var_type();
}
inline void CAMERA_CONTROL_RES::_internal_set_var_type(::CameraControlType value) {
  assert(::CameraControlType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  var_type_ = value;
}
inline void CAMERA_CONTROL_RES::set_var_type(::CameraControlType value) {
  _internal_set_var_type(value);
  // @@protoc_insertion_point(field_set:CAMERA_CONTROL_RES.var_type)
}

// optional int32 var_pos = 4;
inline bool CAMERA_CONTROL_RES::_internal_has_var_pos() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAMERA_CONTROL_RES::has_var_pos() const {
  return _internal_has_var_pos();
}
inline void CAMERA_CONTROL_RES::clear_var_pos() {
  var_pos_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CAMERA_CONTROL_RES::_internal_var_pos() const {
  return var_pos_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CAMERA_CONTROL_RES::var_pos() const {
  // @@protoc_insertion_point(field_get:CAMERA_CONTROL_RES.var_pos)
  return _internal_var_pos();
}
inline void CAMERA_CONTROL_RES::_internal_set_var_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  var_pos_ = value;
}
inline void CAMERA_CONTROL_RES::set_var_pos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_pos(value);
  // @@protoc_insertion_point(field_set:CAMERA_CONTROL_RES.var_pos)
}

// -------------------------------------------------------------------

// MPEG2TS_MESSAGE_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_MESSAGE_RES];
inline bool MPEG2TS_MESSAGE_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MPEG2TS_MESSAGE_RES::has_id() const {
  return _internal_has_id();
}
inline void MPEG2TS_MESSAGE_RES::clear_id() {
  id_ = 44;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOCOL MPEG2TS_MESSAGE_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL MPEG2TS_MESSAGE_RES::id() const {
  // @@protoc_insertion_point(field_get:MPEG2TS_MESSAGE_RES.id)
  return _internal_id();
}
inline void MPEG2TS_MESSAGE_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void MPEG2TS_MESSAGE_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MPEG2TS_MESSAGE_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool MPEG2TS_MESSAGE_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MPEG2TS_MESSAGE_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void MPEG2TS_MESSAGE_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ErrorCode MPEG2TS_MESSAGE_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode MPEG2TS_MESSAGE_RES::var_code() const {
  // @@protoc_insertion_point(field_get:MPEG2TS_MESSAGE_RES.var_code)
  return _internal_var_code();
}
inline void MPEG2TS_MESSAGE_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  var_code_ = value;
}
inline void MPEG2TS_MESSAGE_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:MPEG2TS_MESSAGE_RES.var_code)
}

// repeated bytes var_message = 3;
inline int MPEG2TS_MESSAGE_RES::_internal_var_message_size() const {
  return var_message_.size();
}
inline int MPEG2TS_MESSAGE_RES::var_message_size() const {
  return _internal_var_message_size();
}
inline void MPEG2TS_MESSAGE_RES::clear_var_message() {
  var_message_.Clear();
}
inline std::string* MPEG2TS_MESSAGE_RES::add_var_message() {
  // @@protoc_insertion_point(field_add_mutable:MPEG2TS_MESSAGE_RES.var_message)
  return _internal_add_var_message();
}
inline const std::string& MPEG2TS_MESSAGE_RES::_internal_var_message(int index) const {
  return var_message_.Get(index);
}
inline const std::string& MPEG2TS_MESSAGE_RES::var_message(int index) const {
  // @@protoc_insertion_point(field_get:MPEG2TS_MESSAGE_RES.var_message)
  return _internal_var_message(index);
}
inline std::string* MPEG2TS_MESSAGE_RES::mutable_var_message(int index) {
  // @@protoc_insertion_point(field_mutable:MPEG2TS_MESSAGE_RES.var_message)
  return var_message_.Mutable(index);
}
inline void MPEG2TS_MESSAGE_RES::set_var_message(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MPEG2TS_MESSAGE_RES.var_message)
  var_message_.Mutable(index)->assign(value);
}
inline void MPEG2TS_MESSAGE_RES::set_var_message(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MPEG2TS_MESSAGE_RES.var_message)
  var_message_.Mutable(index)->assign(std::move(value));
}
inline void MPEG2TS_MESSAGE_RES::set_var_message(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MPEG2TS_MESSAGE_RES.var_message)
}
inline void MPEG2TS_MESSAGE_RES::set_var_message(int index, const void* value, size_t size) {
  var_message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MPEG2TS_MESSAGE_RES.var_message)
}
inline std::string* MPEG2TS_MESSAGE_RES::_internal_add_var_message() {
  return var_message_.Add();
}
inline void MPEG2TS_MESSAGE_RES::add_var_message(const std::string& value) {
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MPEG2TS_MESSAGE_RES.var_message)
}
inline void MPEG2TS_MESSAGE_RES::add_var_message(std::string&& value) {
  var_message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MPEG2TS_MESSAGE_RES.var_message)
}
inline void MPEG2TS_MESSAGE_RES::add_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MPEG2TS_MESSAGE_RES.var_message)
}
inline void MPEG2TS_MESSAGE_RES::add_var_message(const void* value, size_t size) {
  var_message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MPEG2TS_MESSAGE_RES.var_message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MPEG2TS_MESSAGE_RES::var_message() const {
  // @@protoc_insertion_point(field_list:MPEG2TS_MESSAGE_RES.var_message)
  return var_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MPEG2TS_MESSAGE_RES::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable_list:MPEG2TS_MESSAGE_RES.var_message)
  return &var_message_;
}

// optional int32 var_type = 4;
inline bool MPEG2TS_MESSAGE_RES::_internal_has_var_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MPEG2TS_MESSAGE_RES::has_var_type() const {
  return _internal_has_var_type();
}
inline void MPEG2TS_MESSAGE_RES::clear_var_type() {
  var_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPEG2TS_MESSAGE_RES::_internal_var_type() const {
  return var_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPEG2TS_MESSAGE_RES::var_type() const {
  // @@protoc_insertion_point(field_get:MPEG2TS_MESSAGE_RES.var_type)
  return _internal_var_type();
}
inline void MPEG2TS_MESSAGE_RES::_internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  var_type_ = value;
}
inline void MPEG2TS_MESSAGE_RES::set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_type(value);
  // @@protoc_insertion_point(field_set:MPEG2TS_MESSAGE_RES.var_type)
}

// -------------------------------------------------------------------

// MPEG2TS_WAKE_UP_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_WAKE_UP_RES];
inline bool MPEG2TS_WAKE_UP_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MPEG2TS_WAKE_UP_RES::has_id() const {
  return _internal_has_id();
}
inline void MPEG2TS_WAKE_UP_RES::clear_id() {
  id_ = 46;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOCOL MPEG2TS_WAKE_UP_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL MPEG2TS_WAKE_UP_RES::id() const {
  // @@protoc_insertion_point(field_get:MPEG2TS_WAKE_UP_RES.id)
  return _internal_id();
}
inline void MPEG2TS_WAKE_UP_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void MPEG2TS_WAKE_UP_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MPEG2TS_WAKE_UP_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool MPEG2TS_WAKE_UP_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MPEG2TS_WAKE_UP_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void MPEG2TS_WAKE_UP_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ErrorCode MPEG2TS_WAKE_UP_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode MPEG2TS_WAKE_UP_RES::var_code() const {
  // @@protoc_insertion_point(field_get:MPEG2TS_WAKE_UP_RES.var_code)
  return _internal_var_code();
}
inline void MPEG2TS_WAKE_UP_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  var_code_ = value;
}
inline void MPEG2TS_WAKE_UP_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:MPEG2TS_WAKE_UP_RES.var_code)
}

// optional int32 var_type = 3;
inline bool MPEG2TS_WAKE_UP_RES::_internal_has_var_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MPEG2TS_WAKE_UP_RES::has_var_type() const {
  return _internal_has_var_type();
}
inline void MPEG2TS_WAKE_UP_RES::clear_var_type() {
  var_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPEG2TS_WAKE_UP_RES::_internal_var_type() const {
  return var_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPEG2TS_WAKE_UP_RES::var_type() const {
  // @@protoc_insertion_point(field_get:MPEG2TS_WAKE_UP_RES.var_type)
  return _internal_var_type();
}
inline void MPEG2TS_WAKE_UP_RES::_internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  var_type_ = value;
}
inline void MPEG2TS_WAKE_UP_RES::set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_type(value);
  // @@protoc_insertion_point(field_set:MPEG2TS_WAKE_UP_RES.var_type)
}

// optional int32 var_room_number = 4;
inline bool MPEG2TS_WAKE_UP_RES::_internal_has_var_room_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MPEG2TS_WAKE_UP_RES::has_var_room_number() const {
  return _internal_has_var_room_number();
}
inline void MPEG2TS_WAKE_UP_RES::clear_var_room_number() {
  var_room_number_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPEG2TS_WAKE_UP_RES::_internal_var_room_number() const {
  return var_room_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPEG2TS_WAKE_UP_RES::var_room_number() const {
  // @@protoc_insertion_point(field_get:MPEG2TS_WAKE_UP_RES.var_room_number)
  return _internal_var_room_number();
}
inline void MPEG2TS_WAKE_UP_RES::_internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  var_room_number_ = value;
}
inline void MPEG2TS_WAKE_UP_RES::set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_number(value);
  // @@protoc_insertion_point(field_set:MPEG2TS_WAKE_UP_RES.var_room_number)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GS_2eCLI_2eproto

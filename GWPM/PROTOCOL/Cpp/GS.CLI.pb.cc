// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GS.CLI.proto

#include "GS.CLI.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MailInfo_Structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NotifyInfo_Structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PrayInfo_Structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomInfo2_Structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomMessage_Structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomUserInfo_Structure_2eproto;
class VERSION_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VERSION_RES> _instance;
} _VERSION_RES_default_instance_;
class LOGIN_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOGIN_RES> _instance;
} _LOGIN_RES_default_instance_;
class CREATE_ROOM_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CREATE_ROOM_RES> _instance;
} _CREATE_ROOM_RES_default_instance_;
class ENTER_ROOM_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ENTER_ROOM_RES> _instance;
} _ENTER_ROOM_RES_default_instance_;
class NEW_USER_IN_ROOM_NTYDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NEW_USER_IN_ROOM_NTY> _instance;
} _NEW_USER_IN_ROOM_NTY_default_instance_;
class LEAVE_ROOM_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LEAVE_ROOM_RES> _instance;
} _LEAVE_ROOM_RES_default_instance_;
class ROOM_LIST_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROOM_LIST_RES> _instance;
} _ROOM_LIST_RES_default_instance_;
class ROOM_PASS_THROUGH_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROOM_PASS_THROUGH_RES> _instance;
} _ROOM_PASS_THROUGH_RES_default_instance_;
class NOTICE_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NOTICE_RES> _instance;
} _NOTICE_RES_default_instance_;
class BITMAP_MESSAGE_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BITMAP_MESSAGE_RES> _instance;
} _BITMAP_MESSAGE_RES_default_instance_;
class AUDIO_MESSAGE_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AUDIO_MESSAGE_RES> _instance;
} _AUDIO_MESSAGE_RES_default_instance_;
class PRAY_MESSAGE_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PRAY_MESSAGE_RES> _instance;
} _PRAY_MESSAGE_RES_default_instance_;
class PRAY_MESSAGE_REG_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PRAY_MESSAGE_REG_RES> _instance;
} _PRAY_MESSAGE_REG_RES_default_instance_;
class QNA_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QNA_RES> _instance;
} _QNA_RES_default_instance_;
class MAIL_LIST_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MAIL_LIST_RES> _instance;
} _MAIL_LIST_RES_default_instance_;
class REG_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<REG_RES> _instance;
} _REG_RES_default_instance_;
class CLIENT_LOGOUT_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLIENT_LOGOUT_RES> _instance;
} _CLIENT_LOGOUT_RES_default_instance_;
class CLIENT_KICKDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLIENT_KICK> _instance;
} _CLIENT_KICK_default_instance_;
class CAMERA_CONTROL_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CAMERA_CONTROL_RES> _instance;
} _CAMERA_CONTROL_RES_default_instance_;
class MPEG2TS_MESSAGE_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MPEG2TS_MESSAGE_RES> _instance;
} _MPEG2TS_MESSAGE_RES_default_instance_;
class MPEG2TS_WAKE_UP_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MPEG2TS_WAKE_UP_RES> _instance;
} _MPEG2TS_WAKE_UP_RES_default_instance_;
static void InitDefaultsscc_info_AUDIO_MESSAGE_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AUDIO_MESSAGE_RES_default_instance_;
    new (ptr) ::AUDIO_MESSAGE_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AUDIO_MESSAGE_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AUDIO_MESSAGE_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AUDIO_MESSAGE_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_BITMAP_MESSAGE_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BITMAP_MESSAGE_RES_default_instance_;
    new (ptr) ::BITMAP_MESSAGE_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BITMAP_MESSAGE_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BITMAP_MESSAGE_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BITMAP_MESSAGE_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_CAMERA_CONTROL_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAMERA_CONTROL_RES_default_instance_;
    new (ptr) ::CAMERA_CONTROL_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAMERA_CONTROL_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CAMERA_CONTROL_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CAMERA_CONTROL_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_CLIENT_KICK_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CLIENT_KICK_default_instance_;
    new (ptr) ::CLIENT_KICK();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CLIENT_KICK::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CLIENT_KICK_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CLIENT_KICK_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_CLIENT_LOGOUT_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CLIENT_LOGOUT_RES_default_instance_;
    new (ptr) ::CLIENT_LOGOUT_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CLIENT_LOGOUT_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CLIENT_LOGOUT_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CLIENT_LOGOUT_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_CREATE_ROOM_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CREATE_ROOM_RES_default_instance_;
    new (ptr) ::CREATE_ROOM_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CREATE_ROOM_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CREATE_ROOM_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CREATE_ROOM_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_ENTER_ROOM_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ENTER_ROOM_RES_default_instance_;
    new (ptr) ::ENTER_ROOM_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ENTER_ROOM_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ENTER_ROOM_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ENTER_ROOM_RES_GS_2eCLI_2eproto}, {
      &scc_info_RoomMessage_Structure_2eproto.base,}};

static void InitDefaultsscc_info_LEAVE_ROOM_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LEAVE_ROOM_RES_default_instance_;
    new (ptr) ::LEAVE_ROOM_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LEAVE_ROOM_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LEAVE_ROOM_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LEAVE_ROOM_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_LOGIN_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOGIN_RES_default_instance_;
    new (ptr) ::LOGIN_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOGIN_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LOGIN_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LOGIN_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_MAIL_LIST_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MAIL_LIST_RES_default_instance_;
    new (ptr) ::MAIL_LIST_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MAIL_LIST_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MAIL_LIST_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MAIL_LIST_RES_GS_2eCLI_2eproto}, {
      &scc_info_MailInfo_Structure_2eproto.base,}};

static void InitDefaultsscc_info_MPEG2TS_MESSAGE_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MPEG2TS_MESSAGE_RES_default_instance_;
    new (ptr) ::MPEG2TS_MESSAGE_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MPEG2TS_MESSAGE_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MPEG2TS_MESSAGE_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MPEG2TS_MESSAGE_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_MPEG2TS_WAKE_UP_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MPEG2TS_WAKE_UP_RES_default_instance_;
    new (ptr) ::MPEG2TS_WAKE_UP_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MPEG2TS_WAKE_UP_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MPEG2TS_WAKE_UP_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MPEG2TS_WAKE_UP_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_NEW_USER_IN_ROOM_NTY_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NEW_USER_IN_ROOM_NTY_default_instance_;
    new (ptr) ::NEW_USER_IN_ROOM_NTY();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NEW_USER_IN_ROOM_NTY::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NEW_USER_IN_ROOM_NTY_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NEW_USER_IN_ROOM_NTY_GS_2eCLI_2eproto}, {
      &scc_info_RoomUserInfo_Structure_2eproto.base,}};

static void InitDefaultsscc_info_NOTICE_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NOTICE_RES_default_instance_;
    new (ptr) ::NOTICE_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NOTICE_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NOTICE_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NOTICE_RES_GS_2eCLI_2eproto}, {
      &scc_info_NotifyInfo_Structure_2eproto.base,}};

static void InitDefaultsscc_info_PRAY_MESSAGE_REG_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PRAY_MESSAGE_REG_RES_default_instance_;
    new (ptr) ::PRAY_MESSAGE_REG_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PRAY_MESSAGE_REG_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PRAY_MESSAGE_REG_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PRAY_MESSAGE_REG_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_PRAY_MESSAGE_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PRAY_MESSAGE_RES_default_instance_;
    new (ptr) ::PRAY_MESSAGE_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PRAY_MESSAGE_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PRAY_MESSAGE_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PRAY_MESSAGE_RES_GS_2eCLI_2eproto}, {
      &scc_info_PrayInfo_Structure_2eproto.base,}};

static void InitDefaultsscc_info_QNA_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QNA_RES_default_instance_;
    new (ptr) ::QNA_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::QNA_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QNA_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QNA_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_REG_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_REG_RES_default_instance_;
    new (ptr) ::REG_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::REG_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_REG_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_REG_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_ROOM_LIST_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ROOM_LIST_RES_default_instance_;
    new (ptr) ::ROOM_LIST_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ROOM_LIST_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ROOM_LIST_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ROOM_LIST_RES_GS_2eCLI_2eproto}, {
      &scc_info_RoomInfo2_Structure_2eproto.base,}};

static void InitDefaultsscc_info_ROOM_PASS_THROUGH_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ROOM_PASS_THROUGH_RES_default_instance_;
    new (ptr) ::ROOM_PASS_THROUGH_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ROOM_PASS_THROUGH_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ROOM_PASS_THROUGH_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ROOM_PASS_THROUGH_RES_GS_2eCLI_2eproto}, {
      &scc_info_RoomMessage_Structure_2eproto.base,}};

static void InitDefaultsscc_info_VERSION_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VERSION_RES_default_instance_;
    new (ptr) ::VERSION_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VERSION_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VERSION_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VERSION_RES_GS_2eCLI_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GS_2eCLI_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_GS_2eCLI_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GS_2eCLI_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GS_2eCLI_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::VERSION_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VERSION_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VERSION_RES, id_),
  PROTOBUF_FIELD_OFFSET(::VERSION_RES, var_version_),
  PROTOBUF_FIELD_OFFSET(::VERSION_RES, var_code_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, id_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, var_index_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, var_locale_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, var_name_),
  4,
  3,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_RES, id_),
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_RES, var_name_),
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_RES, var_room_id_),
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_RES, var_code_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_RES, id_),
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_RES, var_name_),
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_RES, var_room_id_),
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_RES, var_messages_),
  3,
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::NEW_USER_IN_ROOM_NTY, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NEW_USER_IN_ROOM_NTY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NEW_USER_IN_ROOM_NTY, id_),
  PROTOBUF_FIELD_OFFSET(::NEW_USER_IN_ROOM_NTY, var_room_user_),
  PROTOBUF_FIELD_OFFSET(::NEW_USER_IN_ROOM_NTY, var_code_),
  PROTOBUF_FIELD_OFFSET(::NEW_USER_IN_ROOM_NTY, var_type_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_RES, id_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_RES, var_name_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_RES, var_index_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_RES, var_room_number_),
  4,
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_RES, id_),
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_RES, var_room_list_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_RES, id_),
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_RES, var_messages_),
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_RES, var_room_number_),
  2,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::NOTICE_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NOTICE_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NOTICE_RES, id_),
  PROTOBUF_FIELD_OFFSET(::NOTICE_RES, var_list_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_RES, id_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_RES, var_message_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_RES, var_name_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_RES, var_pos_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_RES, var_type_),
  4,
  1,
  ~0u,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_RES, id_),
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_RES, var_message_),
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_RES, var_name_),
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_RES, var_pos_),
  3,
  1,
  ~0u,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_RES, id_),
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_RES, var_list_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_REG_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_REG_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_REG_RES, id_),
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_REG_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_REG_RES, var_message_),
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_REG_RES, var_time_),
  3,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::QNA_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::QNA_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QNA_RES, id_),
  PROTOBUF_FIELD_OFFSET(::QNA_RES, var_code_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::MAIL_LIST_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MAIL_LIST_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MAIL_LIST_RES, id_),
  PROTOBUF_FIELD_OFFSET(::MAIL_LIST_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::MAIL_LIST_RES, var_list_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::REG_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::REG_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::REG_RES, id_),
  PROTOBUF_FIELD_OFFSET(::REG_RES, var_code_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CLIENT_LOGOUT_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLIENT_LOGOUT_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CLIENT_LOGOUT_RES, id_),
  PROTOBUF_FIELD_OFFSET(::CLIENT_LOGOUT_RES, var_code_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CLIENT_KICK, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLIENT_KICK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CLIENT_KICK, id_),
  PROTOBUF_FIELD_OFFSET(::CLIENT_KICK, sid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CAMERA_CONTROL_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_CONTROL_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAMERA_CONTROL_RES, id_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_CONTROL_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_CONTROL_RES, var_type_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_CONTROL_RES, var_pos_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_MESSAGE_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_MESSAGE_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_MESSAGE_RES, id_),
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_MESSAGE_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_MESSAGE_RES, var_message_),
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_MESSAGE_RES, var_type_),
  2,
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_WAKE_UP_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_WAKE_UP_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_WAKE_UP_RES, id_),
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_WAKE_UP_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_WAKE_UP_RES, var_type_),
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_WAKE_UP_RES, var_room_number_),
  3,
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::VERSION_RES)},
  { 11, 21, sizeof(::LOGIN_RES)},
  { 26, 35, sizeof(::CREATE_ROOM_RES)},
  { 39, 49, sizeof(::ENTER_ROOM_RES)},
  { 54, 63, sizeof(::NEW_USER_IN_ROOM_NTY)},
  { 67, 77, sizeof(::LEAVE_ROOM_RES)},
  { 82, 90, sizeof(::ROOM_LIST_RES)},
  { 93, 102, sizeof(::ROOM_PASS_THROUGH_RES)},
  { 106, 113, sizeof(::NOTICE_RES)},
  { 115, 126, sizeof(::BITMAP_MESSAGE_RES)},
  { 132, 142, sizeof(::AUDIO_MESSAGE_RES)},
  { 147, 155, sizeof(::PRAY_MESSAGE_RES)},
  { 158, 167, sizeof(::PRAY_MESSAGE_REG_RES)},
  { 171, 178, sizeof(::QNA_RES)},
  { 180, 188, sizeof(::MAIL_LIST_RES)},
  { 191, 198, sizeof(::REG_RES)},
  { 200, 207, sizeof(::CLIENT_LOGOUT_RES)},
  { 209, 216, sizeof(::CLIENT_KICK)},
  { 218, 227, sizeof(::CAMERA_CONTROL_RES)},
  { 231, 240, sizeof(::MPEG2TS_MESSAGE_RES)},
  { 244, 253, sizeof(::MPEG2TS_WAKE_UP_RES)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VERSION_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOGIN_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CREATE_ROOM_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ENTER_ROOM_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NEW_USER_IN_ROOM_NTY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LEAVE_ROOM_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ROOM_LIST_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ROOM_PASS_THROUGH_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NOTICE_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BITMAP_MESSAGE_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AUDIO_MESSAGE_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PRAY_MESSAGE_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PRAY_MESSAGE_REG_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QNA_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MAIL_LIST_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_REG_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CLIENT_LOGOUT_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CLIENT_KICK_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAMERA_CONTROL_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MPEG2TS_MESSAGE_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MPEG2TS_WAKE_UP_RES_default_instance_),
};

const char descriptor_table_protodef_GS_2eCLI_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014GS.CLI.proto\032\nEnum.proto\032\017Structure.pr"
  "oto\"k\n\013VERSION_RES\022)\n\002id\030\001 \001(\0162\t.PROTOCO"
  "L:\022ID_PKT_VERSION_RES\022\023\n\013var_version\030\002 \001"
  "(\002\022\034\n\010var_code\030\003 \001(\0162\n.ErrorCode\"\213\001\n\tLOG"
  "IN_RES\022\'\n\002id\030\001 \001(\0162\t.PROTOCOL:\020ID_PKT_LO"
  "GIN_RES\022\034\n\010var_code\030\002 \001(\0162\n.ErrorCode\022\021\n"
  "\tvar_index\030\003 \001(\003\022\022\n\nvar_locale\030\004 \001(\t\022\020\n\010"
  "var_name\030\005 \001(\t\"\205\001\n\017CREATE_ROOM_RES\022-\n\002id"
  "\030\001 \001(\0162\t.PROTOCOL:\026ID_PKT_CREATE_ROOM_RE"
  "S\022\020\n\010var_name\030\002 \001(\t\022\023\n\013var_room_id\030\003 \001(\005"
  "\022\034\n\010var_code\030\004 \001(\0162\n.ErrorCode\"\247\001\n\016ENTER"
  "_ROOM_RES\022,\n\002id\030\001 \001(\0162\t.PROTOCOL:\025ID_PKT"
  "_ENTER_ROOM_RES\022\020\n\010var_name\030\002 \001(\t\022\023\n\013var"
  "_room_id\030\003 \001(\005\022\034\n\010var_code\030\004 \001(\0162\n.Error"
  "Code\022\"\n\014var_messages\030\005 \003(\0132\014.RoomMessage"
  "\"\240\001\n\024NEW_USER_IN_ROOM_NTY\0222\n\002id\030\001 \001(\0162\t."
  "PROTOCOL:\033ID_PKT_NEW_USER_IN_ROOM_NTY\022$\n"
  "\rvar_room_user\030\002 \001(\0132\r.RoomUserInfo\022\034\n\010v"
  "ar_code\030\003 \001(\0162\n.ErrorCode\022\020\n\010var_type\030\004 "
  "\001(\005\"\232\001\n\016LEAVE_ROOM_RES\022,\n\002id\030\001 \001(\0162\t.PRO"
  "TOCOL:\025ID_PKT_LEAVE_ROOM_RES\022\020\n\010var_name"
  "\030\002 \001(\t\022\034\n\010var_code\030\003 \001(\0162\n.ErrorCode\022\021\n\t"
  "var_index\030\004 \001(\003\022\027\n\017var_room_number\030\005 \001(\005"
  "\"}\n\rROOM_LIST_RES\022+\n\002id\030\001 \001(\0162\t.PROTOCOL"
  ":\024ID_PKT_ROOM_LIST_RES\022\034\n\010var_code\030\002 \001(\016"
  "2\n.ErrorCode\022!\n\rvar_room_list\030\003 \003(\0132\n.Ro"
  "omInfo2\"\247\001\n\025ROOM_PASS_THROUGH_RES\0223\n\002id\030"
  "\001 \001(\0162\t.PROTOCOL:\034ID_PKT_ROOM_PASS_THROU"
  "GH_RES\022\034\n\010var_code\030\002 \001(\0162\n.ErrorCode\022\"\n\014"
  "var_messages\030\003 \003(\0132\014.RoomMessage\022\027\n\017var_"
  "room_number\030\004 \001(\005\"U\n\nNOTICE_RES\022(\n\002id\030\001 "
  "\001(\0162\t.PROTOCOL:\021ID_PKT_NOTICE_RES\022\035\n\010var"
  "_list\030\002 \003(\0132\013.NotifyInfo\"\256\001\n\022BITMAP_MESS"
  "AGE_RES\0220\n\002id\030\001 \001(\0162\t.PROTOCOL:\031ID_PKT_B"
  "ITMAP_MESSAGE_RES\022\034\n\010var_code\030\002 \001(\0162\n.Er"
  "rorCode\022\023\n\013var_message\030\003 \003(\014\022\020\n\010var_name"
  "\030\004 \001(\014\022\017\n\007var_pos\030\005 \001(\005\022\020\n\010var_type\030\006 \001("
  "\005\"\232\001\n\021AUDIO_MESSAGE_RES\022/\n\002id\030\001 \001(\0162\t.PR"
  "OTOCOL:\030ID_PKT_AUDIO_MESSAGE_RES\022\034\n\010var_"
  "code\030\002 \001(\0162\n.ErrorCode\022\023\n\013var_message\030\003 "
  "\003(\014\022\020\n\010var_name\030\004 \001(\014\022\017\n\007var_pos\030\005 \001(\005\"}"
  "\n\020PRAY_MESSAGE_RES\022.\n\002id\030\001 \001(\0162\t.PROTOCO"
  "L:\027ID_PKT_PRAY_MESSAGE_RES\022\034\n\010var_code\030\002"
  " \001(\0162\n.ErrorCode\022\033\n\010var_list\030\003 \003(\0132\t.Pra"
  "yInfo\"\217\001\n\024PRAY_MESSAGE_REG_RES\0222\n\002id\030\001 \001"
  "(\0162\t.PROTOCOL:\033ID_PKT_PRAY_MESSAGE_REG_R"
  "ES\022\034\n\010var_code\030\002 \001(\0162\n.ErrorCode\022\023\n\013var_"
  "message\030\003 \001(\t\022\020\n\010var_time\030\004 \001(\t\"N\n\007QNA_R"
  "ES\022%\n\002id\030\001 \001(\0162\t.PROTOCOL:\016ID_PKT_QNA_RE"
  "S\022\034\n\010var_code\030\002 \001(\0162\n.ErrorCode\"w\n\rMAIL_"
  "LIST_RES\022+\n\002id\030\001 \001(\0162\t.PROTOCOL:\024ID_PKT_"
  "MAIL_LIST_RES\022\034\n\010var_code\030\002 \001(\0162\n.ErrorC"
  "ode\022\033\n\010var_list\030\003 \003(\0132\t.MailInfo\"N\n\007REG_"
  "RES\022%\n\002id\030\001 \001(\0162\t.PROTOCOL:\016ID_PKT_REG_R"
  "ES\022\034\n\010var_code\030\002 \001(\0162\n.ErrorCode\"b\n\021CLIE"
  "NT_LOGOUT_RES\022/\n\002id\030\001 \001(\0162\t.PROTOCOL:\030ID"
  "_PKT_CLIENT_LOGOUT_RES\022\034\n\010var_code\030\002 \001(\016"
  "2\n.ErrorCode\"E\n\013CLIENT_KICK\022)\n\002id\030\001 \001(\0162"
  "\t.PROTOCOL:\022ID_PKT_CLIENT_KICK\022\013\n\003sid\030\002 "
  "\001(\005\"\227\001\n\022CAMERA_CONTROL_RES\022,\n\002id\030\001 \001(\0162\t"
  ".PROTOCOL:\025ID_PKT_CAMERA_CONTROL\022\034\n\010var_"
  "code\030\002 \001(\0162\n.ErrorCode\022$\n\010var_type\030\003 \001(\016"
  "2\022.CameraControlType\022\017\n\007var_pos\030\004 \001(\005\"\215\001"
  "\n\023MPEG2TS_MESSAGE_RES\0221\n\002id\030\001 \001(\0162\t.PROT"
  "OCOL:\032ID_PKT_MPEG2TS_MESSAGE_RES\022\034\n\010var_"
  "code\030\002 \001(\0162\n.ErrorCode\022\023\n\013var_message\030\003 "
  "\003(\014\022\020\n\010var_type\030\004 \001(\005\"\221\001\n\023MPEG2TS_WAKE_U"
  "P_RES\0221\n\002id\030\001 \001(\0162\t.PROTOCOL:\032ID_PKT_MPE"
  "G2TS_WAKE_UP_RES\022\034\n\010var_code\030\002 \001(\0162\n.Err"
  "orCode\022\020\n\010var_type\030\003 \001(\005\022\027\n\017var_room_num"
  "ber\030\004 \001(\005B\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GS_2eCLI_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Structure_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GS_2eCLI_2eproto_sccs[21] = {
  &scc_info_AUDIO_MESSAGE_RES_GS_2eCLI_2eproto.base,
  &scc_info_BITMAP_MESSAGE_RES_GS_2eCLI_2eproto.base,
  &scc_info_CAMERA_CONTROL_RES_GS_2eCLI_2eproto.base,
  &scc_info_CLIENT_KICK_GS_2eCLI_2eproto.base,
  &scc_info_CLIENT_LOGOUT_RES_GS_2eCLI_2eproto.base,
  &scc_info_CREATE_ROOM_RES_GS_2eCLI_2eproto.base,
  &scc_info_ENTER_ROOM_RES_GS_2eCLI_2eproto.base,
  &scc_info_LEAVE_ROOM_RES_GS_2eCLI_2eproto.base,
  &scc_info_LOGIN_RES_GS_2eCLI_2eproto.base,
  &scc_info_MAIL_LIST_RES_GS_2eCLI_2eproto.base,
  &scc_info_MPEG2TS_MESSAGE_RES_GS_2eCLI_2eproto.base,
  &scc_info_MPEG2TS_WAKE_UP_RES_GS_2eCLI_2eproto.base,
  &scc_info_NEW_USER_IN_ROOM_NTY_GS_2eCLI_2eproto.base,
  &scc_info_NOTICE_RES_GS_2eCLI_2eproto.base,
  &scc_info_PRAY_MESSAGE_REG_RES_GS_2eCLI_2eproto.base,
  &scc_info_PRAY_MESSAGE_RES_GS_2eCLI_2eproto.base,
  &scc_info_QNA_RES_GS_2eCLI_2eproto.base,
  &scc_info_REG_RES_GS_2eCLI_2eproto.base,
  &scc_info_ROOM_LIST_RES_GS_2eCLI_2eproto.base,
  &scc_info_ROOM_PASS_THROUGH_RES_GS_2eCLI_2eproto.base,
  &scc_info_VERSION_RES_GS_2eCLI_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GS_2eCLI_2eproto_once;
static bool descriptor_table_GS_2eCLI_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GS_2eCLI_2eproto = {
  &descriptor_table_GS_2eCLI_2eproto_initialized, descriptor_table_protodef_GS_2eCLI_2eproto, "GS.CLI.proto", 2813,
  &descriptor_table_GS_2eCLI_2eproto_once, descriptor_table_GS_2eCLI_2eproto_sccs, descriptor_table_GS_2eCLI_2eproto_deps, 21, 2,
  schemas, file_default_instances, TableStruct_GS_2eCLI_2eproto::offsets,
  file_level_metadata_GS_2eCLI_2eproto, 21, file_level_enum_descriptors_GS_2eCLI_2eproto, file_level_service_descriptors_GS_2eCLI_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GS_2eCLI_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GS_2eCLI_2eproto), true);

// ===================================================================

void VERSION_RES::InitAsDefaultInstance() {
}
class VERSION_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<VERSION_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VERSION_RES::VERSION_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VERSION_RES)
}
VERSION_RES::VERSION_RES(const VERSION_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_version_, &from.var_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_version_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:VERSION_RES)
}

void VERSION_RES::SharedCtor() {
  ::memset(&var_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_code_) -
      reinterpret_cast<char*>(&var_version_)) + sizeof(var_code_));
  id_ = 1;
}

VERSION_RES::~VERSION_RES() {
  // @@protoc_insertion_point(destructor:VERSION_RES)
  SharedDtor();
}

void VERSION_RES::SharedDtor() {
}

void VERSION_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VERSION_RES& VERSION_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VERSION_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void VERSION_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:VERSION_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&var_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_code_) -
        reinterpret_cast<char*>(&var_version_)) + sizeof(var_code_));
    id_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VERSION_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float var_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_var_version(&has_bits);
          var_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VERSION_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VERSION_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_RES];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional float var_version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_var_version(), target);
  }

  // optional .ErrorCode var_code = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_var_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VERSION_RES)
  return target;
}

size_t VERSION_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VERSION_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float var_version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional .ErrorCode var_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_RES];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VERSION_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VERSION_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const VERSION_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VERSION_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VERSION_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VERSION_RES)
    MergeFrom(*source);
  }
}

void VERSION_RES::MergeFrom(const VERSION_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VERSION_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      var_version_ = from.var_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VERSION_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VERSION_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VERSION_RES::CopyFrom(const VERSION_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VERSION_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VERSION_RES::IsInitialized() const {
  return true;
}

void VERSION_RES::InternalSwap(VERSION_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_version_, other->var_version_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VERSION_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOGIN_RES::InitAsDefaultInstance() {
}
class LOGIN_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<LOGIN_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LOGIN_RES::LOGIN_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LOGIN_RES)
}
LOGIN_RES::LOGIN_RES(const LOGIN_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_locale()) {
    var_locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_locale_);
  }
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  ::memcpy(&var_index_, &from.var_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_index_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:LOGIN_RES)
}

void LOGIN_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOGIN_RES_GS_2eCLI_2eproto.base);
  var_locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_code_) -
      reinterpret_cast<char*>(&var_index_)) + sizeof(var_code_));
  id_ = 3;
}

LOGIN_RES::~LOGIN_RES() {
  // @@protoc_insertion_point(destructor:LOGIN_RES)
  SharedDtor();
}

void LOGIN_RES::SharedDtor() {
  var_locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LOGIN_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOGIN_RES& LOGIN_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOGIN_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void LOGIN_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:LOGIN_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_locale_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      var_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&var_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_code_) -
        reinterpret_cast<char*>(&var_index_)) + sizeof(var_code_));
    id_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LOGIN_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 var_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_index(&has_bits);
          var_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string var_locale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_var_locale();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOGIN_RES.var_locale");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string var_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOGIN_RES.var_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOGIN_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOGIN_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_RES];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // optional int64 var_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_var_index(), target);
  }

  // optional string var_locale = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_locale().data(), static_cast<int>(this->_internal_var_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "LOGIN_RES.var_locale");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_var_locale(), target);
  }

  // optional string var_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "LOGIN_RES.var_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_var_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOGIN_RES)
  return target;
}

size_t LOGIN_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOGIN_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string var_locale = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_var_locale());
    }

    // optional string var_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_var_name());
    }

    // optional int64 var_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_var_index());
    }

    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_RES];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOGIN_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOGIN_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const LOGIN_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOGIN_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOGIN_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOGIN_RES)
    MergeFrom(*source);
  }
}

void LOGIN_RES::MergeFrom(const LOGIN_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOGIN_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_locale_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      var_index_ = from.var_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LOGIN_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOGIN_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOGIN_RES::CopyFrom(const LOGIN_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOGIN_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOGIN_RES::IsInitialized() const {
  return true;
}

void LOGIN_RES::InternalSwap(LOGIN_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_locale_.Swap(&other->var_locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_index_, other->var_index_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LOGIN_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CREATE_ROOM_RES::InitAsDefaultInstance() {
}
class CREATE_ROOM_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<CREATE_ROOM_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CREATE_ROOM_RES::CREATE_ROOM_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CREATE_ROOM_RES)
}
CREATE_ROOM_RES::CREATE_ROOM_RES(const CREATE_ROOM_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  ::memcpy(&var_room_id_, &from.var_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_room_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:CREATE_ROOM_RES)
}

void CREATE_ROOM_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CREATE_ROOM_RES_GS_2eCLI_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_code_) -
      reinterpret_cast<char*>(&var_room_id_)) + sizeof(var_code_));
  id_ = 5;
}

CREATE_ROOM_RES::~CREATE_ROOM_RES() {
  // @@protoc_insertion_point(destructor:CREATE_ROOM_RES)
  SharedDtor();
}

void CREATE_ROOM_RES::SharedDtor() {
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CREATE_ROOM_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CREATE_ROOM_RES& CREATE_ROOM_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CREATE_ROOM_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void CREATE_ROOM_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:CREATE_ROOM_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    var_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&var_room_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_code_) -
        reinterpret_cast<char*>(&var_room_id_)) + sizeof(var_code_));
    id_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CREATE_ROOM_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string var_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CREATE_ROOM_RES.var_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_room_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_room_id(&has_bits);
          var_room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CREATE_ROOM_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CREATE_ROOM_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_RES];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional string var_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CREATE_ROOM_RES.var_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_name(), target);
  }

  // optional int32 var_room_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_room_id(), target);
  }

  // optional .ErrorCode var_code = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_var_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CREATE_ROOM_RES)
  return target;
}

size_t CREATE_ROOM_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CREATE_ROOM_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string var_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_var_name());
    }

    // optional int32 var_room_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_room_id());
    }

    // optional .ErrorCode var_code = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_RES];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CREATE_ROOM_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CREATE_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const CREATE_ROOM_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CREATE_ROOM_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CREATE_ROOM_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CREATE_ROOM_RES)
    MergeFrom(*source);
  }
}

void CREATE_ROOM_RES::MergeFrom(const CREATE_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CREATE_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      var_room_id_ = from.var_room_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CREATE_ROOM_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CREATE_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CREATE_ROOM_RES::CopyFrom(const CREATE_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CREATE_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CREATE_ROOM_RES::IsInitialized() const {
  return true;
}

void CREATE_ROOM_RES::InternalSwap(CREATE_ROOM_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_room_id_, other->var_room_id_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CREATE_ROOM_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ENTER_ROOM_RES::InitAsDefaultInstance() {
}
class ENTER_ROOM_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<ENTER_ROOM_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void ENTER_ROOM_RES::clear_var_messages() {
  var_messages_.Clear();
}
ENTER_ROOM_RES::ENTER_ROOM_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ENTER_ROOM_RES)
}
ENTER_ROOM_RES::ENTER_ROOM_RES(const ENTER_ROOM_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_messages_(from.var_messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  ::memcpy(&var_room_id_, &from.var_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_room_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ENTER_ROOM_RES)
}

void ENTER_ROOM_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ENTER_ROOM_RES_GS_2eCLI_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_code_) -
      reinterpret_cast<char*>(&var_room_id_)) + sizeof(var_code_));
  id_ = 7;
}

ENTER_ROOM_RES::~ENTER_ROOM_RES() {
  // @@protoc_insertion_point(destructor:ENTER_ROOM_RES)
  SharedDtor();
}

void ENTER_ROOM_RES::SharedDtor() {
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ENTER_ROOM_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ENTER_ROOM_RES& ENTER_ROOM_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ENTER_ROOM_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void ENTER_ROOM_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:ENTER_ROOM_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_messages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    var_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&var_room_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_code_) -
        reinterpret_cast<char*>(&var_room_id_)) + sizeof(var_code_));
    id_ = 7;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ENTER_ROOM_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string var_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ENTER_ROOM_RES.var_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_room_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_room_id(&has_bits);
          var_room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .RoomMessage var_messages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_var_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENTER_ROOM_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ENTER_ROOM_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_RES];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional string var_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ENTER_ROOM_RES.var_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_name(), target);
  }

  // optional int32 var_room_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_room_id(), target);
  }

  // optional .ErrorCode var_code = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_var_code(), target);
  }

  // repeated .RoomMessage var_messages = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_var_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_var_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ENTER_ROOM_RES)
  return target;
}

size_t ENTER_ROOM_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ENTER_ROOM_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoomMessage var_messages = 5;
  total_size += 1UL * this->_internal_var_messages_size();
  for (const auto& msg : this->var_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string var_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_var_name());
    }

    // optional int32 var_room_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_room_id());
    }

    // optional .ErrorCode var_code = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_RES];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENTER_ROOM_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ENTER_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const ENTER_ROOM_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENTER_ROOM_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ENTER_ROOM_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ENTER_ROOM_RES)
    MergeFrom(*source);
  }
}

void ENTER_ROOM_RES::MergeFrom(const ENTER_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ENTER_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_messages_.MergeFrom(from.var_messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      var_room_id_ = from.var_room_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ENTER_ROOM_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ENTER_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENTER_ROOM_RES::CopyFrom(const ENTER_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ENTER_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENTER_ROOM_RES::IsInitialized() const {
  return true;
}

void ENTER_ROOM_RES::InternalSwap(ENTER_ROOM_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_messages_.InternalSwap(&other->var_messages_);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_room_id_, other->var_room_id_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ENTER_ROOM_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NEW_USER_IN_ROOM_NTY::InitAsDefaultInstance() {
  ::_NEW_USER_IN_ROOM_NTY_default_instance_._instance.get_mutable()->var_room_user_ = const_cast< ::RoomUserInfo*>(
      ::RoomUserInfo::internal_default_instance());
}
class NEW_USER_IN_ROOM_NTY::_Internal {
 public:
  using HasBits = decltype(std::declval<NEW_USER_IN_ROOM_NTY>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::RoomUserInfo& var_room_user(const NEW_USER_IN_ROOM_NTY* msg);
  static void set_has_var_room_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::RoomUserInfo&
NEW_USER_IN_ROOM_NTY::_Internal::var_room_user(const NEW_USER_IN_ROOM_NTY* msg) {
  return *msg->var_room_user_;
}
void NEW_USER_IN_ROOM_NTY::clear_var_room_user() {
  if (var_room_user_ != nullptr) var_room_user_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
NEW_USER_IN_ROOM_NTY::NEW_USER_IN_ROOM_NTY()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NEW_USER_IN_ROOM_NTY)
}
NEW_USER_IN_ROOM_NTY::NEW_USER_IN_ROOM_NTY(const NEW_USER_IN_ROOM_NTY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_var_room_user()) {
    var_room_user_ = new ::RoomUserInfo(*from.var_room_user_);
  } else {
    var_room_user_ = nullptr;
  }
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:NEW_USER_IN_ROOM_NTY)
}

void NEW_USER_IN_ROOM_NTY::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NEW_USER_IN_ROOM_NTY_GS_2eCLI_2eproto.base);
  ::memset(&var_room_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_type_) -
      reinterpret_cast<char*>(&var_room_user_)) + sizeof(var_type_));
  id_ = 12;
}

NEW_USER_IN_ROOM_NTY::~NEW_USER_IN_ROOM_NTY() {
  // @@protoc_insertion_point(destructor:NEW_USER_IN_ROOM_NTY)
  SharedDtor();
}

void NEW_USER_IN_ROOM_NTY::SharedDtor() {
  if (this != internal_default_instance()) delete var_room_user_;
}

void NEW_USER_IN_ROOM_NTY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NEW_USER_IN_ROOM_NTY& NEW_USER_IN_ROOM_NTY::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NEW_USER_IN_ROOM_NTY_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void NEW_USER_IN_ROOM_NTY::Clear() {
// @@protoc_insertion_point(message_clear_start:NEW_USER_IN_ROOM_NTY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(var_room_user_ != nullptr);
    var_room_user_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&var_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_type_) -
        reinterpret_cast<char*>(&var_code_)) + sizeof(var_type_));
    id_ = 12;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NEW_USER_IN_ROOM_NTY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_NEW_USER_IN_ROOM_NTY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .RoomUserInfo var_room_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_room_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 var_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_type(&has_bits);
          var_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NEW_USER_IN_ROOM_NTY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NEW_USER_IN_ROOM_NTY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_NEW_USER_IN_ROOM_NTY];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .RoomUserInfo var_room_user = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::var_room_user(this), target, stream);
  }

  // optional .ErrorCode var_code = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_var_code(), target);
  }

  // optional int32 var_type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NEW_USER_IN_ROOM_NTY)
  return target;
}

size_t NEW_USER_IN_ROOM_NTY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NEW_USER_IN_ROOM_NTY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .RoomUserInfo var_room_user = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *var_room_user_);
    }

    // optional .ErrorCode var_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional int32 var_type = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_type());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_NEW_USER_IN_ROOM_NTY];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NEW_USER_IN_ROOM_NTY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NEW_USER_IN_ROOM_NTY)
  GOOGLE_DCHECK_NE(&from, this);
  const NEW_USER_IN_ROOM_NTY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NEW_USER_IN_ROOM_NTY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NEW_USER_IN_ROOM_NTY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NEW_USER_IN_ROOM_NTY)
    MergeFrom(*source);
  }
}

void NEW_USER_IN_ROOM_NTY::MergeFrom(const NEW_USER_IN_ROOM_NTY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NEW_USER_IN_ROOM_NTY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_var_room_user()->::RoomUserInfo::MergeFrom(from._internal_var_room_user());
    }
    if (cached_has_bits & 0x00000002u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_type_ = from.var_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NEW_USER_IN_ROOM_NTY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NEW_USER_IN_ROOM_NTY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NEW_USER_IN_ROOM_NTY::CopyFrom(const NEW_USER_IN_ROOM_NTY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NEW_USER_IN_ROOM_NTY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NEW_USER_IN_ROOM_NTY::IsInitialized() const {
  return true;
}

void NEW_USER_IN_ROOM_NTY::InternalSwap(NEW_USER_IN_ROOM_NTY* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_room_user_, other->var_room_user_);
  swap(var_code_, other->var_code_);
  swap(var_type_, other->var_type_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NEW_USER_IN_ROOM_NTY::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LEAVE_ROOM_RES::InitAsDefaultInstance() {
}
class LEAVE_ROOM_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<LEAVE_ROOM_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_room_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LEAVE_ROOM_RES::LEAVE_ROOM_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LEAVE_ROOM_RES)
}
LEAVE_ROOM_RES::LEAVE_ROOM_RES(const LEAVE_ROOM_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  ::memcpy(&var_index_, &from.var_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_index_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:LEAVE_ROOM_RES)
}

void LEAVE_ROOM_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LEAVE_ROOM_RES_GS_2eCLI_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_room_number_) -
      reinterpret_cast<char*>(&var_index_)) + sizeof(var_room_number_));
  id_ = 9;
}

LEAVE_ROOM_RES::~LEAVE_ROOM_RES() {
  // @@protoc_insertion_point(destructor:LEAVE_ROOM_RES)
  SharedDtor();
}

void LEAVE_ROOM_RES::SharedDtor() {
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LEAVE_ROOM_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LEAVE_ROOM_RES& LEAVE_ROOM_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LEAVE_ROOM_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void LEAVE_ROOM_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:LEAVE_ROOM_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    var_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&var_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_room_number_) -
        reinterpret_cast<char*>(&var_index_)) + sizeof(var_room_number_));
    id_ = 9;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LEAVE_ROOM_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string var_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LEAVE_ROOM_RES.var_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 var_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_index(&has_bits);
          var_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_room_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_var_room_number(&has_bits);
          var_room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LEAVE_ROOM_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LEAVE_ROOM_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_RES];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional string var_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "LEAVE_ROOM_RES.var_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_name(), target);
  }

  // optional .ErrorCode var_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_var_code(), target);
  }

  // optional int64 var_index = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_index(), target);
  }

  // optional int32 var_room_number = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_var_room_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LEAVE_ROOM_RES)
  return target;
}

size_t LEAVE_ROOM_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LEAVE_ROOM_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string var_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_var_name());
    }

    // optional int64 var_index = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_var_index());
    }

    // optional .ErrorCode var_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional int32 var_room_number = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_room_number());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_RES];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LEAVE_ROOM_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LEAVE_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const LEAVE_ROOM_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LEAVE_ROOM_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LEAVE_ROOM_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LEAVE_ROOM_RES)
    MergeFrom(*source);
  }
}

void LEAVE_ROOM_RES::MergeFrom(const LEAVE_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LEAVE_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      var_index_ = from.var_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      var_room_number_ = from.var_room_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LEAVE_ROOM_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LEAVE_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LEAVE_ROOM_RES::CopyFrom(const LEAVE_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LEAVE_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LEAVE_ROOM_RES::IsInitialized() const {
  return true;
}

void LEAVE_ROOM_RES::InternalSwap(LEAVE_ROOM_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_index_, other->var_index_);
  swap(var_code_, other->var_code_);
  swap(var_room_number_, other->var_room_number_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LEAVE_ROOM_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROOM_LIST_RES::InitAsDefaultInstance() {
}
class ROOM_LIST_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<ROOM_LIST_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void ROOM_LIST_RES::clear_var_room_list() {
  var_room_list_.Clear();
}
ROOM_LIST_RES::ROOM_LIST_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ROOM_LIST_RES)
}
ROOM_LIST_RES::ROOM_LIST_RES(const ROOM_LIST_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_room_list_(from.var_room_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ROOM_LIST_RES)
}

void ROOM_LIST_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ROOM_LIST_RES_GS_2eCLI_2eproto.base);
  var_code_ = 0;
  id_ = 14;
}

ROOM_LIST_RES::~ROOM_LIST_RES() {
  // @@protoc_insertion_point(destructor:ROOM_LIST_RES)
  SharedDtor();
}

void ROOM_LIST_RES::SharedDtor() {
}

void ROOM_LIST_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROOM_LIST_RES& ROOM_LIST_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROOM_LIST_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void ROOM_LIST_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:ROOM_LIST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_room_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_code_ = 0;
    id_ = 14;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ROOM_LIST_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .RoomInfo2 var_room_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_var_room_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROOM_LIST_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ROOM_LIST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_RES];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // repeated .RoomInfo2 var_room_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_var_room_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_var_room_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ROOM_LIST_RES)
  return target;
}

size_t ROOM_LIST_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ROOM_LIST_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoomInfo2 var_room_list = 3;
  total_size += 1UL * this->_internal_var_room_list_size();
  for (const auto& msg : this->var_room_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_RES];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROOM_LIST_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ROOM_LIST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const ROOM_LIST_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROOM_LIST_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ROOM_LIST_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ROOM_LIST_RES)
    MergeFrom(*source);
  }
}

void ROOM_LIST_RES::MergeFrom(const ROOM_LIST_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ROOM_LIST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_room_list_.MergeFrom(from.var_room_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROOM_LIST_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ROOM_LIST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROOM_LIST_RES::CopyFrom(const ROOM_LIST_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ROOM_LIST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROOM_LIST_RES::IsInitialized() const {
  return true;
}

void ROOM_LIST_RES::InternalSwap(ROOM_LIST_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_room_list_.InternalSwap(&other->var_room_list_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROOM_LIST_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROOM_PASS_THROUGH_RES::InitAsDefaultInstance() {
}
class ROOM_PASS_THROUGH_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<ROOM_PASS_THROUGH_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_room_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void ROOM_PASS_THROUGH_RES::clear_var_messages() {
  var_messages_.Clear();
}
ROOM_PASS_THROUGH_RES::ROOM_PASS_THROUGH_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ROOM_PASS_THROUGH_RES)
}
ROOM_PASS_THROUGH_RES::ROOM_PASS_THROUGH_RES(const ROOM_PASS_THROUGH_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_messages_(from.var_messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ROOM_PASS_THROUGH_RES)
}

void ROOM_PASS_THROUGH_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ROOM_PASS_THROUGH_RES_GS_2eCLI_2eproto.base);
  ::memset(&var_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_room_number_) -
      reinterpret_cast<char*>(&var_code_)) + sizeof(var_room_number_));
  id_ = 18;
}

ROOM_PASS_THROUGH_RES::~ROOM_PASS_THROUGH_RES() {
  // @@protoc_insertion_point(destructor:ROOM_PASS_THROUGH_RES)
  SharedDtor();
}

void ROOM_PASS_THROUGH_RES::SharedDtor() {
}

void ROOM_PASS_THROUGH_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROOM_PASS_THROUGH_RES& ROOM_PASS_THROUGH_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROOM_PASS_THROUGH_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void ROOM_PASS_THROUGH_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:ROOM_PASS_THROUGH_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_messages_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&var_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_room_number_) -
        reinterpret_cast<char*>(&var_code_)) + sizeof(var_room_number_));
    id_ = 18;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ROOM_PASS_THROUGH_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .RoomMessage var_messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_var_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 var_room_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_room_number(&has_bits);
          var_room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROOM_PASS_THROUGH_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ROOM_PASS_THROUGH_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_RES];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // repeated .RoomMessage var_messages = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_var_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_var_messages(i), target, stream);
  }

  // optional int32 var_room_number = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_room_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ROOM_PASS_THROUGH_RES)
  return target;
}

size_t ROOM_PASS_THROUGH_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ROOM_PASS_THROUGH_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoomMessage var_messages = 3;
  total_size += 1UL * this->_internal_var_messages_size();
  for (const auto& msg : this->var_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional int32 var_room_number = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_room_number());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_RES];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROOM_PASS_THROUGH_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ROOM_PASS_THROUGH_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const ROOM_PASS_THROUGH_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROOM_PASS_THROUGH_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ROOM_PASS_THROUGH_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ROOM_PASS_THROUGH_RES)
    MergeFrom(*source);
  }
}

void ROOM_PASS_THROUGH_RES::MergeFrom(const ROOM_PASS_THROUGH_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ROOM_PASS_THROUGH_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_messages_.MergeFrom(from.var_messages_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      var_room_number_ = from.var_room_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROOM_PASS_THROUGH_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ROOM_PASS_THROUGH_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROOM_PASS_THROUGH_RES::CopyFrom(const ROOM_PASS_THROUGH_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ROOM_PASS_THROUGH_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROOM_PASS_THROUGH_RES::IsInitialized() const {
  return true;
}

void ROOM_PASS_THROUGH_RES::InternalSwap(ROOM_PASS_THROUGH_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_messages_.InternalSwap(&other->var_messages_);
  swap(var_code_, other->var_code_);
  swap(var_room_number_, other->var_room_number_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROOM_PASS_THROUGH_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NOTICE_RES::InitAsDefaultInstance() {
}
class NOTICE_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<NOTICE_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void NOTICE_RES::clear_var_list() {
  var_list_.Clear();
}
NOTICE_RES::NOTICE_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NOTICE_RES)
}
NOTICE_RES::NOTICE_RES(const NOTICE_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_list_(from.var_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:NOTICE_RES)
}

void NOTICE_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NOTICE_RES_GS_2eCLI_2eproto.base);
  id_ = 20;
}

NOTICE_RES::~NOTICE_RES() {
  // @@protoc_insertion_point(destructor:NOTICE_RES)
  SharedDtor();
}

void NOTICE_RES::SharedDtor() {
}

void NOTICE_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NOTICE_RES& NOTICE_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NOTICE_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void NOTICE_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:NOTICE_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_list_.Clear();
  id_ = 20;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NOTICE_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .NotifyInfo var_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_var_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NOTICE_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NOTICE_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_RES];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // repeated .NotifyInfo var_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_var_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_var_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NOTICE_RES)
  return target;
}

size_t NOTICE_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NOTICE_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NotifyInfo var_list = 2;
  total_size += 1UL * this->_internal_var_list_size();
  for (const auto& msg : this->var_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_RES];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NOTICE_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NOTICE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const NOTICE_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NOTICE_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NOTICE_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NOTICE_RES)
    MergeFrom(*source);
  }
}

void NOTICE_RES::MergeFrom(const NOTICE_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NOTICE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_list_.MergeFrom(from.var_list_);
  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void NOTICE_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NOTICE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NOTICE_RES::CopyFrom(const NOTICE_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NOTICE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NOTICE_RES::IsInitialized() const {
  return true;
}

void NOTICE_RES::InternalSwap(NOTICE_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_list_.InternalSwap(&other->var_list_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NOTICE_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BITMAP_MESSAGE_RES::InitAsDefaultInstance() {
}
class BITMAP_MESSAGE_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<BITMAP_MESSAGE_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BITMAP_MESSAGE_RES::BITMAP_MESSAGE_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BITMAP_MESSAGE_RES)
}
BITMAP_MESSAGE_RES::BITMAP_MESSAGE_RES(const BITMAP_MESSAGE_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_message_(from.var_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:BITMAP_MESSAGE_RES)
}

void BITMAP_MESSAGE_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BITMAP_MESSAGE_RES_GS_2eCLI_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_type_) -
      reinterpret_cast<char*>(&var_code_)) + sizeof(var_type_));
  id_ = 11;
}

BITMAP_MESSAGE_RES::~BITMAP_MESSAGE_RES() {
  // @@protoc_insertion_point(destructor:BITMAP_MESSAGE_RES)
  SharedDtor();
}

void BITMAP_MESSAGE_RES::SharedDtor() {
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BITMAP_MESSAGE_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BITMAP_MESSAGE_RES& BITMAP_MESSAGE_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BITMAP_MESSAGE_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void BITMAP_MESSAGE_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:BITMAP_MESSAGE_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    var_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&var_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_type_) -
        reinterpret_cast<char*>(&var_code_)) + sizeof(var_type_));
    id_ = 11;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BITMAP_MESSAGE_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated bytes var_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_var_message();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes var_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_var_pos(&has_bits);
          var_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_var_type(&has_bits);
          var_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BITMAP_MESSAGE_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BITMAP_MESSAGE_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_RES];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // repeated bytes var_message = 3;
  for (int i = 0, n = this->_internal_var_message_size(); i < n; i++) {
    const auto& s = this->_internal_var_message(i);
    target = stream->WriteBytes(3, s, target);
  }

  // optional bytes var_name = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_var_name(), target);
  }

  // optional int32 var_pos = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_var_pos(), target);
  }

  // optional int32 var_type = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_var_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BITMAP_MESSAGE_RES)
  return target;
}

size_t BITMAP_MESSAGE_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BITMAP_MESSAGE_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes var_message = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(var_message_.size());
  for (int i = 0, n = var_message_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      var_message_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes var_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_var_name());
    }

    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional int32 var_pos = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_pos());
    }

    // optional int32 var_type = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_type());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_RES];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BITMAP_MESSAGE_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BITMAP_MESSAGE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const BITMAP_MESSAGE_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BITMAP_MESSAGE_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BITMAP_MESSAGE_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BITMAP_MESSAGE_RES)
    MergeFrom(*source);
  }
}

void BITMAP_MESSAGE_RES::MergeFrom(const BITMAP_MESSAGE_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BITMAP_MESSAGE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_message_.MergeFrom(from.var_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_pos_ = from.var_pos_;
    }
    if (cached_has_bits & 0x00000008u) {
      var_type_ = from.var_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BITMAP_MESSAGE_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BITMAP_MESSAGE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BITMAP_MESSAGE_RES::CopyFrom(const BITMAP_MESSAGE_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BITMAP_MESSAGE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BITMAP_MESSAGE_RES::IsInitialized() const {
  return true;
}

void BITMAP_MESSAGE_RES::InternalSwap(BITMAP_MESSAGE_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.InternalSwap(&other->var_message_);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_code_, other->var_code_);
  swap(var_pos_, other->var_pos_);
  swap(var_type_, other->var_type_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BITMAP_MESSAGE_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AUDIO_MESSAGE_RES::InitAsDefaultInstance() {
}
class AUDIO_MESSAGE_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<AUDIO_MESSAGE_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AUDIO_MESSAGE_RES::AUDIO_MESSAGE_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AUDIO_MESSAGE_RES)
}
AUDIO_MESSAGE_RES::AUDIO_MESSAGE_RES(const AUDIO_MESSAGE_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_message_(from.var_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:AUDIO_MESSAGE_RES)
}

void AUDIO_MESSAGE_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AUDIO_MESSAGE_RES_GS_2eCLI_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_pos_) -
      reinterpret_cast<char*>(&var_code_)) + sizeof(var_pos_));
  id_ = 22;
}

AUDIO_MESSAGE_RES::~AUDIO_MESSAGE_RES() {
  // @@protoc_insertion_point(destructor:AUDIO_MESSAGE_RES)
  SharedDtor();
}

void AUDIO_MESSAGE_RES::SharedDtor() {
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AUDIO_MESSAGE_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AUDIO_MESSAGE_RES& AUDIO_MESSAGE_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AUDIO_MESSAGE_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void AUDIO_MESSAGE_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:AUDIO_MESSAGE_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    var_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&var_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_pos_) -
        reinterpret_cast<char*>(&var_code_)) + sizeof(var_pos_));
    id_ = 22;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AUDIO_MESSAGE_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated bytes var_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_var_message();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes var_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_var_pos(&has_bits);
          var_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AUDIO_MESSAGE_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUDIO_MESSAGE_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_RES];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // repeated bytes var_message = 3;
  for (int i = 0, n = this->_internal_var_message_size(); i < n; i++) {
    const auto& s = this->_internal_var_message(i);
    target = stream->WriteBytes(3, s, target);
  }

  // optional bytes var_name = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_var_name(), target);
  }

  // optional int32 var_pos = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_var_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUDIO_MESSAGE_RES)
  return target;
}

size_t AUDIO_MESSAGE_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUDIO_MESSAGE_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes var_message = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(var_message_.size());
  for (int i = 0, n = var_message_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      var_message_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes var_name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_var_name());
    }

    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional int32 var_pos = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_pos());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_RES];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AUDIO_MESSAGE_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AUDIO_MESSAGE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const AUDIO_MESSAGE_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AUDIO_MESSAGE_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AUDIO_MESSAGE_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AUDIO_MESSAGE_RES)
    MergeFrom(*source);
  }
}

void AUDIO_MESSAGE_RES::MergeFrom(const AUDIO_MESSAGE_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUDIO_MESSAGE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_message_.MergeFrom(from.var_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_pos_ = from.var_pos_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AUDIO_MESSAGE_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AUDIO_MESSAGE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AUDIO_MESSAGE_RES::CopyFrom(const AUDIO_MESSAGE_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUDIO_MESSAGE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUDIO_MESSAGE_RES::IsInitialized() const {
  return true;
}

void AUDIO_MESSAGE_RES::InternalSwap(AUDIO_MESSAGE_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.InternalSwap(&other->var_message_);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_code_, other->var_code_);
  swap(var_pos_, other->var_pos_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AUDIO_MESSAGE_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PRAY_MESSAGE_RES::InitAsDefaultInstance() {
}
class PRAY_MESSAGE_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<PRAY_MESSAGE_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void PRAY_MESSAGE_RES::clear_var_list() {
  var_list_.Clear();
}
PRAY_MESSAGE_RES::PRAY_MESSAGE_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PRAY_MESSAGE_RES)
}
PRAY_MESSAGE_RES::PRAY_MESSAGE_RES(const PRAY_MESSAGE_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_list_(from.var_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:PRAY_MESSAGE_RES)
}

void PRAY_MESSAGE_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PRAY_MESSAGE_RES_GS_2eCLI_2eproto.base);
  var_code_ = 0;
  id_ = 24;
}

PRAY_MESSAGE_RES::~PRAY_MESSAGE_RES() {
  // @@protoc_insertion_point(destructor:PRAY_MESSAGE_RES)
  SharedDtor();
}

void PRAY_MESSAGE_RES::SharedDtor() {
}

void PRAY_MESSAGE_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PRAY_MESSAGE_RES& PRAY_MESSAGE_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PRAY_MESSAGE_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void PRAY_MESSAGE_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:PRAY_MESSAGE_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_code_ = 0;
    id_ = 24;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PRAY_MESSAGE_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .PrayInfo var_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_var_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PRAY_MESSAGE_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRAY_MESSAGE_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_RES];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // repeated .PrayInfo var_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_var_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_var_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRAY_MESSAGE_RES)
  return target;
}

size_t PRAY_MESSAGE_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRAY_MESSAGE_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PrayInfo var_list = 3;
  total_size += 1UL * this->_internal_var_list_size();
  for (const auto& msg : this->var_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_RES];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PRAY_MESSAGE_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PRAY_MESSAGE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const PRAY_MESSAGE_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PRAY_MESSAGE_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PRAY_MESSAGE_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PRAY_MESSAGE_RES)
    MergeFrom(*source);
  }
}

void PRAY_MESSAGE_RES::MergeFrom(const PRAY_MESSAGE_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRAY_MESSAGE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_list_.MergeFrom(from.var_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PRAY_MESSAGE_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PRAY_MESSAGE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRAY_MESSAGE_RES::CopyFrom(const PRAY_MESSAGE_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRAY_MESSAGE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRAY_MESSAGE_RES::IsInitialized() const {
  return true;
}

void PRAY_MESSAGE_RES::InternalSwap(PRAY_MESSAGE_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_list_.InternalSwap(&other->var_list_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PRAY_MESSAGE_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PRAY_MESSAGE_REG_RES::InitAsDefaultInstance() {
}
class PRAY_MESSAGE_REG_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<PRAY_MESSAGE_REG_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PRAY_MESSAGE_REG_RES::PRAY_MESSAGE_REG_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PRAY_MESSAGE_REG_RES)
}
PRAY_MESSAGE_REG_RES::PRAY_MESSAGE_REG_RES(const PRAY_MESSAGE_REG_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_message()) {
    var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
  }
  var_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_time()) {
    var_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_time_);
  }
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:PRAY_MESSAGE_REG_RES)
}

void PRAY_MESSAGE_REG_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PRAY_MESSAGE_REG_RES_GS_2eCLI_2eproto.base);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_code_ = 0;
  id_ = 26;
}

PRAY_MESSAGE_REG_RES::~PRAY_MESSAGE_REG_RES() {
  // @@protoc_insertion_point(destructor:PRAY_MESSAGE_REG_RES)
  SharedDtor();
}

void PRAY_MESSAGE_REG_RES::SharedDtor() {
  var_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PRAY_MESSAGE_REG_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PRAY_MESSAGE_REG_RES& PRAY_MESSAGE_REG_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PRAY_MESSAGE_REG_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void PRAY_MESSAGE_REG_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:PRAY_MESSAGE_REG_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      var_time_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    var_code_ = 0;
    id_ = 26;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PRAY_MESSAGE_REG_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REG_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string var_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_var_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRAY_MESSAGE_REG_RES.var_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string var_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_var_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRAY_MESSAGE_REG_RES.var_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PRAY_MESSAGE_REG_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRAY_MESSAGE_REG_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REG_RES];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // optional string var_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_message().data(), static_cast<int>(this->_internal_var_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PRAY_MESSAGE_REG_RES.var_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_var_message(), target);
  }

  // optional string var_time = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_time().data(), static_cast<int>(this->_internal_var_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PRAY_MESSAGE_REG_RES.var_time");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_var_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRAY_MESSAGE_REG_RES)
  return target;
}

size_t PRAY_MESSAGE_REG_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRAY_MESSAGE_REG_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string var_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_var_message());
    }

    // optional string var_time = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_var_time());
    }

    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REG_RES];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PRAY_MESSAGE_REG_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PRAY_MESSAGE_REG_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const PRAY_MESSAGE_REG_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PRAY_MESSAGE_REG_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PRAY_MESSAGE_REG_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PRAY_MESSAGE_REG_RES)
    MergeFrom(*source);
  }
}

void PRAY_MESSAGE_REG_RES::MergeFrom(const PRAY_MESSAGE_REG_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRAY_MESSAGE_REG_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      var_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_time_);
    }
    if (cached_has_bits & 0x00000004u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PRAY_MESSAGE_REG_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PRAY_MESSAGE_REG_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRAY_MESSAGE_REG_RES::CopyFrom(const PRAY_MESSAGE_REG_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRAY_MESSAGE_REG_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRAY_MESSAGE_REG_RES::IsInitialized() const {
  return true;
}

void PRAY_MESSAGE_REG_RES::InternalSwap(PRAY_MESSAGE_REG_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.Swap(&other->var_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_time_.Swap(&other->var_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PRAY_MESSAGE_REG_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QNA_RES::InitAsDefaultInstance() {
}
class QNA_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<QNA_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

QNA_RES::QNA_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QNA_RES)
}
QNA_RES::QNA_RES(const QNA_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:QNA_RES)
}

void QNA_RES::SharedCtor() {
  var_code_ = 0;
  id_ = 28;
}

QNA_RES::~QNA_RES() {
  // @@protoc_insertion_point(destructor:QNA_RES)
  SharedDtor();
}

void QNA_RES::SharedDtor() {
}

void QNA_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QNA_RES& QNA_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QNA_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void QNA_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:QNA_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_code_ = 0;
    id_ = 28;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* QNA_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_QNA_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QNA_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QNA_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_QNA_RES];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QNA_RES)
  return target;
}

size_t QNA_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QNA_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_QNA_RES];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QNA_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QNA_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const QNA_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QNA_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QNA_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QNA_RES)
    MergeFrom(*source);
  }
}

void QNA_RES::MergeFrom(const QNA_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QNA_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QNA_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QNA_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QNA_RES::CopyFrom(const QNA_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QNA_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QNA_RES::IsInitialized() const {
  return true;
}

void QNA_RES::InternalSwap(QNA_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QNA_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MAIL_LIST_RES::InitAsDefaultInstance() {
}
class MAIL_LIST_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<MAIL_LIST_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void MAIL_LIST_RES::clear_var_list() {
  var_list_.Clear();
}
MAIL_LIST_RES::MAIL_LIST_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MAIL_LIST_RES)
}
MAIL_LIST_RES::MAIL_LIST_RES(const MAIL_LIST_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_list_(from.var_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:MAIL_LIST_RES)
}

void MAIL_LIST_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MAIL_LIST_RES_GS_2eCLI_2eproto.base);
  var_code_ = 0;
  id_ = 30;
}

MAIL_LIST_RES::~MAIL_LIST_RES() {
  // @@protoc_insertion_point(destructor:MAIL_LIST_RES)
  SharedDtor();
}

void MAIL_LIST_RES::SharedDtor() {
}

void MAIL_LIST_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MAIL_LIST_RES& MAIL_LIST_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MAIL_LIST_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void MAIL_LIST_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:MAIL_LIST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_code_ = 0;
    id_ = 30;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MAIL_LIST_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_MAIL_LIST_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .MailInfo var_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_var_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MAIL_LIST_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MAIL_LIST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_MAIL_LIST_RES];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // repeated .MailInfo var_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_var_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_var_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MAIL_LIST_RES)
  return target;
}

size_t MAIL_LIST_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MAIL_LIST_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MailInfo var_list = 3;
  total_size += 1UL * this->_internal_var_list_size();
  for (const auto& msg : this->var_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_MAIL_LIST_RES];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MAIL_LIST_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MAIL_LIST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MAIL_LIST_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MAIL_LIST_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MAIL_LIST_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MAIL_LIST_RES)
    MergeFrom(*source);
  }
}

void MAIL_LIST_RES::MergeFrom(const MAIL_LIST_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MAIL_LIST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_list_.MergeFrom(from.var_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MAIL_LIST_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MAIL_LIST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MAIL_LIST_RES::CopyFrom(const MAIL_LIST_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MAIL_LIST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MAIL_LIST_RES::IsInitialized() const {
  return true;
}

void MAIL_LIST_RES::InternalSwap(MAIL_LIST_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_list_.InternalSwap(&other->var_list_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MAIL_LIST_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void REG_RES::InitAsDefaultInstance() {
}
class REG_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<REG_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

REG_RES::REG_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:REG_RES)
}
REG_RES::REG_RES(const REG_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:REG_RES)
}

void REG_RES::SharedCtor() {
  var_code_ = 0;
  id_ = 38;
}

REG_RES::~REG_RES() {
  // @@protoc_insertion_point(destructor:REG_RES)
  SharedDtor();
}

void REG_RES::SharedDtor() {
}

void REG_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const REG_RES& REG_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_REG_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void REG_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:REG_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_code_ = 0;
    id_ = 38;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* REG_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_REG_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* REG_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:REG_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_REG_RES];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:REG_RES)
  return target;
}

size_t REG_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:REG_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_REG_RES];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void REG_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:REG_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const REG_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<REG_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:REG_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:REG_RES)
    MergeFrom(*source);
  }
}

void REG_RES::MergeFrom(const REG_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:REG_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void REG_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:REG_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REG_RES::CopyFrom(const REG_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:REG_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REG_RES::IsInitialized() const {
  return true;
}

void REG_RES::InternalSwap(REG_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata REG_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CLIENT_LOGOUT_RES::InitAsDefaultInstance() {
}
class CLIENT_LOGOUT_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<CLIENT_LOGOUT_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CLIENT_LOGOUT_RES::CLIENT_LOGOUT_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLIENT_LOGOUT_RES)
}
CLIENT_LOGOUT_RES::CLIENT_LOGOUT_RES(const CLIENT_LOGOUT_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:CLIENT_LOGOUT_RES)
}

void CLIENT_LOGOUT_RES::SharedCtor() {
  var_code_ = 0;
  id_ = 40;
}

CLIENT_LOGOUT_RES::~CLIENT_LOGOUT_RES() {
  // @@protoc_insertion_point(destructor:CLIENT_LOGOUT_RES)
  SharedDtor();
}

void CLIENT_LOGOUT_RES::SharedDtor() {
}

void CLIENT_LOGOUT_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLIENT_LOGOUT_RES& CLIENT_LOGOUT_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLIENT_LOGOUT_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void CLIENT_LOGOUT_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:CLIENT_LOGOUT_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_code_ = 0;
    id_ = 40;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CLIENT_LOGOUT_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_LOGOUT_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLIENT_LOGOUT_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLIENT_LOGOUT_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_LOGOUT_RES];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLIENT_LOGOUT_RES)
  return target;
}

size_t CLIENT_LOGOUT_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLIENT_LOGOUT_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_LOGOUT_RES];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLIENT_LOGOUT_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLIENT_LOGOUT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const CLIENT_LOGOUT_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLIENT_LOGOUT_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLIENT_LOGOUT_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLIENT_LOGOUT_RES)
    MergeFrom(*source);
  }
}

void CLIENT_LOGOUT_RES::MergeFrom(const CLIENT_LOGOUT_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLIENT_LOGOUT_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLIENT_LOGOUT_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLIENT_LOGOUT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLIENT_LOGOUT_RES::CopyFrom(const CLIENT_LOGOUT_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLIENT_LOGOUT_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLIENT_LOGOUT_RES::IsInitialized() const {
  return true;
}

void CLIENT_LOGOUT_RES::InternalSwap(CLIENT_LOGOUT_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLIENT_LOGOUT_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CLIENT_KICK::InitAsDefaultInstance() {
}
class CLIENT_KICK::_Internal {
 public:
  using HasBits = decltype(std::declval<CLIENT_KICK>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CLIENT_KICK::CLIENT_KICK()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLIENT_KICK)
}
CLIENT_KICK::CLIENT_KICK(const CLIENT_KICK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sid_, &from.sid_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&sid_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:CLIENT_KICK)
}

void CLIENT_KICK::SharedCtor() {
  sid_ = 0;
  id_ = 41;
}

CLIENT_KICK::~CLIENT_KICK() {
  // @@protoc_insertion_point(destructor:CLIENT_KICK)
  SharedDtor();
}

void CLIENT_KICK::SharedDtor() {
}

void CLIENT_KICK::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLIENT_KICK& CLIENT_KICK::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLIENT_KICK_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void CLIENT_KICK::Clear() {
// @@protoc_insertion_point(message_clear_start:CLIENT_KICK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    sid_ = 0;
    id_ = 41;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CLIENT_KICK::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_KICK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 sid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sid(&has_bits);
          sid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLIENT_KICK::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLIENT_KICK)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_KICK];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional int32 sid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLIENT_KICK)
  return target;
}

size_t CLIENT_KICK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLIENT_KICK)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 sid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sid());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_KICK];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLIENT_KICK::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLIENT_KICK)
  GOOGLE_DCHECK_NE(&from, this);
  const CLIENT_KICK* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLIENT_KICK>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLIENT_KICK)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLIENT_KICK)
    MergeFrom(*source);
  }
}

void CLIENT_KICK::MergeFrom(const CLIENT_KICK& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLIENT_KICK)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sid_ = from.sid_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLIENT_KICK::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLIENT_KICK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLIENT_KICK::CopyFrom(const CLIENT_KICK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLIENT_KICK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLIENT_KICK::IsInitialized() const {
  return true;
}

void CLIENT_KICK::InternalSwap(CLIENT_KICK* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sid_, other->sid_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLIENT_KICK::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CAMERA_CONTROL_RES::InitAsDefaultInstance() {
}
class CAMERA_CONTROL_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<CAMERA_CONTROL_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CAMERA_CONTROL_RES::CAMERA_CONTROL_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAMERA_CONTROL_RES)
}
CAMERA_CONTROL_RES::CAMERA_CONTROL_RES(const CAMERA_CONTROL_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:CAMERA_CONTROL_RES)
}

void CAMERA_CONTROL_RES::SharedCtor() {
  ::memset(&var_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_pos_) -
      reinterpret_cast<char*>(&var_code_)) + sizeof(var_pos_));
  id_ = 42;
}

CAMERA_CONTROL_RES::~CAMERA_CONTROL_RES() {
  // @@protoc_insertion_point(destructor:CAMERA_CONTROL_RES)
  SharedDtor();
}

void CAMERA_CONTROL_RES::SharedDtor() {
}

void CAMERA_CONTROL_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAMERA_CONTROL_RES& CAMERA_CONTROL_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CAMERA_CONTROL_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void CAMERA_CONTROL_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:CAMERA_CONTROL_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&var_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_pos_) -
        reinterpret_cast<char*>(&var_code_)) + sizeof(var_pos_));
    id_ = 42;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CAMERA_CONTROL_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_CONTROL];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CameraControlType var_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CameraControlType_IsValid(val))) {
            _internal_set_var_type(static_cast<::CameraControlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 var_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_pos(&has_bits);
          var_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAMERA_CONTROL_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAMERA_CONTROL_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_CONTROL];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // optional .CameraControlType var_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_var_type(), target);
  }

  // optional int32 var_pos = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAMERA_CONTROL_RES)
  return target;
}

size_t CAMERA_CONTROL_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAMERA_CONTROL_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .CameraControlType var_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_type());
    }

    // optional int32 var_pos = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_pos());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_CONTROL];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAMERA_CONTROL_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAMERA_CONTROL_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const CAMERA_CONTROL_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAMERA_CONTROL_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAMERA_CONTROL_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAMERA_CONTROL_RES)
    MergeFrom(*source);
  }
}

void CAMERA_CONTROL_RES::MergeFrom(const CAMERA_CONTROL_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAMERA_CONTROL_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      var_type_ = from.var_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_pos_ = from.var_pos_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAMERA_CONTROL_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAMERA_CONTROL_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAMERA_CONTROL_RES::CopyFrom(const CAMERA_CONTROL_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAMERA_CONTROL_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAMERA_CONTROL_RES::IsInitialized() const {
  return true;
}

void CAMERA_CONTROL_RES::InternalSwap(CAMERA_CONTROL_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_code_, other->var_code_);
  swap(var_type_, other->var_type_);
  swap(var_pos_, other->var_pos_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAMERA_CONTROL_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MPEG2TS_MESSAGE_RES::InitAsDefaultInstance() {
}
class MPEG2TS_MESSAGE_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<MPEG2TS_MESSAGE_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MPEG2TS_MESSAGE_RES::MPEG2TS_MESSAGE_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MPEG2TS_MESSAGE_RES)
}
MPEG2TS_MESSAGE_RES::MPEG2TS_MESSAGE_RES(const MPEG2TS_MESSAGE_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_message_(from.var_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:MPEG2TS_MESSAGE_RES)
}

void MPEG2TS_MESSAGE_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MPEG2TS_MESSAGE_RES_GS_2eCLI_2eproto.base);
  ::memset(&var_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_type_) -
      reinterpret_cast<char*>(&var_code_)) + sizeof(var_type_));
  id_ = 44;
}

MPEG2TS_MESSAGE_RES::~MPEG2TS_MESSAGE_RES() {
  // @@protoc_insertion_point(destructor:MPEG2TS_MESSAGE_RES)
  SharedDtor();
}

void MPEG2TS_MESSAGE_RES::SharedDtor() {
}

void MPEG2TS_MESSAGE_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MPEG2TS_MESSAGE_RES& MPEG2TS_MESSAGE_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MPEG2TS_MESSAGE_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void MPEG2TS_MESSAGE_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:MPEG2TS_MESSAGE_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&var_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_type_) -
        reinterpret_cast<char*>(&var_code_)) + sizeof(var_type_));
    id_ = 44;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MPEG2TS_MESSAGE_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_MESSAGE_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated bytes var_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_var_message();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 var_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_type(&has_bits);
          var_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MPEG2TS_MESSAGE_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MPEG2TS_MESSAGE_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_MESSAGE_RES];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // repeated bytes var_message = 3;
  for (int i = 0, n = this->_internal_var_message_size(); i < n; i++) {
    const auto& s = this->_internal_var_message(i);
    target = stream->WriteBytes(3, s, target);
  }

  // optional int32 var_type = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MPEG2TS_MESSAGE_RES)
  return target;
}

size_t MPEG2TS_MESSAGE_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MPEG2TS_MESSAGE_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes var_message = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(var_message_.size());
  for (int i = 0, n = var_message_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      var_message_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional int32 var_type = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_type());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_MESSAGE_RES];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPEG2TS_MESSAGE_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MPEG2TS_MESSAGE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MPEG2TS_MESSAGE_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MPEG2TS_MESSAGE_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MPEG2TS_MESSAGE_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MPEG2TS_MESSAGE_RES)
    MergeFrom(*source);
  }
}

void MPEG2TS_MESSAGE_RES::MergeFrom(const MPEG2TS_MESSAGE_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MPEG2TS_MESSAGE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_message_.MergeFrom(from.var_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      var_type_ = from.var_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MPEG2TS_MESSAGE_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MPEG2TS_MESSAGE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPEG2TS_MESSAGE_RES::CopyFrom(const MPEG2TS_MESSAGE_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MPEG2TS_MESSAGE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPEG2TS_MESSAGE_RES::IsInitialized() const {
  return true;
}

void MPEG2TS_MESSAGE_RES::InternalSwap(MPEG2TS_MESSAGE_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.InternalSwap(&other->var_message_);
  swap(var_code_, other->var_code_);
  swap(var_type_, other->var_type_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPEG2TS_MESSAGE_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MPEG2TS_WAKE_UP_RES::InitAsDefaultInstance() {
}
class MPEG2TS_WAKE_UP_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<MPEG2TS_WAKE_UP_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_room_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MPEG2TS_WAKE_UP_RES::MPEG2TS_WAKE_UP_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MPEG2TS_WAKE_UP_RES)
}
MPEG2TS_WAKE_UP_RES::MPEG2TS_WAKE_UP_RES(const MPEG2TS_WAKE_UP_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:MPEG2TS_WAKE_UP_RES)
}

void MPEG2TS_WAKE_UP_RES::SharedCtor() {
  ::memset(&var_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_room_number_) -
      reinterpret_cast<char*>(&var_code_)) + sizeof(var_room_number_));
  id_ = 46;
}

MPEG2TS_WAKE_UP_RES::~MPEG2TS_WAKE_UP_RES() {
  // @@protoc_insertion_point(destructor:MPEG2TS_WAKE_UP_RES)
  SharedDtor();
}

void MPEG2TS_WAKE_UP_RES::SharedDtor() {
}

void MPEG2TS_WAKE_UP_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MPEG2TS_WAKE_UP_RES& MPEG2TS_WAKE_UP_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MPEG2TS_WAKE_UP_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void MPEG2TS_WAKE_UP_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:MPEG2TS_WAKE_UP_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&var_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_room_number_) -
        reinterpret_cast<char*>(&var_code_)) + sizeof(var_room_number_));
    id_ = 46;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MPEG2TS_WAKE_UP_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_WAKE_UP_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 var_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_type(&has_bits);
          var_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_room_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_room_number(&has_bits);
          var_room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MPEG2TS_WAKE_UP_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MPEG2TS_WAKE_UP_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_WAKE_UP_RES];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // optional int32 var_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_type(), target);
  }

  // optional int32 var_room_number = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_room_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MPEG2TS_WAKE_UP_RES)
  return target;
}

size_t MPEG2TS_WAKE_UP_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MPEG2TS_WAKE_UP_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional int32 var_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_type());
    }

    // optional int32 var_room_number = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_room_number());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_WAKE_UP_RES];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPEG2TS_WAKE_UP_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MPEG2TS_WAKE_UP_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MPEG2TS_WAKE_UP_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MPEG2TS_WAKE_UP_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MPEG2TS_WAKE_UP_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MPEG2TS_WAKE_UP_RES)
    MergeFrom(*source);
  }
}

void MPEG2TS_WAKE_UP_RES::MergeFrom(const MPEG2TS_WAKE_UP_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MPEG2TS_WAKE_UP_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      var_type_ = from.var_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_room_number_ = from.var_room_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MPEG2TS_WAKE_UP_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MPEG2TS_WAKE_UP_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPEG2TS_WAKE_UP_RES::CopyFrom(const MPEG2TS_WAKE_UP_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MPEG2TS_WAKE_UP_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPEG2TS_WAKE_UP_RES::IsInitialized() const {
  return true;
}

void MPEG2TS_WAKE_UP_RES::InternalSwap(MPEG2TS_WAKE_UP_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_code_, other->var_code_);
  swap(var_type_, other->var_type_);
  swap(var_room_number_, other->var_room_number_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPEG2TS_WAKE_UP_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VERSION_RES* Arena::CreateMaybeMessage< ::VERSION_RES >(Arena* arena) {
  return Arena::CreateInternal< ::VERSION_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::LOGIN_RES* Arena::CreateMaybeMessage< ::LOGIN_RES >(Arena* arena) {
  return Arena::CreateInternal< ::LOGIN_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::CREATE_ROOM_RES* Arena::CreateMaybeMessage< ::CREATE_ROOM_RES >(Arena* arena) {
  return Arena::CreateInternal< ::CREATE_ROOM_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::ENTER_ROOM_RES* Arena::CreateMaybeMessage< ::ENTER_ROOM_RES >(Arena* arena) {
  return Arena::CreateInternal< ::ENTER_ROOM_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::NEW_USER_IN_ROOM_NTY* Arena::CreateMaybeMessage< ::NEW_USER_IN_ROOM_NTY >(Arena* arena) {
  return Arena::CreateInternal< ::NEW_USER_IN_ROOM_NTY >(arena);
}
template<> PROTOBUF_NOINLINE ::LEAVE_ROOM_RES* Arena::CreateMaybeMessage< ::LEAVE_ROOM_RES >(Arena* arena) {
  return Arena::CreateInternal< ::LEAVE_ROOM_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::ROOM_LIST_RES* Arena::CreateMaybeMessage< ::ROOM_LIST_RES >(Arena* arena) {
  return Arena::CreateInternal< ::ROOM_LIST_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::ROOM_PASS_THROUGH_RES* Arena::CreateMaybeMessage< ::ROOM_PASS_THROUGH_RES >(Arena* arena) {
  return Arena::CreateInternal< ::ROOM_PASS_THROUGH_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::NOTICE_RES* Arena::CreateMaybeMessage< ::NOTICE_RES >(Arena* arena) {
  return Arena::CreateInternal< ::NOTICE_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::BITMAP_MESSAGE_RES* Arena::CreateMaybeMessage< ::BITMAP_MESSAGE_RES >(Arena* arena) {
  return Arena::CreateInternal< ::BITMAP_MESSAGE_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::AUDIO_MESSAGE_RES* Arena::CreateMaybeMessage< ::AUDIO_MESSAGE_RES >(Arena* arena) {
  return Arena::CreateInternal< ::AUDIO_MESSAGE_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::PRAY_MESSAGE_RES* Arena::CreateMaybeMessage< ::PRAY_MESSAGE_RES >(Arena* arena) {
  return Arena::CreateInternal< ::PRAY_MESSAGE_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::PRAY_MESSAGE_REG_RES* Arena::CreateMaybeMessage< ::PRAY_MESSAGE_REG_RES >(Arena* arena) {
  return Arena::CreateInternal< ::PRAY_MESSAGE_REG_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::QNA_RES* Arena::CreateMaybeMessage< ::QNA_RES >(Arena* arena) {
  return Arena::CreateInternal< ::QNA_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::MAIL_LIST_RES* Arena::CreateMaybeMessage< ::MAIL_LIST_RES >(Arena* arena) {
  return Arena::CreateInternal< ::MAIL_LIST_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::REG_RES* Arena::CreateMaybeMessage< ::REG_RES >(Arena* arena) {
  return Arena::CreateInternal< ::REG_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::CLIENT_LOGOUT_RES* Arena::CreateMaybeMessage< ::CLIENT_LOGOUT_RES >(Arena* arena) {
  return Arena::CreateInternal< ::CLIENT_LOGOUT_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::CLIENT_KICK* Arena::CreateMaybeMessage< ::CLIENT_KICK >(Arena* arena) {
  return Arena::CreateInternal< ::CLIENT_KICK >(arena);
}
template<> PROTOBUF_NOINLINE ::CAMERA_CONTROL_RES* Arena::CreateMaybeMessage< ::CAMERA_CONTROL_RES >(Arena* arena) {
  return Arena::CreateInternal< ::CAMERA_CONTROL_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::MPEG2TS_MESSAGE_RES* Arena::CreateMaybeMessage< ::MPEG2TS_MESSAGE_RES >(Arena* arena) {
  return Arena::CreateInternal< ::MPEG2TS_MESSAGE_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::MPEG2TS_WAKE_UP_RES* Arena::CreateMaybeMessage< ::MPEG2TS_WAKE_UP_RES >(Arena* arena) {
  return Arena::CreateInternal< ::MPEG2TS_WAKE_UP_RES >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

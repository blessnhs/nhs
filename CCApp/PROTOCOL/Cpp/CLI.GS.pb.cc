// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CLI.GS.proto

#include "CLI.GS.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class VERSION_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VERSION_REQ> _instance;
} _VERSION_REQ_default_instance_;
class LOGIN_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOGIN_REQ> _instance;
} _LOGIN_REQ_default_instance_;
class CREATE_ROOM_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CREATE_ROOM_REQ> _instance;
} _CREATE_ROOM_REQ_default_instance_;
class ENTER_ROOM_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ENTER_ROOM_REQ> _instance;
} _ENTER_ROOM_REQ_default_instance_;
class LEAVE_ROOM_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LEAVE_ROOM_REQ> _instance;
} _LEAVE_ROOM_REQ_default_instance_;
class ROOM_LIST_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROOM_LIST_REQ> _instance;
} _ROOM_LIST_REQ_default_instance_;
class ROOM_PASS_THROUGH_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROOM_PASS_THROUGH_REQ> _instance;
} _ROOM_PASS_THROUGH_REQ_default_instance_;
class NOTICE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NOTICE_REQ> _instance;
} _NOTICE_REQ_default_instance_;
class BITMAP_MESSAGE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BITMAP_MESSAGE_REQ> _instance;
} _BITMAP_MESSAGE_REQ_default_instance_;
class AUDIO_MESSAGE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AUDIO_MESSAGE_REQ> _instance;
} _AUDIO_MESSAGE_REQ_default_instance_;
class STOP_STREAM_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<STOP_STREAM_REQ> _instance;
} _STOP_STREAM_REQ_default_instance_;
class CAMERA_WAKE_UP_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CAMERA_WAKE_UP_REQ> _instance;
} _CAMERA_WAKE_UP_REQ_default_instance_;
class PRAY_MESSAGE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PRAY_MESSAGE_REQ> _instance;
} _PRAY_MESSAGE_REQ_default_instance_;
class PRAY_MESSAGE_REG_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PRAY_MESSAGE_REG_REQ> _instance;
} _PRAY_MESSAGE_REG_REQ_default_instance_;
class QNA_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QNA_REQ> _instance;
} _QNA_REQ_default_instance_;
class MAIL_LIST_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MAIL_LIST_REQ> _instance;
} _MAIL_LIST_REQ_default_instance_;
class REG_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<REG_REQ> _instance;
} _REG_REQ_default_instance_;
class CLIENT_LOGOUT_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CLIENT_LOGOUT_REQ> _instance;
} _CLIENT_LOGOUT_REQ_default_instance_;
class CAMERA_CONTROL_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CAMERA_CONTROL_REQ> _instance;
} _CAMERA_CONTROL_REQ_default_instance_;
class MPEG2TS_MESSAGE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MPEG2TS_MESSAGE_REQ> _instance;
} _MPEG2TS_MESSAGE_REQ_default_instance_;
class REG_CAMERA_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<REG_CAMERA_REQ> _instance;
} _REG_CAMERA_REQ_default_instance_;
class CAMERA_LIST_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CAMERA_LIST_REQ> _instance;
} _CAMERA_LIST_REQ_default_instance_;
class MACHINE_STATUS_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MACHINE_STATUS_REQ> _instance;
} _MACHINE_STATUS_REQ_default_instance_;
class VERIFY_PURCHASE_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VERIFY_PURCHASE_REQ> _instance;
} _VERIFY_PURCHASE_REQ_default_instance_;
class DEL_CAMERA_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DEL_CAMERA_REQ> _instance;
} _DEL_CAMERA_REQ_default_instance_;
class RECONNECT_REQDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RECONNECT_REQ> _instance;
} _RECONNECT_REQ_default_instance_;
static void InitDefaultsscc_info_AUDIO_MESSAGE_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AUDIO_MESSAGE_REQ_default_instance_;
    new (ptr) ::AUDIO_MESSAGE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AUDIO_MESSAGE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AUDIO_MESSAGE_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AUDIO_MESSAGE_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_BITMAP_MESSAGE_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BITMAP_MESSAGE_REQ_default_instance_;
    new (ptr) ::BITMAP_MESSAGE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BITMAP_MESSAGE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BITMAP_MESSAGE_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BITMAP_MESSAGE_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_CAMERA_CONTROL_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAMERA_CONTROL_REQ_default_instance_;
    new (ptr) ::CAMERA_CONTROL_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAMERA_CONTROL_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CAMERA_CONTROL_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CAMERA_CONTROL_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_CAMERA_LIST_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAMERA_LIST_REQ_default_instance_;
    new (ptr) ::CAMERA_LIST_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAMERA_LIST_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CAMERA_LIST_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CAMERA_LIST_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_CAMERA_WAKE_UP_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CAMERA_WAKE_UP_REQ_default_instance_;
    new (ptr) ::CAMERA_WAKE_UP_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CAMERA_WAKE_UP_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CAMERA_WAKE_UP_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CAMERA_WAKE_UP_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_CLIENT_LOGOUT_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CLIENT_LOGOUT_REQ_default_instance_;
    new (ptr) ::CLIENT_LOGOUT_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CLIENT_LOGOUT_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CLIENT_LOGOUT_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CLIENT_LOGOUT_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_CREATE_ROOM_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CREATE_ROOM_REQ_default_instance_;
    new (ptr) ::CREATE_ROOM_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CREATE_ROOM_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CREATE_ROOM_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CREATE_ROOM_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_DEL_CAMERA_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DEL_CAMERA_REQ_default_instance_;
    new (ptr) ::DEL_CAMERA_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DEL_CAMERA_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DEL_CAMERA_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DEL_CAMERA_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_ENTER_ROOM_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ENTER_ROOM_REQ_default_instance_;
    new (ptr) ::ENTER_ROOM_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ENTER_ROOM_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ENTER_ROOM_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ENTER_ROOM_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_LEAVE_ROOM_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LEAVE_ROOM_REQ_default_instance_;
    new (ptr) ::LEAVE_ROOM_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LEAVE_ROOM_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LEAVE_ROOM_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LEAVE_ROOM_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_LOGIN_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOGIN_REQ_default_instance_;
    new (ptr) ::LOGIN_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOGIN_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LOGIN_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LOGIN_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_MACHINE_STATUS_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MACHINE_STATUS_REQ_default_instance_;
    new (ptr) ::MACHINE_STATUS_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MACHINE_STATUS_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MACHINE_STATUS_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MACHINE_STATUS_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_MAIL_LIST_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MAIL_LIST_REQ_default_instance_;
    new (ptr) ::MAIL_LIST_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MAIL_LIST_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MAIL_LIST_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MAIL_LIST_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_MPEG2TS_MESSAGE_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MPEG2TS_MESSAGE_REQ_default_instance_;
    new (ptr) ::MPEG2TS_MESSAGE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MPEG2TS_MESSAGE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MPEG2TS_MESSAGE_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MPEG2TS_MESSAGE_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_NOTICE_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NOTICE_REQ_default_instance_;
    new (ptr) ::NOTICE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NOTICE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NOTICE_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NOTICE_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_PRAY_MESSAGE_REG_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PRAY_MESSAGE_REG_REQ_default_instance_;
    new (ptr) ::PRAY_MESSAGE_REG_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PRAY_MESSAGE_REG_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PRAY_MESSAGE_REG_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PRAY_MESSAGE_REG_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_PRAY_MESSAGE_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PRAY_MESSAGE_REQ_default_instance_;
    new (ptr) ::PRAY_MESSAGE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PRAY_MESSAGE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PRAY_MESSAGE_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PRAY_MESSAGE_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_QNA_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_QNA_REQ_default_instance_;
    new (ptr) ::QNA_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::QNA_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QNA_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QNA_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_RECONNECT_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RECONNECT_REQ_default_instance_;
    new (ptr) ::RECONNECT_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RECONNECT_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RECONNECT_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RECONNECT_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_REG_CAMERA_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_REG_CAMERA_REQ_default_instance_;
    new (ptr) ::REG_CAMERA_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::REG_CAMERA_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_REG_CAMERA_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_REG_CAMERA_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_REG_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_REG_REQ_default_instance_;
    new (ptr) ::REG_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::REG_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_REG_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_REG_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_ROOM_LIST_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ROOM_LIST_REQ_default_instance_;
    new (ptr) ::ROOM_LIST_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ROOM_LIST_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROOM_LIST_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ROOM_LIST_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_ROOM_PASS_THROUGH_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ROOM_PASS_THROUGH_REQ_default_instance_;
    new (ptr) ::ROOM_PASS_THROUGH_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ROOM_PASS_THROUGH_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROOM_PASS_THROUGH_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ROOM_PASS_THROUGH_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_STOP_STREAM_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_STOP_STREAM_REQ_default_instance_;
    new (ptr) ::STOP_STREAM_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::STOP_STREAM_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_STOP_STREAM_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_STOP_STREAM_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_VERIFY_PURCHASE_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VERIFY_PURCHASE_REQ_default_instance_;
    new (ptr) ::VERIFY_PURCHASE_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VERIFY_PURCHASE_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VERIFY_PURCHASE_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VERIFY_PURCHASE_REQ_CLI_2eGS_2eproto}, {}};

static void InitDefaultsscc_info_VERSION_REQ_CLI_2eGS_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VERSION_REQ_default_instance_;
    new (ptr) ::VERSION_REQ();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VERSION_REQ::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VERSION_REQ_CLI_2eGS_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VERSION_REQ_CLI_2eGS_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_CLI_2eGS_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_CLI_2eGS_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_CLI_2eGS_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_CLI_2eGS_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::VERSION_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VERSION_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VERSION_REQ, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::LOGIN_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOGIN_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_REQ, var_uid_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_REQ, var_token_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_REQ, var_cam_name_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_REQ, var_machine_id_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_REQ, var_ip_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_REQ, var_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_REQ, var_room_number_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_REQ, var_id_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_REQ, var_room_number_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_REQ, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_REQ, var_message_),
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_REQ, var_message_int_),
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_REQ, var_room_number_),
  PROTOBUF_FIELD_OFFSET(::ROOM_PASS_THROUGH_REQ, var_time_),
  4,
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::NOTICE_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NOTICE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NOTICE_REQ, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_REQ, var_message_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_REQ, var_room_number_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_REQ, var_type_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_REQ, var_to_player_id_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_REQ, var_width_),
  PROTOBUF_FIELD_OFFSET(::BITMAP_MESSAGE_REQ, var_height_),
  4,
  ~0u,
  0,
  1,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_REQ, var_message_),
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_REQ, var_room_number_),
  PROTOBUF_FIELD_OFFSET(::AUDIO_MESSAGE_REQ, var_to_player_id_),
  1,
  ~0u,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::STOP_STREAM_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::STOP_STREAM_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::STOP_STREAM_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::STOP_STREAM_REQ, var_to_player_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CAMERA_WAKE_UP_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_WAKE_UP_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAMERA_WAKE_UP_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_WAKE_UP_REQ, var_type_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_WAKE_UP_REQ, var_room_number_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_WAKE_UP_REQ, var_to_player_id_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_WAKE_UP_REQ, var_machine_id_),
  4,
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_REQ, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_REG_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_REG_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_REG_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::PRAY_MESSAGE_REG_REQ, var_message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::QNA_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::QNA_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::QNA_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::QNA_REQ, var_message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::MAIL_LIST_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MAIL_LIST_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MAIL_LIST_REQ, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::REG_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::REG_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::REG_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::REG_REQ, var_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CLIENT_LOGOUT_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CLIENT_LOGOUT_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CLIENT_LOGOUT_REQ, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CAMERA_CONTROL_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_CONTROL_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAMERA_CONTROL_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_CONTROL_REQ, var_type_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_CONTROL_REQ, var_machine_id_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_CONTROL_REQ, var_player_id_),
  3,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_MESSAGE_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_MESSAGE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_MESSAGE_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_MESSAGE_REQ, var_message_),
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_MESSAGE_REQ, var_room_number_),
  PROTOBUF_FIELD_OFFSET(::MPEG2TS_MESSAGE_REQ, var_type_),
  2,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::REG_CAMERA_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::REG_CAMERA_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::REG_CAMERA_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::REG_CAMERA_REQ, var_cam_name_),
  PROTOBUF_FIELD_OFFSET(::REG_CAMERA_REQ, var_machine_id_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CAMERA_LIST_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAMERA_LIST_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAMERA_LIST_REQ, id_),
  0,
  PROTOBUF_FIELD_OFFSET(::MACHINE_STATUS_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MACHINE_STATUS_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MACHINE_STATUS_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::MACHINE_STATUS_REQ, var_to_player_id_),
  PROTOBUF_FIELD_OFFSET(::MACHINE_STATUS_REQ, var_battery_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::VERIFY_PURCHASE_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VERIFY_PURCHASE_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VERIFY_PURCHASE_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::VERIFY_PURCHASE_REQ, var_package_name_),
  PROTOBUF_FIELD_OFFSET(::VERIFY_PURCHASE_REQ, var_purchase_id_),
  PROTOBUF_FIELD_OFFSET(::VERIFY_PURCHASE_REQ, var_token_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::DEL_CAMERA_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DEL_CAMERA_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DEL_CAMERA_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::DEL_CAMERA_REQ, var_machine_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::RECONNECT_REQ, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RECONNECT_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RECONNECT_REQ, id_),
  PROTOBUF_FIELD_OFFSET(::RECONNECT_REQ, var_machine_id_),
  PROTOBUF_FIELD_OFFSET(::RECONNECT_REQ, var_machine_name_),
  PROTOBUF_FIELD_OFFSET(::RECONNECT_REQ, var_token_),
  PROTOBUF_FIELD_OFFSET(::RECONNECT_REQ, var_index_),
  PROTOBUF_FIELD_OFFSET(::RECONNECT_REQ, var_email_),
  PROTOBUF_FIELD_OFFSET(::RECONNECT_REQ, var_name_),
  6,
  0,
  1,
  2,
  5,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::VERSION_REQ)},
  { 7, 18, sizeof(::LOGIN_REQ)},
  { 24, 31, sizeof(::CREATE_ROOM_REQ)},
  { 33, 40, sizeof(::ENTER_ROOM_REQ)},
  { 42, 50, sizeof(::LEAVE_ROOM_REQ)},
  { 53, 59, sizeof(::ROOM_LIST_REQ)},
  { 60, 70, sizeof(::ROOM_PASS_THROUGH_REQ)},
  { 75, 81, sizeof(::NOTICE_REQ)},
  { 82, 94, sizeof(::BITMAP_MESSAGE_REQ)},
  { 101, 110, sizeof(::AUDIO_MESSAGE_REQ)},
  { 114, 121, sizeof(::STOP_STREAM_REQ)},
  { 123, 133, sizeof(::CAMERA_WAKE_UP_REQ)},
  { 138, 144, sizeof(::PRAY_MESSAGE_REQ)},
  { 145, 152, sizeof(::PRAY_MESSAGE_REG_REQ)},
  { 154, 161, sizeof(::QNA_REQ)},
  { 163, 169, sizeof(::MAIL_LIST_REQ)},
  { 170, 177, sizeof(::REG_REQ)},
  { 179, 185, sizeof(::CLIENT_LOGOUT_REQ)},
  { 186, 195, sizeof(::CAMERA_CONTROL_REQ)},
  { 199, 208, sizeof(::MPEG2TS_MESSAGE_REQ)},
  { 212, 220, sizeof(::REG_CAMERA_REQ)},
  { 223, 229, sizeof(::CAMERA_LIST_REQ)},
  { 230, 238, sizeof(::MACHINE_STATUS_REQ)},
  { 241, 250, sizeof(::VERIFY_PURCHASE_REQ)},
  { 254, 261, sizeof(::DEL_CAMERA_REQ)},
  { 263, 275, sizeof(::RECONNECT_REQ)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VERSION_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOGIN_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CREATE_ROOM_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ENTER_ROOM_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LEAVE_ROOM_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ROOM_LIST_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ROOM_PASS_THROUGH_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NOTICE_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BITMAP_MESSAGE_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AUDIO_MESSAGE_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_STOP_STREAM_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAMERA_WAKE_UP_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PRAY_MESSAGE_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PRAY_MESSAGE_REG_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_QNA_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MAIL_LIST_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_REG_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CLIENT_LOGOUT_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAMERA_CONTROL_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MPEG2TS_MESSAGE_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_REG_CAMERA_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAMERA_LIST_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MACHINE_STATUS_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VERIFY_PURCHASE_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DEL_CAMERA_REQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RECONNECT_REQ_default_instance_),
};

const char descriptor_table_protodef_CLI_2eGS_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014CLI.GS.proto\032\nEnum.proto\032\017Structure.pr"
  "oto\"8\n\013VERSION_REQ\022)\n\002id\030\001 \001(\0162\t.PROTOCO"
  "L:\022ID_PKT_VERSION_REQ\"\226\001\n\tLOGIN_REQ\022\'\n\002i"
  "d\030\001 \001(\0162\t.PROTOCOL:\020ID_PKT_LOGIN_REQ\022\017\n\007"
  "var_uid\030\002 \002(\t\022\021\n\tvar_token\030\003 \002(\t\022\024\n\014var_"
  "cam_name\030\004 \002(\t\022\026\n\016var_machine_id\030\005 \002(\t\022\016"
  "\n\006var_ip\030\006 \002(\t\"R\n\017CREATE_ROOM_REQ\022-\n\002id\030"
  "\001 \001(\0162\t.PROTOCOL:\026ID_PKT_CREATE_ROOM_REQ"
  "\022\020\n\010var_name\030\002 \002(\t\"W\n\016ENTER_ROOM_REQ\022,\n\002"
  "id\030\001 \001(\0162\t.PROTOCOL:\025ID_PKT_ENTER_ROOM_R"
  "EQ\022\027\n\017var_room_number\030\002 \002(\005\"g\n\016LEAVE_ROO"
  "M_REQ\022,\n\002id\030\001 \001(\0162\t.PROTOCOL:\025ID_PKT_LEA"
  "VE_ROOM_REQ\022\016\n\006var_id\030\002 \002(\005\022\027\n\017var_room_"
  "number\030\003 \002(\005\"<\n\rROOM_LIST_REQ\022+\n\002id\030\001 \001("
  "\0162\t.PROTOCOL:\024ID_PKT_ROOM_LIST_REQ\"\245\001\n\025R"
  "OOM_PASS_THROUGH_REQ\0223\n\002id\030\001 \001(\0162\t.PROTO"
  "COL:\034ID_PKT_ROOM_PASS_THROUGH_REQ\022\023\n\013var"
  "_message\030\002 \002(\t\022\027\n\017var_message_int\030\003 \002(\005\022"
  "\027\n\017var_room_number\030\004 \002(\005\022\020\n\010var_time\030\005 \002"
  "(\t\"6\n\nNOTICE_REQ\022(\n\002id\030\001 \001(\0162\t.PROTOCOL:"
  "\021ID_PKT_NOTICE_REQ\"\307\001\n\022BITMAP_MESSAGE_RE"
  "Q\0220\n\002id\030\001 \001(\0162\t.PROTOCOL:\031ID_PKT_BITMAP_"
  "MESSAGE_REQ\022\023\n\013var_message\030\002 \003(\014\022\027\n\017var_"
  "room_number\030\003 \002(\005\022\020\n\010var_type\030\004 \002(\005\022\030\n\020v"
  "ar_to_player_id\030\005 \003(\003\022\021\n\tvar_width\030\006 \002(\005"
  "\022\022\n\nvar_height\030\007 \002(\005\"\214\001\n\021AUDIO_MESSAGE_R"
  "EQ\022/\n\002id\030\001 \001(\0162\t.PROTOCOL:\030ID_PKT_AUDIO_"
  "MESSAGE_REQ\022\023\n\013var_message\030\002 \003(\014\022\027\n\017var_"
  "room_number\030\003 \002(\005\022\030\n\020var_to_player_id\030\004 "
  "\003(\003\"Z\n\017STOP_STREAM_REQ\022-\n\002id\030\001 \001(\0162\t.PRO"
  "TOCOL:\026ID_PKT_STOP_STREAM_REQ\022\030\n\020var_to_"
  "player_id\030\002 \002(\003\"\243\001\n\022CAMERA_WAKE_UP_REQ\0220"
  "\n\002id\030\001 \001(\0162\t.PROTOCOL:\031ID_PKT_CAMERA_WAK"
  "E_UP_REQ\022\020\n\010var_type\030\002 \002(\005\022\027\n\017var_room_n"
  "umber\030\003 \002(\005\022\030\n\020var_to_player_id\030\004 \002(\003\022\026\n"
  "\016var_machine_id\030\005 \002(\t\"B\n\020PRAY_MESSAGE_RE"
  "Q\022.\n\002id\030\001 \001(\0162\t.PROTOCOL:\027ID_PKT_PRAY_ME"
  "SSAGE_REQ\"_\n\024PRAY_MESSAGE_REG_REQ\0222\n\002id\030"
  "\001 \001(\0162\t.PROTOCOL:\033ID_PKT_PRAY_MESSAGE_RE"
  "G_REQ\022\023\n\013var_message\030\002 \001(\t\"E\n\007QNA_REQ\022%\n"
  "\002id\030\001 \001(\0162\t.PROTOCOL:\016ID_PKT_QNA_REQ\022\023\n\013"
  "var_message\030\002 \001(\t\"<\n\rMAIL_LIST_REQ\022+\n\002id"
  "\030\001 \001(\0162\t.PROTOCOL:\024ID_PKT_MAIL_LIST_REQ\""
  "@\n\007REG_REQ\022%\n\002id\030\001 \001(\0162\t.PROTOCOL:\016ID_PK"
  "T_REG_REQ\022\016\n\006var_id\030\002 \002(\005\"D\n\021CLIENT_LOGO"
  "UT_REQ\022/\n\002id\030\001 \001(\0162\t.PROTOCOL:\030ID_PKT_CL"
  "IENT_LOGOUT_REQ\"\233\001\n\022CAMERA_CONTROL_REQ\0220"
  "\n\002id\030\001 \001(\0162\t.PROTOCOL:\031ID_PKT_CAMERA_CON"
  "TROL_REQ\022$\n\010var_type\030\002 \002(\0162\022.CameraContr"
  "olType\022\026\n\016var_machine_id\030\003 \002(\t\022\025\n\rvar_pl"
  "ayer_id\030\004 \002(\003\"\210\001\n\023MPEG2TS_MESSAGE_REQ\0221\n"
  "\002id\030\001 \001(\0162\t.PROTOCOL:\032ID_PKT_MPEG2TS_MES"
  "SAGE_REQ\022\023\n\013var_message\030\002 \003(\014\022\027\n\017var_roo"
  "m_number\030\003 \002(\005\022\020\n\010var_type\030\004 \002(\005\"l\n\016REG_"
  "CAMERA_REQ\022,\n\002id\030\001 \001(\0162\t.PROTOCOL:\025ID_PK"
  "T_REG_CAMERA_REQ\022\024\n\014var_cam_name\030\002 \002(\t\022\026"
  "\n\016var_machine_id\030\003 \002(\t\"@\n\017CAMERA_LIST_RE"
  "Q\022-\n\002id\030\001 \001(\0162\t.PROTOCOL:\026ID_PKT_CAMERA_"
  "LIST_REQ\"u\n\022MACHINE_STATUS_REQ\0220\n\002id\030\001 \001"
  "(\0162\t.PROTOCOL:\031ID_PKT_MACHINE_STATUS_REQ"
  "\022\030\n\020var_to_player_id\030\005 \003(\003\022\023\n\013var_batter"
  "y\030\004 \002(\005\"\216\001\n\023VERIFY_PURCHASE_REQ\0221\n\002id\030\001 "
  "\001(\0162\t.PROTOCOL:\032ID_PKT_VERIFY_PURCHASE_R"
  "EQ\022\030\n\020var_package_name\030\002 \002(\t\022\027\n\017var_purc"
  "hase_id\030\003 \002(\t\022\021\n\tvar_token\030\004 \002(\t\"V\n\016DEL_"
  "CAMERA_REQ\022,\n\002id\030\001 \001(\0162\t.PROTOCOL:\025ID_PK"
  "T_DEL_CAMERA_REQ\022\026\n\016var_machine_id\030\002 \002(\t"
  "\"\271\001\n\rRECONNECT_REQ\022+\n\002id\030\001 \001(\0162\t.PROTOCO"
  "L:\024ID_PKT_RECONNECT_REQ\022\026\n\016var_machine_i"
  "d\030\002 \002(\t\022\030\n\020var_machine_name\030\003 \002(\t\022\021\n\tvar"
  "_token\030\004 \002(\t\022\021\n\tvar_index\030\005 \002(\003\022\021\n\tvar_e"
  "mail\030\006 \002(\t\022\020\n\010var_name\030\007 \002(\tB\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_CLI_2eGS_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Structure_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_CLI_2eGS_2eproto_sccs[26] = {
  &scc_info_AUDIO_MESSAGE_REQ_CLI_2eGS_2eproto.base,
  &scc_info_BITMAP_MESSAGE_REQ_CLI_2eGS_2eproto.base,
  &scc_info_CAMERA_CONTROL_REQ_CLI_2eGS_2eproto.base,
  &scc_info_CAMERA_LIST_REQ_CLI_2eGS_2eproto.base,
  &scc_info_CAMERA_WAKE_UP_REQ_CLI_2eGS_2eproto.base,
  &scc_info_CLIENT_LOGOUT_REQ_CLI_2eGS_2eproto.base,
  &scc_info_CREATE_ROOM_REQ_CLI_2eGS_2eproto.base,
  &scc_info_DEL_CAMERA_REQ_CLI_2eGS_2eproto.base,
  &scc_info_ENTER_ROOM_REQ_CLI_2eGS_2eproto.base,
  &scc_info_LEAVE_ROOM_REQ_CLI_2eGS_2eproto.base,
  &scc_info_LOGIN_REQ_CLI_2eGS_2eproto.base,
  &scc_info_MACHINE_STATUS_REQ_CLI_2eGS_2eproto.base,
  &scc_info_MAIL_LIST_REQ_CLI_2eGS_2eproto.base,
  &scc_info_MPEG2TS_MESSAGE_REQ_CLI_2eGS_2eproto.base,
  &scc_info_NOTICE_REQ_CLI_2eGS_2eproto.base,
  &scc_info_PRAY_MESSAGE_REG_REQ_CLI_2eGS_2eproto.base,
  &scc_info_PRAY_MESSAGE_REQ_CLI_2eGS_2eproto.base,
  &scc_info_QNA_REQ_CLI_2eGS_2eproto.base,
  &scc_info_RECONNECT_REQ_CLI_2eGS_2eproto.base,
  &scc_info_REG_CAMERA_REQ_CLI_2eGS_2eproto.base,
  &scc_info_REG_REQ_CLI_2eGS_2eproto.base,
  &scc_info_ROOM_LIST_REQ_CLI_2eGS_2eproto.base,
  &scc_info_ROOM_PASS_THROUGH_REQ_CLI_2eGS_2eproto.base,
  &scc_info_STOP_STREAM_REQ_CLI_2eGS_2eproto.base,
  &scc_info_VERIFY_PURCHASE_REQ_CLI_2eGS_2eproto.base,
  &scc_info_VERSION_REQ_CLI_2eGS_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_CLI_2eGS_2eproto_once;
static bool descriptor_table_CLI_2eGS_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CLI_2eGS_2eproto = {
  &descriptor_table_CLI_2eGS_2eproto_initialized, descriptor_table_protodef_CLI_2eGS_2eproto, "CLI.GS.proto", 2872,
  &descriptor_table_CLI_2eGS_2eproto_once, descriptor_table_CLI_2eGS_2eproto_sccs, descriptor_table_CLI_2eGS_2eproto_deps, 26, 2,
  schemas, file_default_instances, TableStruct_CLI_2eGS_2eproto::offsets,
  file_level_metadata_CLI_2eGS_2eproto, 26, file_level_enum_descriptors_CLI_2eGS_2eproto, file_level_service_descriptors_CLI_2eGS_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_CLI_2eGS_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_CLI_2eGS_2eproto), true);

// ===================================================================

void VERSION_REQ::InitAsDefaultInstance() {
}
class VERSION_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<VERSION_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

VERSION_REQ::VERSION_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VERSION_REQ)
}
VERSION_REQ::VERSION_REQ(const VERSION_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:VERSION_REQ)
}

void VERSION_REQ::SharedCtor() {
  id_ = 0;
}

VERSION_REQ::~VERSION_REQ() {
  // @@protoc_insertion_point(destructor:VERSION_REQ)
  SharedDtor();
}

void VERSION_REQ::SharedDtor() {
}

void VERSION_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VERSION_REQ& VERSION_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VERSION_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void VERSION_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:VERSION_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VERSION_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VERSION_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VERSION_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VERSION_REQ)
  return target;
}

size_t VERSION_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VERSION_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VERSION_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VERSION_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const VERSION_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VERSION_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VERSION_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VERSION_REQ)
    MergeFrom(*source);
  }
}

void VERSION_REQ::MergeFrom(const VERSION_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VERSION_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void VERSION_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VERSION_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VERSION_REQ::CopyFrom(const VERSION_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VERSION_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VERSION_REQ::IsInitialized() const {
  return true;
}

void VERSION_REQ::InternalSwap(VERSION_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VERSION_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOGIN_REQ::InitAsDefaultInstance() {
}
class LOGIN_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<LOGIN_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_var_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_cam_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_machine_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

LOGIN_REQ::LOGIN_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LOGIN_REQ)
}
LOGIN_REQ::LOGIN_REQ(const LOGIN_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_uid()) {
    var_uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_uid_);
  }
  var_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_token()) {
    var_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_token_);
  }
  var_cam_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_cam_name()) {
    var_cam_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_cam_name_);
  }
  var_machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_machine_id()) {
    var_machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_id_);
  }
  var_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_ip()) {
    var_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_ip_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:LOGIN_REQ)
}

void LOGIN_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LOGIN_REQ_CLI_2eGS_2eproto.base);
  var_uid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_cam_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 2;
}

LOGIN_REQ::~LOGIN_REQ() {
  // @@protoc_insertion_point(destructor:LOGIN_REQ)
  SharedDtor();
}

void LOGIN_REQ::SharedDtor() {
  var_uid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_cam_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_machine_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LOGIN_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOGIN_REQ& LOGIN_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOGIN_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void LOGIN_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:LOGIN_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      var_uid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      var_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      var_cam_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      var_machine_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      var_ip_.ClearNonDefaultToEmptyNoArena();
    }
    id_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LOGIN_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string var_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_uid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOGIN_REQ.var_uid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_var_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOGIN_REQ.var_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_cam_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_var_cam_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOGIN_REQ.var_cam_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_machine_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_var_machine_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOGIN_REQ.var_machine_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_ip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_var_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "LOGIN_REQ.var_ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOGIN_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOGIN_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_REQ];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required string var_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_uid().data(), static_cast<int>(this->_internal_var_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "LOGIN_REQ.var_uid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_uid(), target);
  }

  // required string var_token = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_token().data(), static_cast<int>(this->_internal_var_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "LOGIN_REQ.var_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_var_token(), target);
  }

  // required string var_cam_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_cam_name().data(), static_cast<int>(this->_internal_var_cam_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "LOGIN_REQ.var_cam_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_var_cam_name(), target);
  }

  // required string var_machine_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_machine_id().data(), static_cast<int>(this->_internal_var_machine_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "LOGIN_REQ.var_machine_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_var_machine_id(), target);
  }

  // required string var_ip = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_ip().data(), static_cast<int>(this->_internal_var_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "LOGIN_REQ.var_ip");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_var_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOGIN_REQ)
  return target;
}

size_t LOGIN_REQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LOGIN_REQ)
  size_t total_size = 0;

  if (_internal_has_var_uid()) {
    // required string var_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_uid());
  }

  if (_internal_has_var_token()) {
    // required string var_token = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_token());
  }

  if (_internal_has_var_cam_name()) {
    // required string var_cam_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_cam_name());
  }

  if (_internal_has_var_machine_id()) {
    // required string var_machine_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_machine_id());
  }

  if (_internal_has_var_ip()) {
    // required string var_ip = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_ip());
  }

  return total_size;
}
size_t LOGIN_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOGIN_REQ)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string var_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_uid());

    // required string var_token = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_token());

    // required string var_cam_name = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_cam_name());

    // required string var_machine_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_machine_id());

    // required string var_ip = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_ip());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOGIN_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOGIN_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const LOGIN_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOGIN_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOGIN_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOGIN_REQ)
    MergeFrom(*source);
  }
}

void LOGIN_REQ::MergeFrom(const LOGIN_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOGIN_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_uid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_uid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      var_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      var_cam_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_cam_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      var_machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      var_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_ip_);
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LOGIN_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOGIN_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOGIN_REQ::CopyFrom(const LOGIN_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOGIN_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOGIN_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void LOGIN_REQ::InternalSwap(LOGIN_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_uid_.Swap(&other->var_uid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_token_.Swap(&other->var_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_cam_name_.Swap(&other->var_cam_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_machine_id_.Swap(&other->var_machine_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_ip_.Swap(&other->var_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LOGIN_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CREATE_ROOM_REQ::InitAsDefaultInstance() {
}
class CREATE_ROOM_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<CREATE_ROOM_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CREATE_ROOM_REQ::CREATE_ROOM_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CREATE_ROOM_REQ)
}
CREATE_ROOM_REQ::CREATE_ROOM_REQ(const CREATE_ROOM_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CREATE_ROOM_REQ)
}

void CREATE_ROOM_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CREATE_ROOM_REQ_CLI_2eGS_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 4;
}

CREATE_ROOM_REQ::~CREATE_ROOM_REQ() {
  // @@protoc_insertion_point(destructor:CREATE_ROOM_REQ)
  SharedDtor();
}

void CREATE_ROOM_REQ::SharedDtor() {
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CREATE_ROOM_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CREATE_ROOM_REQ& CREATE_ROOM_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CREATE_ROOM_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void CREATE_ROOM_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CREATE_ROOM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_name_.ClearNonDefaultToEmptyNoArena();
    }
    id_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CREATE_ROOM_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string var_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CREATE_ROOM_REQ.var_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CREATE_ROOM_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CREATE_ROOM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required string var_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CREATE_ROOM_REQ.var_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CREATE_ROOM_REQ)
  return target;
}

size_t CREATE_ROOM_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CREATE_ROOM_REQ)
  size_t total_size = 0;

  // required string var_name = 2;
  if (_internal_has_var_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CREATE_ROOM_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CREATE_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const CREATE_ROOM_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CREATE_ROOM_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CREATE_ROOM_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CREATE_ROOM_REQ)
    MergeFrom(*source);
  }
}

void CREATE_ROOM_REQ::MergeFrom(const CREATE_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CREATE_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CREATE_ROOM_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CREATE_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CREATE_ROOM_REQ::CopyFrom(const CREATE_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CREATE_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CREATE_ROOM_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CREATE_ROOM_REQ::InternalSwap(CREATE_ROOM_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CREATE_ROOM_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ENTER_ROOM_REQ::InitAsDefaultInstance() {
}
class ENTER_ROOM_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<ENTER_ROOM_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_room_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ENTER_ROOM_REQ::ENTER_ROOM_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ENTER_ROOM_REQ)
}
ENTER_ROOM_REQ::ENTER_ROOM_REQ(const ENTER_ROOM_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_room_number_, &from.var_room_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_room_number_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ENTER_ROOM_REQ)
}

void ENTER_ROOM_REQ::SharedCtor() {
  var_room_number_ = 0;
  id_ = 6;
}

ENTER_ROOM_REQ::~ENTER_ROOM_REQ() {
  // @@protoc_insertion_point(destructor:ENTER_ROOM_REQ)
  SharedDtor();
}

void ENTER_ROOM_REQ::SharedDtor() {
}

void ENTER_ROOM_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ENTER_ROOM_REQ& ENTER_ROOM_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ENTER_ROOM_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void ENTER_ROOM_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:ENTER_ROOM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_room_number_ = 0;
    id_ = 6;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ENTER_ROOM_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 var_room_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_var_room_number(&has_bits);
          var_room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENTER_ROOM_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ENTER_ROOM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required int32 var_room_number = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_room_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ENTER_ROOM_REQ)
  return target;
}

size_t ENTER_ROOM_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ENTER_ROOM_REQ)
  size_t total_size = 0;

  // required int32 var_room_number = 2;
  if (_internal_has_var_room_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_room_number());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENTER_ROOM_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ENTER_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const ENTER_ROOM_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENTER_ROOM_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ENTER_ROOM_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ENTER_ROOM_REQ)
    MergeFrom(*source);
  }
}

void ENTER_ROOM_REQ::MergeFrom(const ENTER_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ENTER_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_room_number_ = from.var_room_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ENTER_ROOM_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ENTER_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENTER_ROOM_REQ::CopyFrom(const ENTER_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ENTER_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENTER_ROOM_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ENTER_ROOM_REQ::InternalSwap(ENTER_ROOM_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_room_number_, other->var_room_number_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ENTER_ROOM_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LEAVE_ROOM_REQ::InitAsDefaultInstance() {
}
class LEAVE_ROOM_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<LEAVE_ROOM_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_room_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LEAVE_ROOM_REQ::LEAVE_ROOM_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LEAVE_ROOM_REQ)
}
LEAVE_ROOM_REQ::LEAVE_ROOM_REQ(const LEAVE_ROOM_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_id_, &from.var_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:LEAVE_ROOM_REQ)
}

void LEAVE_ROOM_REQ::SharedCtor() {
  ::memset(&var_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_room_number_) -
      reinterpret_cast<char*>(&var_id_)) + sizeof(var_room_number_));
  id_ = 8;
}

LEAVE_ROOM_REQ::~LEAVE_ROOM_REQ() {
  // @@protoc_insertion_point(destructor:LEAVE_ROOM_REQ)
  SharedDtor();
}

void LEAVE_ROOM_REQ::SharedDtor() {
}

void LEAVE_ROOM_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LEAVE_ROOM_REQ& LEAVE_ROOM_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LEAVE_ROOM_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void LEAVE_ROOM_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:LEAVE_ROOM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&var_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_room_number_) -
        reinterpret_cast<char*>(&var_id_)) + sizeof(var_room_number_));
    id_ = 8;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LEAVE_ROOM_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 var_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_var_id(&has_bits);
          var_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 var_room_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_room_number(&has_bits);
          var_room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LEAVE_ROOM_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LEAVE_ROOM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_REQ];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required int32 var_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_id(), target);
  }

  // required int32 var_room_number = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_room_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LEAVE_ROOM_REQ)
  return target;
}

size_t LEAVE_ROOM_REQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LEAVE_ROOM_REQ)
  size_t total_size = 0;

  if (_internal_has_var_id()) {
    // required int32 var_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_id());
  }

  if (_internal_has_var_room_number()) {
    // required int32 var_room_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_room_number());
  }

  return total_size;
}
size_t LEAVE_ROOM_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LEAVE_ROOM_REQ)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 var_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_id());

    // required int32 var_room_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_room_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LEAVE_ROOM_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LEAVE_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const LEAVE_ROOM_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LEAVE_ROOM_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LEAVE_ROOM_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LEAVE_ROOM_REQ)
    MergeFrom(*source);
  }
}

void LEAVE_ROOM_REQ::MergeFrom(const LEAVE_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LEAVE_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      var_id_ = from.var_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      var_room_number_ = from.var_room_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LEAVE_ROOM_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LEAVE_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LEAVE_ROOM_REQ::CopyFrom(const LEAVE_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LEAVE_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LEAVE_ROOM_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void LEAVE_ROOM_REQ::InternalSwap(LEAVE_ROOM_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_id_, other->var_id_);
  swap(var_room_number_, other->var_room_number_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LEAVE_ROOM_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROOM_LIST_REQ::InitAsDefaultInstance() {
}
class ROOM_LIST_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<ROOM_LIST_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ROOM_LIST_REQ::ROOM_LIST_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ROOM_LIST_REQ)
}
ROOM_LIST_REQ::ROOM_LIST_REQ(const ROOM_LIST_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:ROOM_LIST_REQ)
}

void ROOM_LIST_REQ::SharedCtor() {
  id_ = 13;
}

ROOM_LIST_REQ::~ROOM_LIST_REQ() {
  // @@protoc_insertion_point(destructor:ROOM_LIST_REQ)
  SharedDtor();
}

void ROOM_LIST_REQ::SharedDtor() {
}

void ROOM_LIST_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROOM_LIST_REQ& ROOM_LIST_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROOM_LIST_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void ROOM_LIST_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:ROOM_LIST_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 13;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ROOM_LIST_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROOM_LIST_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ROOM_LIST_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ROOM_LIST_REQ)
  return target;
}

size_t ROOM_LIST_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ROOM_LIST_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROOM_LIST_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ROOM_LIST_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const ROOM_LIST_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROOM_LIST_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ROOM_LIST_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ROOM_LIST_REQ)
    MergeFrom(*source);
  }
}

void ROOM_LIST_REQ::MergeFrom(const ROOM_LIST_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ROOM_LIST_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void ROOM_LIST_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ROOM_LIST_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROOM_LIST_REQ::CopyFrom(const ROOM_LIST_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ROOM_LIST_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROOM_LIST_REQ::IsInitialized() const {
  return true;
}

void ROOM_LIST_REQ::InternalSwap(ROOM_LIST_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROOM_LIST_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROOM_PASS_THROUGH_REQ::InitAsDefaultInstance() {
}
class ROOM_PASS_THROUGH_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<ROOM_PASS_THROUGH_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_var_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_message_int(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_room_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ROOM_PASS_THROUGH_REQ::ROOM_PASS_THROUGH_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ROOM_PASS_THROUGH_REQ)
}
ROOM_PASS_THROUGH_REQ::ROOM_PASS_THROUGH_REQ(const ROOM_PASS_THROUGH_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_message()) {
    var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
  }
  var_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_time()) {
    var_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_time_);
  }
  ::memcpy(&var_message_int_, &from.var_message_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_message_int_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ROOM_PASS_THROUGH_REQ)
}

void ROOM_PASS_THROUGH_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ROOM_PASS_THROUGH_REQ_CLI_2eGS_2eproto.base);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_message_int_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_room_number_) -
      reinterpret_cast<char*>(&var_message_int_)) + sizeof(var_room_number_));
  id_ = 17;
}

ROOM_PASS_THROUGH_REQ::~ROOM_PASS_THROUGH_REQ() {
  // @@protoc_insertion_point(destructor:ROOM_PASS_THROUGH_REQ)
  SharedDtor();
}

void ROOM_PASS_THROUGH_REQ::SharedDtor() {
  var_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ROOM_PASS_THROUGH_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROOM_PASS_THROUGH_REQ& ROOM_PASS_THROUGH_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROOM_PASS_THROUGH_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void ROOM_PASS_THROUGH_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:ROOM_PASS_THROUGH_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      var_time_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&var_message_int_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_room_number_) -
        reinterpret_cast<char*>(&var_message_int_)) + sizeof(var_room_number_));
    id_ = 17;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ROOM_PASS_THROUGH_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string var_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ROOM_PASS_THROUGH_REQ.var_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 var_message_int = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_message_int(&has_bits);
          var_message_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 var_room_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_room_number(&has_bits);
          var_room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_var_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ROOM_PASS_THROUGH_REQ.var_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROOM_PASS_THROUGH_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ROOM_PASS_THROUGH_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_REQ];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required string var_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_message().data(), static_cast<int>(this->_internal_var_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ROOM_PASS_THROUGH_REQ.var_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_message(), target);
  }

  // required int32 var_message_int = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_message_int(), target);
  }

  // required int32 var_room_number = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_room_number(), target);
  }

  // required string var_time = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_time().data(), static_cast<int>(this->_internal_var_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ROOM_PASS_THROUGH_REQ.var_time");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_var_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ROOM_PASS_THROUGH_REQ)
  return target;
}

size_t ROOM_PASS_THROUGH_REQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ROOM_PASS_THROUGH_REQ)
  size_t total_size = 0;

  if (_internal_has_var_message()) {
    // required string var_message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_message());
  }

  if (_internal_has_var_time()) {
    // required string var_time = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_time());
  }

  if (_internal_has_var_message_int()) {
    // required int32 var_message_int = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_message_int());
  }

  if (_internal_has_var_room_number()) {
    // required int32 var_room_number = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_room_number());
  }

  return total_size;
}
size_t ROOM_PASS_THROUGH_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ROOM_PASS_THROUGH_REQ)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string var_message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_message());

    // required string var_time = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_time());

    // required int32 var_message_int = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_message_int());

    // required int32 var_room_number = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_room_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROOM_PASS_THROUGH_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ROOM_PASS_THROUGH_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const ROOM_PASS_THROUGH_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROOM_PASS_THROUGH_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ROOM_PASS_THROUGH_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ROOM_PASS_THROUGH_REQ)
    MergeFrom(*source);
  }
}

void ROOM_PASS_THROUGH_REQ::MergeFrom(const ROOM_PASS_THROUGH_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ROOM_PASS_THROUGH_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      var_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_time_);
    }
    if (cached_has_bits & 0x00000004u) {
      var_message_int_ = from.var_message_int_;
    }
    if (cached_has_bits & 0x00000008u) {
      var_room_number_ = from.var_room_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROOM_PASS_THROUGH_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ROOM_PASS_THROUGH_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROOM_PASS_THROUGH_REQ::CopyFrom(const ROOM_PASS_THROUGH_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ROOM_PASS_THROUGH_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROOM_PASS_THROUGH_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ROOM_PASS_THROUGH_REQ::InternalSwap(ROOM_PASS_THROUGH_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.Swap(&other->var_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_time_.Swap(&other->var_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_message_int_, other->var_message_int_);
  swap(var_room_number_, other->var_room_number_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROOM_PASS_THROUGH_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NOTICE_REQ::InitAsDefaultInstance() {
}
class NOTICE_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<NOTICE_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NOTICE_REQ::NOTICE_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NOTICE_REQ)
}
NOTICE_REQ::NOTICE_REQ(const NOTICE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:NOTICE_REQ)
}

void NOTICE_REQ::SharedCtor() {
  id_ = 19;
}

NOTICE_REQ::~NOTICE_REQ() {
  // @@protoc_insertion_point(destructor:NOTICE_REQ)
  SharedDtor();
}

void NOTICE_REQ::SharedDtor() {
}

void NOTICE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NOTICE_REQ& NOTICE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NOTICE_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void NOTICE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:NOTICE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 19;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NOTICE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NOTICE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NOTICE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NOTICE_REQ)
  return target;
}

size_t NOTICE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NOTICE_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NOTICE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NOTICE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const NOTICE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NOTICE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NOTICE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NOTICE_REQ)
    MergeFrom(*source);
  }
}

void NOTICE_REQ::MergeFrom(const NOTICE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NOTICE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void NOTICE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NOTICE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NOTICE_REQ::CopyFrom(const NOTICE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NOTICE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NOTICE_REQ::IsInitialized() const {
  return true;
}

void NOTICE_REQ::InternalSwap(NOTICE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NOTICE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BITMAP_MESSAGE_REQ::InitAsDefaultInstance() {
}
class BITMAP_MESSAGE_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<BITMAP_MESSAGE_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_var_room_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BITMAP_MESSAGE_REQ::BITMAP_MESSAGE_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BITMAP_MESSAGE_REQ)
}
BITMAP_MESSAGE_REQ::BITMAP_MESSAGE_REQ(const BITMAP_MESSAGE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_message_(from.var_message_),
      var_to_player_id_(from.var_to_player_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_room_number_, &from.var_room_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_room_number_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:BITMAP_MESSAGE_REQ)
}

void BITMAP_MESSAGE_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BITMAP_MESSAGE_REQ_CLI_2eGS_2eproto.base);
  ::memset(&var_room_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_height_) -
      reinterpret_cast<char*>(&var_room_number_)) + sizeof(var_height_));
  id_ = 10;
}

BITMAP_MESSAGE_REQ::~BITMAP_MESSAGE_REQ() {
  // @@protoc_insertion_point(destructor:BITMAP_MESSAGE_REQ)
  SharedDtor();
}

void BITMAP_MESSAGE_REQ::SharedDtor() {
}

void BITMAP_MESSAGE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BITMAP_MESSAGE_REQ& BITMAP_MESSAGE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BITMAP_MESSAGE_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void BITMAP_MESSAGE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:BITMAP_MESSAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_message_.Clear();
  var_to_player_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&var_room_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_height_) -
        reinterpret_cast<char*>(&var_room_number_)) + sizeof(var_height_));
    id_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BITMAP_MESSAGE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated bytes var_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_var_message();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 var_room_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_room_number(&has_bits);
          var_room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 var_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_type(&has_bits);
          var_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 var_to_player_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_var_to_player_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 var_width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_var_width(&has_bits);
          var_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 var_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_var_height(&has_bits);
          var_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BITMAP_MESSAGE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BITMAP_MESSAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_REQ];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // repeated bytes var_message = 2;
  for (int i = 0, n = this->_internal_var_message_size(); i < n; i++) {
    const auto& s = this->_internal_var_message(i);
    target = stream->WriteBytes(2, s, target);
  }

  // required int32 var_room_number = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_room_number(), target);
  }

  // required int32 var_type = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_type(), target);
  }

  // repeated int64 var_to_player_id = 5;
  for (int i = 0, n = this->_internal_var_to_player_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_var_to_player_id(i), target);
  }

  // required int32 var_width = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_var_width(), target);
  }

  // required int32 var_height = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_var_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BITMAP_MESSAGE_REQ)
  return target;
}

size_t BITMAP_MESSAGE_REQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:BITMAP_MESSAGE_REQ)
  size_t total_size = 0;

  if (_internal_has_var_room_number()) {
    // required int32 var_room_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_room_number());
  }

  if (_internal_has_var_type()) {
    // required int32 var_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_type());
  }

  if (_internal_has_var_width()) {
    // required int32 var_width = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_width());
  }

  if (_internal_has_var_height()) {
    // required int32 var_height = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_height());
  }

  return total_size;
}
size_t BITMAP_MESSAGE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BITMAP_MESSAGE_REQ)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 var_room_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_room_number());

    // required int32 var_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_type());

    // required int32 var_width = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_width());

    // required int32 var_height = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes var_message = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(var_message_.size());
  for (int i = 0, n = var_message_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      var_message_.Get(i));
  }

  // repeated int64 var_to_player_id = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->var_to_player_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_var_to_player_id_size());
    total_size += data_size;
  }

  // optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BITMAP_MESSAGE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BITMAP_MESSAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const BITMAP_MESSAGE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BITMAP_MESSAGE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BITMAP_MESSAGE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BITMAP_MESSAGE_REQ)
    MergeFrom(*source);
  }
}

void BITMAP_MESSAGE_REQ::MergeFrom(const BITMAP_MESSAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BITMAP_MESSAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_message_.MergeFrom(from.var_message_);
  var_to_player_id_.MergeFrom(from.var_to_player_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      var_room_number_ = from.var_room_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      var_type_ = from.var_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_width_ = from.var_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      var_height_ = from.var_height_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BITMAP_MESSAGE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BITMAP_MESSAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BITMAP_MESSAGE_REQ::CopyFrom(const BITMAP_MESSAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BITMAP_MESSAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BITMAP_MESSAGE_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void BITMAP_MESSAGE_REQ::InternalSwap(BITMAP_MESSAGE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.InternalSwap(&other->var_message_);
  var_to_player_id_.InternalSwap(&other->var_to_player_id_);
  swap(var_room_number_, other->var_room_number_);
  swap(var_type_, other->var_type_);
  swap(var_width_, other->var_width_);
  swap(var_height_, other->var_height_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BITMAP_MESSAGE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AUDIO_MESSAGE_REQ::InitAsDefaultInstance() {
}
class AUDIO_MESSAGE_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<AUDIO_MESSAGE_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_room_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AUDIO_MESSAGE_REQ::AUDIO_MESSAGE_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AUDIO_MESSAGE_REQ)
}
AUDIO_MESSAGE_REQ::AUDIO_MESSAGE_REQ(const AUDIO_MESSAGE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_message_(from.var_message_),
      var_to_player_id_(from.var_to_player_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_room_number_, &from.var_room_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_room_number_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:AUDIO_MESSAGE_REQ)
}

void AUDIO_MESSAGE_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AUDIO_MESSAGE_REQ_CLI_2eGS_2eproto.base);
  var_room_number_ = 0;
  id_ = 21;
}

AUDIO_MESSAGE_REQ::~AUDIO_MESSAGE_REQ() {
  // @@protoc_insertion_point(destructor:AUDIO_MESSAGE_REQ)
  SharedDtor();
}

void AUDIO_MESSAGE_REQ::SharedDtor() {
}

void AUDIO_MESSAGE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AUDIO_MESSAGE_REQ& AUDIO_MESSAGE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AUDIO_MESSAGE_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void AUDIO_MESSAGE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:AUDIO_MESSAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_message_.Clear();
  var_to_player_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_room_number_ = 0;
    id_ = 21;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* AUDIO_MESSAGE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated bytes var_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_var_message();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 var_room_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_room_number(&has_bits);
          var_room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 var_to_player_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_var_to_player_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AUDIO_MESSAGE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AUDIO_MESSAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // repeated bytes var_message = 2;
  for (int i = 0, n = this->_internal_var_message_size(); i < n; i++) {
    const auto& s = this->_internal_var_message(i);
    target = stream->WriteBytes(2, s, target);
  }

  // required int32 var_room_number = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_room_number(), target);
  }

  // repeated int64 var_to_player_id = 4;
  for (int i = 0, n = this->_internal_var_to_player_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_to_player_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AUDIO_MESSAGE_REQ)
  return target;
}

size_t AUDIO_MESSAGE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AUDIO_MESSAGE_REQ)
  size_t total_size = 0;

  // required int32 var_room_number = 3;
  if (_internal_has_var_room_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_room_number());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes var_message = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(var_message_.size());
  for (int i = 0, n = var_message_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      var_message_.Get(i));
  }

  // repeated int64 var_to_player_id = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->var_to_player_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_var_to_player_id_size());
    total_size += data_size;
  }

  // optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AUDIO_MESSAGE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AUDIO_MESSAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const AUDIO_MESSAGE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AUDIO_MESSAGE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AUDIO_MESSAGE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AUDIO_MESSAGE_REQ)
    MergeFrom(*source);
  }
}

void AUDIO_MESSAGE_REQ::MergeFrom(const AUDIO_MESSAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AUDIO_MESSAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_message_.MergeFrom(from.var_message_);
  var_to_player_id_.MergeFrom(from.var_to_player_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_room_number_ = from.var_room_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AUDIO_MESSAGE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AUDIO_MESSAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AUDIO_MESSAGE_REQ::CopyFrom(const AUDIO_MESSAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AUDIO_MESSAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AUDIO_MESSAGE_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AUDIO_MESSAGE_REQ::InternalSwap(AUDIO_MESSAGE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.InternalSwap(&other->var_message_);
  var_to_player_id_.InternalSwap(&other->var_to_player_id_);
  swap(var_room_number_, other->var_room_number_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AUDIO_MESSAGE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void STOP_STREAM_REQ::InitAsDefaultInstance() {
}
class STOP_STREAM_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<STOP_STREAM_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_to_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

STOP_STREAM_REQ::STOP_STREAM_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:STOP_STREAM_REQ)
}
STOP_STREAM_REQ::STOP_STREAM_REQ(const STOP_STREAM_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_to_player_id_, &from.var_to_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_to_player_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:STOP_STREAM_REQ)
}

void STOP_STREAM_REQ::SharedCtor() {
  var_to_player_id_ = PROTOBUF_LONGLONG(0);
  id_ = 48;
}

STOP_STREAM_REQ::~STOP_STREAM_REQ() {
  // @@protoc_insertion_point(destructor:STOP_STREAM_REQ)
  SharedDtor();
}

void STOP_STREAM_REQ::SharedDtor() {
}

void STOP_STREAM_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const STOP_STREAM_REQ& STOP_STREAM_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_STOP_STREAM_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void STOP_STREAM_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:STOP_STREAM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_to_player_id_ = PROTOBUF_LONGLONG(0);
    id_ = 48;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* STOP_STREAM_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_STOP_STREAM_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int64 var_to_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_var_to_player_id(&has_bits);
          var_to_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* STOP_STREAM_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:STOP_STREAM_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_STOP_STREAM_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required int64 var_to_player_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_var_to_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:STOP_STREAM_REQ)
  return target;
}

size_t STOP_STREAM_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:STOP_STREAM_REQ)
  size_t total_size = 0;

  // required int64 var_to_player_id = 2;
  if (_internal_has_var_to_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_var_to_player_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_STOP_STREAM_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void STOP_STREAM_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:STOP_STREAM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const STOP_STREAM_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<STOP_STREAM_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:STOP_STREAM_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:STOP_STREAM_REQ)
    MergeFrom(*source);
  }
}

void STOP_STREAM_REQ::MergeFrom(const STOP_STREAM_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:STOP_STREAM_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_to_player_id_ = from.var_to_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void STOP_STREAM_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:STOP_STREAM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STOP_STREAM_REQ::CopyFrom(const STOP_STREAM_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:STOP_STREAM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STOP_STREAM_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void STOP_STREAM_REQ::InternalSwap(STOP_STREAM_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_to_player_id_, other->var_to_player_id_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STOP_STREAM_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CAMERA_WAKE_UP_REQ::InitAsDefaultInstance() {
}
class CAMERA_WAKE_UP_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<CAMERA_WAKE_UP_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_var_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_room_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_to_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_machine_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAMERA_WAKE_UP_REQ::CAMERA_WAKE_UP_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAMERA_WAKE_UP_REQ)
}
CAMERA_WAKE_UP_REQ::CAMERA_WAKE_UP_REQ(const CAMERA_WAKE_UP_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_machine_id()) {
    var_machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_id_);
  }
  ::memcpy(&var_type_, &from.var_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_type_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:CAMERA_WAKE_UP_REQ)
}

void CAMERA_WAKE_UP_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CAMERA_WAKE_UP_REQ_CLI_2eGS_2eproto.base);
  var_machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_to_player_id_) -
      reinterpret_cast<char*>(&var_type_)) + sizeof(var_to_player_id_));
  id_ = 46;
}

CAMERA_WAKE_UP_REQ::~CAMERA_WAKE_UP_REQ() {
  // @@protoc_insertion_point(destructor:CAMERA_WAKE_UP_REQ)
  SharedDtor();
}

void CAMERA_WAKE_UP_REQ::SharedDtor() {
  var_machine_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAMERA_WAKE_UP_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAMERA_WAKE_UP_REQ& CAMERA_WAKE_UP_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CAMERA_WAKE_UP_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void CAMERA_WAKE_UP_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CAMERA_WAKE_UP_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    var_machine_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&var_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_to_player_id_) -
        reinterpret_cast<char*>(&var_type_)) + sizeof(var_to_player_id_));
    id_ = 46;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CAMERA_WAKE_UP_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_WAKE_UP_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 var_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_var_type(&has_bits);
          var_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 var_room_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_room_number(&has_bits);
          var_room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 var_to_player_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_to_player_id(&has_bits);
          var_to_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_machine_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_var_machine_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAMERA_WAKE_UP_REQ.var_machine_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAMERA_WAKE_UP_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAMERA_WAKE_UP_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_WAKE_UP_REQ];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required int32 var_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_type(), target);
  }

  // required int32 var_room_number = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_room_number(), target);
  }

  // required int64 var_to_player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_to_player_id(), target);
  }

  // required string var_machine_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_machine_id().data(), static_cast<int>(this->_internal_var_machine_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAMERA_WAKE_UP_REQ.var_machine_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_var_machine_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAMERA_WAKE_UP_REQ)
  return target;
}

size_t CAMERA_WAKE_UP_REQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CAMERA_WAKE_UP_REQ)
  size_t total_size = 0;

  if (_internal_has_var_machine_id()) {
    // required string var_machine_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_machine_id());
  }

  if (_internal_has_var_type()) {
    // required int32 var_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_type());
  }

  if (_internal_has_var_room_number()) {
    // required int32 var_room_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_room_number());
  }

  if (_internal_has_var_to_player_id()) {
    // required int64 var_to_player_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_var_to_player_id());
  }

  return total_size;
}
size_t CAMERA_WAKE_UP_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAMERA_WAKE_UP_REQ)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string var_machine_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_machine_id());

    // required int32 var_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_type());

    // required int32 var_room_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_room_number());

    // required int64 var_to_player_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_var_to_player_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_WAKE_UP_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAMERA_WAKE_UP_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAMERA_WAKE_UP_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const CAMERA_WAKE_UP_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAMERA_WAKE_UP_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAMERA_WAKE_UP_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAMERA_WAKE_UP_REQ)
    MergeFrom(*source);
  }
}

void CAMERA_WAKE_UP_REQ::MergeFrom(const CAMERA_WAKE_UP_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAMERA_WAKE_UP_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      var_type_ = from.var_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_room_number_ = from.var_room_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      var_to_player_id_ = from.var_to_player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAMERA_WAKE_UP_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAMERA_WAKE_UP_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAMERA_WAKE_UP_REQ::CopyFrom(const CAMERA_WAKE_UP_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAMERA_WAKE_UP_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAMERA_WAKE_UP_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void CAMERA_WAKE_UP_REQ::InternalSwap(CAMERA_WAKE_UP_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_machine_id_.Swap(&other->var_machine_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_type_, other->var_type_);
  swap(var_room_number_, other->var_room_number_);
  swap(var_to_player_id_, other->var_to_player_id_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAMERA_WAKE_UP_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PRAY_MESSAGE_REQ::InitAsDefaultInstance() {
}
class PRAY_MESSAGE_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<PRAY_MESSAGE_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PRAY_MESSAGE_REQ::PRAY_MESSAGE_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PRAY_MESSAGE_REQ)
}
PRAY_MESSAGE_REQ::PRAY_MESSAGE_REQ(const PRAY_MESSAGE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:PRAY_MESSAGE_REQ)
}

void PRAY_MESSAGE_REQ::SharedCtor() {
  id_ = 23;
}

PRAY_MESSAGE_REQ::~PRAY_MESSAGE_REQ() {
  // @@protoc_insertion_point(destructor:PRAY_MESSAGE_REQ)
  SharedDtor();
}

void PRAY_MESSAGE_REQ::SharedDtor() {
}

void PRAY_MESSAGE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PRAY_MESSAGE_REQ& PRAY_MESSAGE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PRAY_MESSAGE_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void PRAY_MESSAGE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:PRAY_MESSAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 23;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PRAY_MESSAGE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PRAY_MESSAGE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRAY_MESSAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRAY_MESSAGE_REQ)
  return target;
}

size_t PRAY_MESSAGE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRAY_MESSAGE_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PRAY_MESSAGE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PRAY_MESSAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PRAY_MESSAGE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PRAY_MESSAGE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PRAY_MESSAGE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PRAY_MESSAGE_REQ)
    MergeFrom(*source);
  }
}

void PRAY_MESSAGE_REQ::MergeFrom(const PRAY_MESSAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRAY_MESSAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void PRAY_MESSAGE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PRAY_MESSAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRAY_MESSAGE_REQ::CopyFrom(const PRAY_MESSAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRAY_MESSAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRAY_MESSAGE_REQ::IsInitialized() const {
  return true;
}

void PRAY_MESSAGE_REQ::InternalSwap(PRAY_MESSAGE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PRAY_MESSAGE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PRAY_MESSAGE_REG_REQ::InitAsDefaultInstance() {
}
class PRAY_MESSAGE_REG_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<PRAY_MESSAGE_REG_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PRAY_MESSAGE_REG_REQ::PRAY_MESSAGE_REG_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PRAY_MESSAGE_REG_REQ)
}
PRAY_MESSAGE_REG_REQ::PRAY_MESSAGE_REG_REQ(const PRAY_MESSAGE_REG_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_message()) {
    var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:PRAY_MESSAGE_REG_REQ)
}

void PRAY_MESSAGE_REG_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PRAY_MESSAGE_REG_REQ_CLI_2eGS_2eproto.base);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 25;
}

PRAY_MESSAGE_REG_REQ::~PRAY_MESSAGE_REG_REQ() {
  // @@protoc_insertion_point(destructor:PRAY_MESSAGE_REG_REQ)
  SharedDtor();
}

void PRAY_MESSAGE_REG_REQ::SharedDtor() {
  var_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PRAY_MESSAGE_REG_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PRAY_MESSAGE_REG_REQ& PRAY_MESSAGE_REG_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PRAY_MESSAGE_REG_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void PRAY_MESSAGE_REG_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:PRAY_MESSAGE_REG_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_message_.ClearNonDefaultToEmptyNoArena();
    }
    id_ = 25;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PRAY_MESSAGE_REG_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REG_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string var_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PRAY_MESSAGE_REG_REQ.var_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PRAY_MESSAGE_REG_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PRAY_MESSAGE_REG_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REG_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional string var_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_message().data(), static_cast<int>(this->_internal_var_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "PRAY_MESSAGE_REG_REQ.var_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PRAY_MESSAGE_REG_REQ)
  return target;
}

size_t PRAY_MESSAGE_REG_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PRAY_MESSAGE_REG_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string var_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_var_message());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REG_REQ];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PRAY_MESSAGE_REG_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PRAY_MESSAGE_REG_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PRAY_MESSAGE_REG_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PRAY_MESSAGE_REG_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PRAY_MESSAGE_REG_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PRAY_MESSAGE_REG_REQ)
    MergeFrom(*source);
  }
}

void PRAY_MESSAGE_REG_REQ::MergeFrom(const PRAY_MESSAGE_REG_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PRAY_MESSAGE_REG_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PRAY_MESSAGE_REG_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PRAY_MESSAGE_REG_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRAY_MESSAGE_REG_REQ::CopyFrom(const PRAY_MESSAGE_REG_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PRAY_MESSAGE_REG_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRAY_MESSAGE_REG_REQ::IsInitialized() const {
  return true;
}

void PRAY_MESSAGE_REG_REQ::InternalSwap(PRAY_MESSAGE_REG_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.Swap(&other->var_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PRAY_MESSAGE_REG_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QNA_REQ::InitAsDefaultInstance() {
}
class QNA_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<QNA_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

QNA_REQ::QNA_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:QNA_REQ)
}
QNA_REQ::QNA_REQ(const QNA_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_message()) {
    var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:QNA_REQ)
}

void QNA_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QNA_REQ_CLI_2eGS_2eproto.base);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 27;
}

QNA_REQ::~QNA_REQ() {
  // @@protoc_insertion_point(destructor:QNA_REQ)
  SharedDtor();
}

void QNA_REQ::SharedDtor() {
  var_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QNA_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QNA_REQ& QNA_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QNA_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void QNA_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:QNA_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_message_.ClearNonDefaultToEmptyNoArena();
    }
    id_ = 27;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* QNA_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_QNA_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string var_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "QNA_REQ.var_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QNA_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QNA_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_QNA_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional string var_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_message().data(), static_cast<int>(this->_internal_var_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "QNA_REQ.var_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QNA_REQ)
  return target;
}

size_t QNA_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QNA_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string var_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_var_message());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_QNA_REQ];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QNA_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:QNA_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const QNA_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QNA_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:QNA_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:QNA_REQ)
    MergeFrom(*source);
  }
}

void QNA_REQ::MergeFrom(const QNA_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:QNA_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QNA_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:QNA_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QNA_REQ::CopyFrom(const QNA_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QNA_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QNA_REQ::IsInitialized() const {
  return true;
}

void QNA_REQ::InternalSwap(QNA_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.Swap(&other->var_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QNA_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MAIL_LIST_REQ::InitAsDefaultInstance() {
}
class MAIL_LIST_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<MAIL_LIST_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MAIL_LIST_REQ::MAIL_LIST_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MAIL_LIST_REQ)
}
MAIL_LIST_REQ::MAIL_LIST_REQ(const MAIL_LIST_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:MAIL_LIST_REQ)
}

void MAIL_LIST_REQ::SharedCtor() {
  id_ = 29;
}

MAIL_LIST_REQ::~MAIL_LIST_REQ() {
  // @@protoc_insertion_point(destructor:MAIL_LIST_REQ)
  SharedDtor();
}

void MAIL_LIST_REQ::SharedDtor() {
}

void MAIL_LIST_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MAIL_LIST_REQ& MAIL_LIST_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MAIL_LIST_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void MAIL_LIST_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:MAIL_LIST_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 29;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MAIL_LIST_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_MAIL_LIST_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MAIL_LIST_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MAIL_LIST_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_MAIL_LIST_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MAIL_LIST_REQ)
  return target;
}

size_t MAIL_LIST_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MAIL_LIST_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_MAIL_LIST_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MAIL_LIST_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MAIL_LIST_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const MAIL_LIST_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MAIL_LIST_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MAIL_LIST_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MAIL_LIST_REQ)
    MergeFrom(*source);
  }
}

void MAIL_LIST_REQ::MergeFrom(const MAIL_LIST_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MAIL_LIST_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void MAIL_LIST_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MAIL_LIST_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MAIL_LIST_REQ::CopyFrom(const MAIL_LIST_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MAIL_LIST_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MAIL_LIST_REQ::IsInitialized() const {
  return true;
}

void MAIL_LIST_REQ::InternalSwap(MAIL_LIST_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MAIL_LIST_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void REG_REQ::InitAsDefaultInstance() {
}
class REG_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<REG_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

REG_REQ::REG_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:REG_REQ)
}
REG_REQ::REG_REQ(const REG_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_id_, &from.var_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:REG_REQ)
}

void REG_REQ::SharedCtor() {
  var_id_ = 0;
  id_ = 37;
}

REG_REQ::~REG_REQ() {
  // @@protoc_insertion_point(destructor:REG_REQ)
  SharedDtor();
}

void REG_REQ::SharedDtor() {
}

void REG_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const REG_REQ& REG_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_REG_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void REG_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:REG_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_id_ = 0;
    id_ = 37;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* REG_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_REG_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 var_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_var_id(&has_bits);
          var_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* REG_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:REG_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_REG_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required int32 var_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_var_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:REG_REQ)
  return target;
}

size_t REG_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:REG_REQ)
  size_t total_size = 0;

  // required int32 var_id = 2;
  if (_internal_has_var_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_REG_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void REG_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:REG_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const REG_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<REG_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:REG_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:REG_REQ)
    MergeFrom(*source);
  }
}

void REG_REQ::MergeFrom(const REG_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:REG_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_id_ = from.var_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void REG_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:REG_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REG_REQ::CopyFrom(const REG_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:REG_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REG_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void REG_REQ::InternalSwap(REG_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_id_, other->var_id_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata REG_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CLIENT_LOGOUT_REQ::InitAsDefaultInstance() {
}
class CLIENT_LOGOUT_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<CLIENT_LOGOUT_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CLIENT_LOGOUT_REQ::CLIENT_LOGOUT_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CLIENT_LOGOUT_REQ)
}
CLIENT_LOGOUT_REQ::CLIENT_LOGOUT_REQ(const CLIENT_LOGOUT_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CLIENT_LOGOUT_REQ)
}

void CLIENT_LOGOUT_REQ::SharedCtor() {
  id_ = 39;
}

CLIENT_LOGOUT_REQ::~CLIENT_LOGOUT_REQ() {
  // @@protoc_insertion_point(destructor:CLIENT_LOGOUT_REQ)
  SharedDtor();
}

void CLIENT_LOGOUT_REQ::SharedDtor() {
}

void CLIENT_LOGOUT_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CLIENT_LOGOUT_REQ& CLIENT_LOGOUT_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CLIENT_LOGOUT_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void CLIENT_LOGOUT_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CLIENT_LOGOUT_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 39;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CLIENT_LOGOUT_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_LOGOUT_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CLIENT_LOGOUT_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CLIENT_LOGOUT_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_LOGOUT_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CLIENT_LOGOUT_REQ)
  return target;
}

size_t CLIENT_LOGOUT_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CLIENT_LOGOUT_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_LOGOUT_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CLIENT_LOGOUT_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CLIENT_LOGOUT_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const CLIENT_LOGOUT_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CLIENT_LOGOUT_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CLIENT_LOGOUT_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CLIENT_LOGOUT_REQ)
    MergeFrom(*source);
  }
}

void CLIENT_LOGOUT_REQ::MergeFrom(const CLIENT_LOGOUT_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CLIENT_LOGOUT_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void CLIENT_LOGOUT_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CLIENT_LOGOUT_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLIENT_LOGOUT_REQ::CopyFrom(const CLIENT_LOGOUT_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CLIENT_LOGOUT_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLIENT_LOGOUT_REQ::IsInitialized() const {
  return true;
}

void CLIENT_LOGOUT_REQ::InternalSwap(CLIENT_LOGOUT_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CLIENT_LOGOUT_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CAMERA_CONTROL_REQ::InitAsDefaultInstance() {
}
class CAMERA_CONTROL_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<CAMERA_CONTROL_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_machine_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CAMERA_CONTROL_REQ::CAMERA_CONTROL_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAMERA_CONTROL_REQ)
}
CAMERA_CONTROL_REQ::CAMERA_CONTROL_REQ(const CAMERA_CONTROL_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_machine_id()) {
    var_machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_id_);
  }
  ::memcpy(&var_player_id_, &from.var_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_player_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:CAMERA_CONTROL_REQ)
}

void CAMERA_CONTROL_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CAMERA_CONTROL_REQ_CLI_2eGS_2eproto.base);
  var_machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_type_) -
      reinterpret_cast<char*>(&var_player_id_)) + sizeof(var_type_));
  id_ = 42;
}

CAMERA_CONTROL_REQ::~CAMERA_CONTROL_REQ() {
  // @@protoc_insertion_point(destructor:CAMERA_CONTROL_REQ)
  SharedDtor();
}

void CAMERA_CONTROL_REQ::SharedDtor() {
  var_machine_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CAMERA_CONTROL_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAMERA_CONTROL_REQ& CAMERA_CONTROL_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CAMERA_CONTROL_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void CAMERA_CONTROL_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CAMERA_CONTROL_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    var_machine_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&var_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_type_) -
        reinterpret_cast<char*>(&var_player_id_)) + sizeof(var_type_));
    id_ = 42;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CAMERA_CONTROL_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_CONTROL_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .CameraControlType var_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CameraControlType_IsValid(val))) {
            _internal_set_var_type(static_cast<::CameraControlType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string var_machine_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_var_machine_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CAMERA_CONTROL_REQ.var_machine_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 var_player_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_player_id(&has_bits);
          var_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAMERA_CONTROL_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAMERA_CONTROL_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_CONTROL_REQ];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required .CameraControlType var_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_type(), target);
  }

  // required string var_machine_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_machine_id().data(), static_cast<int>(this->_internal_var_machine_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CAMERA_CONTROL_REQ.var_machine_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_var_machine_id(), target);
  }

  // required int64 var_player_id = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAMERA_CONTROL_REQ)
  return target;
}

size_t CAMERA_CONTROL_REQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CAMERA_CONTROL_REQ)
  size_t total_size = 0;

  if (_internal_has_var_machine_id()) {
    // required string var_machine_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_machine_id());
  }

  if (_internal_has_var_player_id()) {
    // required int64 var_player_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_var_player_id());
  }

  if (_internal_has_var_type()) {
    // required .CameraControlType var_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_type());
  }

  return total_size;
}
size_t CAMERA_CONTROL_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAMERA_CONTROL_REQ)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string var_machine_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_machine_id());

    // required int64 var_player_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_var_player_id());

    // required .CameraControlType var_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_CONTROL_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAMERA_CONTROL_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAMERA_CONTROL_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const CAMERA_CONTROL_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAMERA_CONTROL_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAMERA_CONTROL_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAMERA_CONTROL_REQ)
    MergeFrom(*source);
  }
}

void CAMERA_CONTROL_REQ::MergeFrom(const CAMERA_CONTROL_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAMERA_CONTROL_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      var_player_id_ = from.var_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_type_ = from.var_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAMERA_CONTROL_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAMERA_CONTROL_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAMERA_CONTROL_REQ::CopyFrom(const CAMERA_CONTROL_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAMERA_CONTROL_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAMERA_CONTROL_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CAMERA_CONTROL_REQ::InternalSwap(CAMERA_CONTROL_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_machine_id_.Swap(&other->var_machine_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_player_id_, other->var_player_id_);
  swap(var_type_, other->var_type_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAMERA_CONTROL_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MPEG2TS_MESSAGE_REQ::InitAsDefaultInstance() {
}
class MPEG2TS_MESSAGE_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<MPEG2TS_MESSAGE_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_room_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

MPEG2TS_MESSAGE_REQ::MPEG2TS_MESSAGE_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MPEG2TS_MESSAGE_REQ)
}
MPEG2TS_MESSAGE_REQ::MPEG2TS_MESSAGE_REQ(const MPEG2TS_MESSAGE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_message_(from.var_message_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_room_number_, &from.var_room_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_room_number_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:MPEG2TS_MESSAGE_REQ)
}

void MPEG2TS_MESSAGE_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MPEG2TS_MESSAGE_REQ_CLI_2eGS_2eproto.base);
  ::memset(&var_room_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_type_) -
      reinterpret_cast<char*>(&var_room_number_)) + sizeof(var_type_));
  id_ = 44;
}

MPEG2TS_MESSAGE_REQ::~MPEG2TS_MESSAGE_REQ() {
  // @@protoc_insertion_point(destructor:MPEG2TS_MESSAGE_REQ)
  SharedDtor();
}

void MPEG2TS_MESSAGE_REQ::SharedDtor() {
}

void MPEG2TS_MESSAGE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MPEG2TS_MESSAGE_REQ& MPEG2TS_MESSAGE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MPEG2TS_MESSAGE_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void MPEG2TS_MESSAGE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:MPEG2TS_MESSAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&var_room_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_type_) -
        reinterpret_cast<char*>(&var_room_number_)) + sizeof(var_type_));
    id_ = 44;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MPEG2TS_MESSAGE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_MESSAGE_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated bytes var_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_var_message();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required int32 var_room_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_room_number(&has_bits);
          var_room_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 var_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_type(&has_bits);
          var_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MPEG2TS_MESSAGE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MPEG2TS_MESSAGE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_MESSAGE_REQ];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // repeated bytes var_message = 2;
  for (int i = 0, n = this->_internal_var_message_size(); i < n; i++) {
    const auto& s = this->_internal_var_message(i);
    target = stream->WriteBytes(2, s, target);
  }

  // required int32 var_room_number = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_room_number(), target);
  }

  // required int32 var_type = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MPEG2TS_MESSAGE_REQ)
  return target;
}

size_t MPEG2TS_MESSAGE_REQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MPEG2TS_MESSAGE_REQ)
  size_t total_size = 0;

  if (_internal_has_var_room_number()) {
    // required int32 var_room_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_room_number());
  }

  if (_internal_has_var_type()) {
    // required int32 var_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_type());
  }

  return total_size;
}
size_t MPEG2TS_MESSAGE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MPEG2TS_MESSAGE_REQ)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 var_room_number = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_room_number());

    // required int32 var_type = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes var_message = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(var_message_.size());
  for (int i = 0, n = var_message_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      var_message_.Get(i));
  }

  // optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_MESSAGE_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPEG2TS_MESSAGE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MPEG2TS_MESSAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const MPEG2TS_MESSAGE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MPEG2TS_MESSAGE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MPEG2TS_MESSAGE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MPEG2TS_MESSAGE_REQ)
    MergeFrom(*source);
  }
}

void MPEG2TS_MESSAGE_REQ::MergeFrom(const MPEG2TS_MESSAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MPEG2TS_MESSAGE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_message_.MergeFrom(from.var_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      var_room_number_ = from.var_room_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      var_type_ = from.var_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MPEG2TS_MESSAGE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MPEG2TS_MESSAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPEG2TS_MESSAGE_REQ::CopyFrom(const MPEG2TS_MESSAGE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MPEG2TS_MESSAGE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPEG2TS_MESSAGE_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MPEG2TS_MESSAGE_REQ::InternalSwap(MPEG2TS_MESSAGE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.InternalSwap(&other->var_message_);
  swap(var_room_number_, other->var_room_number_);
  swap(var_type_, other->var_type_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPEG2TS_MESSAGE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void REG_CAMERA_REQ::InitAsDefaultInstance() {
}
class REG_CAMERA_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<REG_CAMERA_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_cam_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_machine_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

REG_CAMERA_REQ::REG_CAMERA_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:REG_CAMERA_REQ)
}
REG_CAMERA_REQ::REG_CAMERA_REQ(const REG_CAMERA_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_cam_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_cam_name()) {
    var_cam_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_cam_name_);
  }
  var_machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_machine_id()) {
    var_machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_id_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:REG_CAMERA_REQ)
}

void REG_CAMERA_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_REG_CAMERA_REQ_CLI_2eGS_2eproto.base);
  var_cam_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 50;
}

REG_CAMERA_REQ::~REG_CAMERA_REQ() {
  // @@protoc_insertion_point(destructor:REG_CAMERA_REQ)
  SharedDtor();
}

void REG_CAMERA_REQ::SharedDtor() {
  var_cam_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_machine_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void REG_CAMERA_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const REG_CAMERA_REQ& REG_CAMERA_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_REG_CAMERA_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void REG_CAMERA_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:REG_CAMERA_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      var_cam_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      var_machine_id_.ClearNonDefaultToEmptyNoArena();
    }
    id_ = 50;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* REG_CAMERA_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_REG_CAMERA_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string var_cam_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_cam_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "REG_CAMERA_REQ.var_cam_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_machine_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_var_machine_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "REG_CAMERA_REQ.var_machine_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* REG_CAMERA_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:REG_CAMERA_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_REG_CAMERA_REQ];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required string var_cam_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_cam_name().data(), static_cast<int>(this->_internal_var_cam_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "REG_CAMERA_REQ.var_cam_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_cam_name(), target);
  }

  // required string var_machine_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_machine_id().data(), static_cast<int>(this->_internal_var_machine_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "REG_CAMERA_REQ.var_machine_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_var_machine_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:REG_CAMERA_REQ)
  return target;
}

size_t REG_CAMERA_REQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:REG_CAMERA_REQ)
  size_t total_size = 0;

  if (_internal_has_var_cam_name()) {
    // required string var_cam_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_cam_name());
  }

  if (_internal_has_var_machine_id()) {
    // required string var_machine_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_machine_id());
  }

  return total_size;
}
size_t REG_CAMERA_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:REG_CAMERA_REQ)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string var_cam_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_cam_name());

    // required string var_machine_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_machine_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_REG_CAMERA_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void REG_CAMERA_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:REG_CAMERA_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const REG_CAMERA_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<REG_CAMERA_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:REG_CAMERA_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:REG_CAMERA_REQ)
    MergeFrom(*source);
  }
}

void REG_CAMERA_REQ::MergeFrom(const REG_CAMERA_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:REG_CAMERA_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_cam_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_cam_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      var_machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void REG_CAMERA_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:REG_CAMERA_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REG_CAMERA_REQ::CopyFrom(const REG_CAMERA_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:REG_CAMERA_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REG_CAMERA_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void REG_CAMERA_REQ::InternalSwap(REG_CAMERA_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_cam_name_.Swap(&other->var_cam_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_machine_id_.Swap(&other->var_machine_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata REG_CAMERA_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CAMERA_LIST_REQ::InitAsDefaultInstance() {
}
class CAMERA_LIST_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<CAMERA_LIST_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CAMERA_LIST_REQ::CAMERA_LIST_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CAMERA_LIST_REQ)
}
CAMERA_LIST_REQ::CAMERA_LIST_REQ(const CAMERA_LIST_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CAMERA_LIST_REQ)
}

void CAMERA_LIST_REQ::SharedCtor() {
  id_ = 52;
}

CAMERA_LIST_REQ::~CAMERA_LIST_REQ() {
  // @@protoc_insertion_point(destructor:CAMERA_LIST_REQ)
  SharedDtor();
}

void CAMERA_LIST_REQ::SharedDtor() {
}

void CAMERA_LIST_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CAMERA_LIST_REQ& CAMERA_LIST_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CAMERA_LIST_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void CAMERA_LIST_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CAMERA_LIST_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 52;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CAMERA_LIST_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_LIST_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAMERA_LIST_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAMERA_LIST_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_LIST_REQ];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAMERA_LIST_REQ)
  return target;
}

size_t CAMERA_LIST_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAMERA_LIST_REQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_LIST_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAMERA_LIST_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAMERA_LIST_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const CAMERA_LIST_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAMERA_LIST_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAMERA_LIST_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAMERA_LIST_REQ)
    MergeFrom(*source);
  }
}

void CAMERA_LIST_REQ::MergeFrom(const CAMERA_LIST_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAMERA_LIST_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _internal_set_id(from._internal_id());
  }
}

void CAMERA_LIST_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAMERA_LIST_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAMERA_LIST_REQ::CopyFrom(const CAMERA_LIST_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAMERA_LIST_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAMERA_LIST_REQ::IsInitialized() const {
  return true;
}

void CAMERA_LIST_REQ::InternalSwap(CAMERA_LIST_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CAMERA_LIST_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MACHINE_STATUS_REQ::InitAsDefaultInstance() {
}
class MACHINE_STATUS_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<MACHINE_STATUS_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_battery(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MACHINE_STATUS_REQ::MACHINE_STATUS_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MACHINE_STATUS_REQ)
}
MACHINE_STATUS_REQ::MACHINE_STATUS_REQ(const MACHINE_STATUS_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_to_player_id_(from.var_to_player_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_battery_, &from.var_battery_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_battery_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:MACHINE_STATUS_REQ)
}

void MACHINE_STATUS_REQ::SharedCtor() {
  var_battery_ = 0;
  id_ = 54;
}

MACHINE_STATUS_REQ::~MACHINE_STATUS_REQ() {
  // @@protoc_insertion_point(destructor:MACHINE_STATUS_REQ)
  SharedDtor();
}

void MACHINE_STATUS_REQ::SharedDtor() {
}

void MACHINE_STATUS_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MACHINE_STATUS_REQ& MACHINE_STATUS_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MACHINE_STATUS_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void MACHINE_STATUS_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:MACHINE_STATUS_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_to_player_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_battery_ = 0;
    id_ = 54;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MACHINE_STATUS_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_MACHINE_STATUS_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 var_battery = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_battery(&has_bits);
          var_battery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 var_to_player_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_var_to_player_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MACHINE_STATUS_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MACHINE_STATUS_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_MACHINE_STATUS_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required int32 var_battery = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_battery(), target);
  }

  // repeated int64 var_to_player_id = 5;
  for (int i = 0, n = this->_internal_var_to_player_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_var_to_player_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MACHINE_STATUS_REQ)
  return target;
}

size_t MACHINE_STATUS_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MACHINE_STATUS_REQ)
  size_t total_size = 0;

  // required int32 var_battery = 4;
  if (_internal_has_var_battery()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_var_battery());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 var_to_player_id = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->var_to_player_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_var_to_player_id_size());
    total_size += data_size;
  }

  // optional .PROTOCOL id = 1 [default = ID_PKT_MACHINE_STATUS_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MACHINE_STATUS_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MACHINE_STATUS_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const MACHINE_STATUS_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MACHINE_STATUS_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MACHINE_STATUS_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MACHINE_STATUS_REQ)
    MergeFrom(*source);
  }
}

void MACHINE_STATUS_REQ::MergeFrom(const MACHINE_STATUS_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MACHINE_STATUS_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_to_player_id_.MergeFrom(from.var_to_player_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_battery_ = from.var_battery_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MACHINE_STATUS_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MACHINE_STATUS_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MACHINE_STATUS_REQ::CopyFrom(const MACHINE_STATUS_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MACHINE_STATUS_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MACHINE_STATUS_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MACHINE_STATUS_REQ::InternalSwap(MACHINE_STATUS_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_to_player_id_.InternalSwap(&other->var_to_player_id_);
  swap(var_battery_, other->var_battery_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MACHINE_STATUS_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VERIFY_PURCHASE_REQ::InitAsDefaultInstance() {
}
class VERIFY_PURCHASE_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<VERIFY_PURCHASE_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_purchase_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VERIFY_PURCHASE_REQ::VERIFY_PURCHASE_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VERIFY_PURCHASE_REQ)
}
VERIFY_PURCHASE_REQ::VERIFY_PURCHASE_REQ(const VERIFY_PURCHASE_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_package_name()) {
    var_package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_package_name_);
  }
  var_purchase_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_purchase_id()) {
    var_purchase_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_purchase_id_);
  }
  var_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_token()) {
    var_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_token_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:VERIFY_PURCHASE_REQ)
}

void VERIFY_PURCHASE_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VERIFY_PURCHASE_REQ_CLI_2eGS_2eproto.base);
  var_package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_purchase_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 56;
}

VERIFY_PURCHASE_REQ::~VERIFY_PURCHASE_REQ() {
  // @@protoc_insertion_point(destructor:VERIFY_PURCHASE_REQ)
  SharedDtor();
}

void VERIFY_PURCHASE_REQ::SharedDtor() {
  var_package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_purchase_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VERIFY_PURCHASE_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VERIFY_PURCHASE_REQ& VERIFY_PURCHASE_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VERIFY_PURCHASE_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void VERIFY_PURCHASE_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:VERIFY_PURCHASE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      var_package_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      var_purchase_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      var_token_.ClearNonDefaultToEmptyNoArena();
    }
    id_ = 56;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VERIFY_PURCHASE_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_VERIFY_PURCHASE_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string var_package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_package_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "VERIFY_PURCHASE_REQ.var_package_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_purchase_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_var_purchase_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "VERIFY_PURCHASE_REQ.var_purchase_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_var_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "VERIFY_PURCHASE_REQ.var_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VERIFY_PURCHASE_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VERIFY_PURCHASE_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_VERIFY_PURCHASE_REQ];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required string var_package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_package_name().data(), static_cast<int>(this->_internal_var_package_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "VERIFY_PURCHASE_REQ.var_package_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_package_name(), target);
  }

  // required string var_purchase_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_purchase_id().data(), static_cast<int>(this->_internal_var_purchase_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "VERIFY_PURCHASE_REQ.var_purchase_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_var_purchase_id(), target);
  }

  // required string var_token = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_token().data(), static_cast<int>(this->_internal_var_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "VERIFY_PURCHASE_REQ.var_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_var_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VERIFY_PURCHASE_REQ)
  return target;
}

size_t VERIFY_PURCHASE_REQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VERIFY_PURCHASE_REQ)
  size_t total_size = 0;

  if (_internal_has_var_package_name()) {
    // required string var_package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_package_name());
  }

  if (_internal_has_var_purchase_id()) {
    // required string var_purchase_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_purchase_id());
  }

  if (_internal_has_var_token()) {
    // required string var_token = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_token());
  }

  return total_size;
}
size_t VERIFY_PURCHASE_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VERIFY_PURCHASE_REQ)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string var_package_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_package_name());

    // required string var_purchase_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_purchase_id());

    // required string var_token = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_token());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_VERIFY_PURCHASE_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VERIFY_PURCHASE_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VERIFY_PURCHASE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const VERIFY_PURCHASE_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VERIFY_PURCHASE_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VERIFY_PURCHASE_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VERIFY_PURCHASE_REQ)
    MergeFrom(*source);
  }
}

void VERIFY_PURCHASE_REQ::MergeFrom(const VERIFY_PURCHASE_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VERIFY_PURCHASE_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_package_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      var_purchase_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_purchase_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      var_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_token_);
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VERIFY_PURCHASE_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VERIFY_PURCHASE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VERIFY_PURCHASE_REQ::CopyFrom(const VERIFY_PURCHASE_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VERIFY_PURCHASE_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VERIFY_PURCHASE_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void VERIFY_PURCHASE_REQ::InternalSwap(VERIFY_PURCHASE_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_package_name_.Swap(&other->var_package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_purchase_id_.Swap(&other->var_purchase_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_token_.Swap(&other->var_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VERIFY_PURCHASE_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DEL_CAMERA_REQ::InitAsDefaultInstance() {
}
class DEL_CAMERA_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<DEL_CAMERA_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_machine_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DEL_CAMERA_REQ::DEL_CAMERA_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DEL_CAMERA_REQ)
}
DEL_CAMERA_REQ::DEL_CAMERA_REQ(const DEL_CAMERA_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_machine_id()) {
    var_machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_id_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:DEL_CAMERA_REQ)
}

void DEL_CAMERA_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DEL_CAMERA_REQ_CLI_2eGS_2eproto.base);
  var_machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 58;
}

DEL_CAMERA_REQ::~DEL_CAMERA_REQ() {
  // @@protoc_insertion_point(destructor:DEL_CAMERA_REQ)
  SharedDtor();
}

void DEL_CAMERA_REQ::SharedDtor() {
  var_machine_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DEL_CAMERA_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DEL_CAMERA_REQ& DEL_CAMERA_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DEL_CAMERA_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void DEL_CAMERA_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:DEL_CAMERA_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_machine_id_.ClearNonDefaultToEmptyNoArena();
    }
    id_ = 58;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DEL_CAMERA_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_DEL_CAMERA_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string var_machine_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_machine_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DEL_CAMERA_REQ.var_machine_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DEL_CAMERA_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DEL_CAMERA_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_DEL_CAMERA_REQ];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required string var_machine_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_machine_id().data(), static_cast<int>(this->_internal_var_machine_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DEL_CAMERA_REQ.var_machine_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_machine_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DEL_CAMERA_REQ)
  return target;
}

size_t DEL_CAMERA_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DEL_CAMERA_REQ)
  size_t total_size = 0;

  // required string var_machine_id = 2;
  if (_internal_has_var_machine_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_machine_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_DEL_CAMERA_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DEL_CAMERA_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DEL_CAMERA_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const DEL_CAMERA_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DEL_CAMERA_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DEL_CAMERA_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DEL_CAMERA_REQ)
    MergeFrom(*source);
  }
}

void DEL_CAMERA_REQ::MergeFrom(const DEL_CAMERA_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DEL_CAMERA_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DEL_CAMERA_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DEL_CAMERA_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DEL_CAMERA_REQ::CopyFrom(const DEL_CAMERA_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DEL_CAMERA_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DEL_CAMERA_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DEL_CAMERA_REQ::InternalSwap(DEL_CAMERA_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_machine_id_.Swap(&other->var_machine_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DEL_CAMERA_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RECONNECT_REQ::InitAsDefaultInstance() {
}
class RECONNECT_REQ::_Internal {
 public:
  using HasBits = decltype(std::declval<RECONNECT_REQ>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_var_machine_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_var_email(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RECONNECT_REQ::RECONNECT_REQ()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RECONNECT_REQ)
}
RECONNECT_REQ::RECONNECT_REQ(const RECONNECT_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_machine_id()) {
    var_machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_id_);
  }
  var_machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_machine_name()) {
    var_machine_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_name_);
  }
  var_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_token()) {
    var_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_token_);
  }
  var_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_email()) {
    var_email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_email_);
  }
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  ::memcpy(&var_index_, &from.var_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_index_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:RECONNECT_REQ)
}

void RECONNECT_REQ::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RECONNECT_REQ_CLI_2eGS_2eproto.base);
  var_machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_index_ = PROTOBUF_LONGLONG(0);
  id_ = 60;
}

RECONNECT_REQ::~RECONNECT_REQ() {
  // @@protoc_insertion_point(destructor:RECONNECT_REQ)
  SharedDtor();
}

void RECONNECT_REQ::SharedDtor() {
  var_machine_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RECONNECT_REQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RECONNECT_REQ& RECONNECT_REQ::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RECONNECT_REQ_CLI_2eGS_2eproto.base);
  return *internal_default_instance();
}


void RECONNECT_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:RECONNECT_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      var_machine_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      var_machine_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      var_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      var_email_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      var_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    var_index_ = PROTOBUF_LONGLONG(0);
    id_ = 60;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RECONNECT_REQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_RECONNECT_REQ];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string var_machine_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_machine_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RECONNECT_REQ.var_machine_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_machine_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_var_machine_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RECONNECT_REQ.var_machine_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_var_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RECONNECT_REQ.var_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 var_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_var_index(&has_bits);
          var_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_email = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_var_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RECONNECT_REQ.var_email");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string var_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RECONNECT_REQ.var_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RECONNECT_REQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RECONNECT_REQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_RECONNECT_REQ];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // required string var_machine_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_machine_id().data(), static_cast<int>(this->_internal_var_machine_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RECONNECT_REQ.var_machine_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_var_machine_id(), target);
  }

  // required string var_machine_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_machine_name().data(), static_cast<int>(this->_internal_var_machine_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RECONNECT_REQ.var_machine_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_var_machine_name(), target);
  }

  // required string var_token = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_token().data(), static_cast<int>(this->_internal_var_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RECONNECT_REQ.var_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_var_token(), target);
  }

  // required int64 var_index = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_var_index(), target);
  }

  // required string var_email = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_email().data(), static_cast<int>(this->_internal_var_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RECONNECT_REQ.var_email");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_var_email(), target);
  }

  // required string var_name = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_var_name().data(), static_cast<int>(this->_internal_var_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RECONNECT_REQ.var_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_var_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RECONNECT_REQ)
  return target;
}

size_t RECONNECT_REQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RECONNECT_REQ)
  size_t total_size = 0;

  if (_internal_has_var_machine_id()) {
    // required string var_machine_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_machine_id());
  }

  if (_internal_has_var_machine_name()) {
    // required string var_machine_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_machine_name());
  }

  if (_internal_has_var_token()) {
    // required string var_token = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_token());
  }

  if (_internal_has_var_email()) {
    // required string var_email = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_email());
  }

  if (_internal_has_var_name()) {
    // required string var_name = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_name());
  }

  if (_internal_has_var_index()) {
    // required int64 var_index = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_var_index());
  }

  return total_size;
}
size_t RECONNECT_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RECONNECT_REQ)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string var_machine_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_machine_id());

    // required string var_machine_name = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_machine_name());

    // required string var_token = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_token());

    // required string var_email = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_email());

    // required string var_name = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_var_name());

    // required int64 var_index = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_var_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .PROTOCOL id = 1 [default = ID_PKT_RECONNECT_REQ];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RECONNECT_REQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RECONNECT_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  const RECONNECT_REQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RECONNECT_REQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RECONNECT_REQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RECONNECT_REQ)
    MergeFrom(*source);
  }
}

void RECONNECT_REQ::MergeFrom(const RECONNECT_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RECONNECT_REQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_machine_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      var_machine_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_machine_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      var_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_token_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      var_email_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_email_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      var_index_ = from.var_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RECONNECT_REQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RECONNECT_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RECONNECT_REQ::CopyFrom(const RECONNECT_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RECONNECT_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RECONNECT_REQ::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void RECONNECT_REQ::InternalSwap(RECONNECT_REQ* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_machine_id_.Swap(&other->var_machine_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_machine_name_.Swap(&other->var_machine_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_token_.Swap(&other->var_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_email_.Swap(&other->var_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_index_, other->var_index_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RECONNECT_REQ::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VERSION_REQ* Arena::CreateMaybeMessage< ::VERSION_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::VERSION_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::LOGIN_REQ* Arena::CreateMaybeMessage< ::LOGIN_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::LOGIN_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CREATE_ROOM_REQ* Arena::CreateMaybeMessage< ::CREATE_ROOM_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::CREATE_ROOM_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::ENTER_ROOM_REQ* Arena::CreateMaybeMessage< ::ENTER_ROOM_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::ENTER_ROOM_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::LEAVE_ROOM_REQ* Arena::CreateMaybeMessage< ::LEAVE_ROOM_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::LEAVE_ROOM_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::ROOM_LIST_REQ* Arena::CreateMaybeMessage< ::ROOM_LIST_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::ROOM_LIST_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::ROOM_PASS_THROUGH_REQ* Arena::CreateMaybeMessage< ::ROOM_PASS_THROUGH_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::ROOM_PASS_THROUGH_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::NOTICE_REQ* Arena::CreateMaybeMessage< ::NOTICE_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::NOTICE_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::BITMAP_MESSAGE_REQ* Arena::CreateMaybeMessage< ::BITMAP_MESSAGE_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::BITMAP_MESSAGE_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::AUDIO_MESSAGE_REQ* Arena::CreateMaybeMessage< ::AUDIO_MESSAGE_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::AUDIO_MESSAGE_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::STOP_STREAM_REQ* Arena::CreateMaybeMessage< ::STOP_STREAM_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::STOP_STREAM_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CAMERA_WAKE_UP_REQ* Arena::CreateMaybeMessage< ::CAMERA_WAKE_UP_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::CAMERA_WAKE_UP_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::PRAY_MESSAGE_REQ* Arena::CreateMaybeMessage< ::PRAY_MESSAGE_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::PRAY_MESSAGE_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::PRAY_MESSAGE_REG_REQ* Arena::CreateMaybeMessage< ::PRAY_MESSAGE_REG_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::PRAY_MESSAGE_REG_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::QNA_REQ* Arena::CreateMaybeMessage< ::QNA_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::QNA_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::MAIL_LIST_REQ* Arena::CreateMaybeMessage< ::MAIL_LIST_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::MAIL_LIST_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::REG_REQ* Arena::CreateMaybeMessage< ::REG_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::REG_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CLIENT_LOGOUT_REQ* Arena::CreateMaybeMessage< ::CLIENT_LOGOUT_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::CLIENT_LOGOUT_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CAMERA_CONTROL_REQ* Arena::CreateMaybeMessage< ::CAMERA_CONTROL_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::CAMERA_CONTROL_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::MPEG2TS_MESSAGE_REQ* Arena::CreateMaybeMessage< ::MPEG2TS_MESSAGE_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::MPEG2TS_MESSAGE_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::REG_CAMERA_REQ* Arena::CreateMaybeMessage< ::REG_CAMERA_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::REG_CAMERA_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::CAMERA_LIST_REQ* Arena::CreateMaybeMessage< ::CAMERA_LIST_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::CAMERA_LIST_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::MACHINE_STATUS_REQ* Arena::CreateMaybeMessage< ::MACHINE_STATUS_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::MACHINE_STATUS_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::VERIFY_PURCHASE_REQ* Arena::CreateMaybeMessage< ::VERIFY_PURCHASE_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::VERIFY_PURCHASE_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::DEL_CAMERA_REQ* Arena::CreateMaybeMessage< ::DEL_CAMERA_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::DEL_CAMERA_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::RECONNECT_REQ* Arena::CreateMaybeMessage< ::RECONNECT_REQ >(Arena* arena) {
  return Arena::CreateInternal< ::RECONNECT_REQ >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

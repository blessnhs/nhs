// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CLI.GS.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_CLI_2eGS_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_CLI_2eGS_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Structure.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CLI_2eGS_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_CLI_2eGS_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_CLI_2eGS_2eproto;
class AUDIO_MESSAGE_REQ;
class AUDIO_MESSAGE_REQDefaultTypeInternal;
extern AUDIO_MESSAGE_REQDefaultTypeInternal _AUDIO_MESSAGE_REQ_default_instance_;
class BITMAP_MESSAGE_REQ;
class BITMAP_MESSAGE_REQDefaultTypeInternal;
extern BITMAP_MESSAGE_REQDefaultTypeInternal _BITMAP_MESSAGE_REQ_default_instance_;
class CAMERA_CONTROL_REQ;
class CAMERA_CONTROL_REQDefaultTypeInternal;
extern CAMERA_CONTROL_REQDefaultTypeInternal _CAMERA_CONTROL_REQ_default_instance_;
class CAMERA_LIST_REQ;
class CAMERA_LIST_REQDefaultTypeInternal;
extern CAMERA_LIST_REQDefaultTypeInternal _CAMERA_LIST_REQ_default_instance_;
class CAMERA_WAKE_UP_REQ;
class CAMERA_WAKE_UP_REQDefaultTypeInternal;
extern CAMERA_WAKE_UP_REQDefaultTypeInternal _CAMERA_WAKE_UP_REQ_default_instance_;
class CLIENT_LOGOUT_REQ;
class CLIENT_LOGOUT_REQDefaultTypeInternal;
extern CLIENT_LOGOUT_REQDefaultTypeInternal _CLIENT_LOGOUT_REQ_default_instance_;
class CREATE_ROOM_REQ;
class CREATE_ROOM_REQDefaultTypeInternal;
extern CREATE_ROOM_REQDefaultTypeInternal _CREATE_ROOM_REQ_default_instance_;
class DEL_CAMERA_REQ;
class DEL_CAMERA_REQDefaultTypeInternal;
extern DEL_CAMERA_REQDefaultTypeInternal _DEL_CAMERA_REQ_default_instance_;
class ENTER_ROOM_REQ;
class ENTER_ROOM_REQDefaultTypeInternal;
extern ENTER_ROOM_REQDefaultTypeInternal _ENTER_ROOM_REQ_default_instance_;
class LEAVE_ROOM_REQ;
class LEAVE_ROOM_REQDefaultTypeInternal;
extern LEAVE_ROOM_REQDefaultTypeInternal _LEAVE_ROOM_REQ_default_instance_;
class LOGIN_REQ;
class LOGIN_REQDefaultTypeInternal;
extern LOGIN_REQDefaultTypeInternal _LOGIN_REQ_default_instance_;
class MACHINE_STATUS_REQ;
class MACHINE_STATUS_REQDefaultTypeInternal;
extern MACHINE_STATUS_REQDefaultTypeInternal _MACHINE_STATUS_REQ_default_instance_;
class MAIL_LIST_REQ;
class MAIL_LIST_REQDefaultTypeInternal;
extern MAIL_LIST_REQDefaultTypeInternal _MAIL_LIST_REQ_default_instance_;
class MPEG2TS_MESSAGE_REQ;
class MPEG2TS_MESSAGE_REQDefaultTypeInternal;
extern MPEG2TS_MESSAGE_REQDefaultTypeInternal _MPEG2TS_MESSAGE_REQ_default_instance_;
class NOTICE_REQ;
class NOTICE_REQDefaultTypeInternal;
extern NOTICE_REQDefaultTypeInternal _NOTICE_REQ_default_instance_;
class PRAY_MESSAGE_REG_REQ;
class PRAY_MESSAGE_REG_REQDefaultTypeInternal;
extern PRAY_MESSAGE_REG_REQDefaultTypeInternal _PRAY_MESSAGE_REG_REQ_default_instance_;
class PRAY_MESSAGE_REQ;
class PRAY_MESSAGE_REQDefaultTypeInternal;
extern PRAY_MESSAGE_REQDefaultTypeInternal _PRAY_MESSAGE_REQ_default_instance_;
class QNA_REQ;
class QNA_REQDefaultTypeInternal;
extern QNA_REQDefaultTypeInternal _QNA_REQ_default_instance_;
class RECONNECT_REQ;
class RECONNECT_REQDefaultTypeInternal;
extern RECONNECT_REQDefaultTypeInternal _RECONNECT_REQ_default_instance_;
class REG_CAMERA_REQ;
class REG_CAMERA_REQDefaultTypeInternal;
extern REG_CAMERA_REQDefaultTypeInternal _REG_CAMERA_REQ_default_instance_;
class REG_REQ;
class REG_REQDefaultTypeInternal;
extern REG_REQDefaultTypeInternal _REG_REQ_default_instance_;
class ROOM_LIST_REQ;
class ROOM_LIST_REQDefaultTypeInternal;
extern ROOM_LIST_REQDefaultTypeInternal _ROOM_LIST_REQ_default_instance_;
class ROOM_PASS_THROUGH_REQ;
class ROOM_PASS_THROUGH_REQDefaultTypeInternal;
extern ROOM_PASS_THROUGH_REQDefaultTypeInternal _ROOM_PASS_THROUGH_REQ_default_instance_;
class STOP_STREAM_REQ;
class STOP_STREAM_REQDefaultTypeInternal;
extern STOP_STREAM_REQDefaultTypeInternal _STOP_STREAM_REQ_default_instance_;
class VERIFY_PURCHASE_REQ;
class VERIFY_PURCHASE_REQDefaultTypeInternal;
extern VERIFY_PURCHASE_REQDefaultTypeInternal _VERIFY_PURCHASE_REQ_default_instance_;
class VERSION_REQ;
class VERSION_REQDefaultTypeInternal;
extern VERSION_REQDefaultTypeInternal _VERSION_REQ_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AUDIO_MESSAGE_REQ* Arena::CreateMaybeMessage<::AUDIO_MESSAGE_REQ>(Arena*);
template<> ::BITMAP_MESSAGE_REQ* Arena::CreateMaybeMessage<::BITMAP_MESSAGE_REQ>(Arena*);
template<> ::CAMERA_CONTROL_REQ* Arena::CreateMaybeMessage<::CAMERA_CONTROL_REQ>(Arena*);
template<> ::CAMERA_LIST_REQ* Arena::CreateMaybeMessage<::CAMERA_LIST_REQ>(Arena*);
template<> ::CAMERA_WAKE_UP_REQ* Arena::CreateMaybeMessage<::CAMERA_WAKE_UP_REQ>(Arena*);
template<> ::CLIENT_LOGOUT_REQ* Arena::CreateMaybeMessage<::CLIENT_LOGOUT_REQ>(Arena*);
template<> ::CREATE_ROOM_REQ* Arena::CreateMaybeMessage<::CREATE_ROOM_REQ>(Arena*);
template<> ::DEL_CAMERA_REQ* Arena::CreateMaybeMessage<::DEL_CAMERA_REQ>(Arena*);
template<> ::ENTER_ROOM_REQ* Arena::CreateMaybeMessage<::ENTER_ROOM_REQ>(Arena*);
template<> ::LEAVE_ROOM_REQ* Arena::CreateMaybeMessage<::LEAVE_ROOM_REQ>(Arena*);
template<> ::LOGIN_REQ* Arena::CreateMaybeMessage<::LOGIN_REQ>(Arena*);
template<> ::MACHINE_STATUS_REQ* Arena::CreateMaybeMessage<::MACHINE_STATUS_REQ>(Arena*);
template<> ::MAIL_LIST_REQ* Arena::CreateMaybeMessage<::MAIL_LIST_REQ>(Arena*);
template<> ::MPEG2TS_MESSAGE_REQ* Arena::CreateMaybeMessage<::MPEG2TS_MESSAGE_REQ>(Arena*);
template<> ::NOTICE_REQ* Arena::CreateMaybeMessage<::NOTICE_REQ>(Arena*);
template<> ::PRAY_MESSAGE_REG_REQ* Arena::CreateMaybeMessage<::PRAY_MESSAGE_REG_REQ>(Arena*);
template<> ::PRAY_MESSAGE_REQ* Arena::CreateMaybeMessage<::PRAY_MESSAGE_REQ>(Arena*);
template<> ::QNA_REQ* Arena::CreateMaybeMessage<::QNA_REQ>(Arena*);
template<> ::RECONNECT_REQ* Arena::CreateMaybeMessage<::RECONNECT_REQ>(Arena*);
template<> ::REG_CAMERA_REQ* Arena::CreateMaybeMessage<::REG_CAMERA_REQ>(Arena*);
template<> ::REG_REQ* Arena::CreateMaybeMessage<::REG_REQ>(Arena*);
template<> ::ROOM_LIST_REQ* Arena::CreateMaybeMessage<::ROOM_LIST_REQ>(Arena*);
template<> ::ROOM_PASS_THROUGH_REQ* Arena::CreateMaybeMessage<::ROOM_PASS_THROUGH_REQ>(Arena*);
template<> ::STOP_STREAM_REQ* Arena::CreateMaybeMessage<::STOP_STREAM_REQ>(Arena*);
template<> ::VERIFY_PURCHASE_REQ* Arena::CreateMaybeMessage<::VERIFY_PURCHASE_REQ>(Arena*);
template<> ::VERSION_REQ* Arena::CreateMaybeMessage<::VERSION_REQ>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class VERSION_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VERSION_REQ) */ {
 public:
  VERSION_REQ();
  virtual ~VERSION_REQ();

  VERSION_REQ(const VERSION_REQ& from);
  VERSION_REQ(VERSION_REQ&& from) noexcept
    : VERSION_REQ() {
    *this = ::std::move(from);
  }

  inline VERSION_REQ& operator=(const VERSION_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline VERSION_REQ& operator=(VERSION_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VERSION_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VERSION_REQ* internal_default_instance() {
    return reinterpret_cast<const VERSION_REQ*>(
               &_VERSION_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VERSION_REQ& a, VERSION_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(VERSION_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VERSION_REQ* New() const final {
    return CreateMaybeMessage<VERSION_REQ>(nullptr);
  }

  VERSION_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VERSION_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VERSION_REQ& from);
  void MergeFrom(const VERSION_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VERSION_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VERSION_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:VERSION_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class LOGIN_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOGIN_REQ) */ {
 public:
  LOGIN_REQ();
  virtual ~LOGIN_REQ();

  LOGIN_REQ(const LOGIN_REQ& from);
  LOGIN_REQ(LOGIN_REQ&& from) noexcept
    : LOGIN_REQ() {
    *this = ::std::move(from);
  }

  inline LOGIN_REQ& operator=(const LOGIN_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOGIN_REQ& operator=(LOGIN_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOGIN_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOGIN_REQ* internal_default_instance() {
    return reinterpret_cast<const LOGIN_REQ*>(
               &_LOGIN_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LOGIN_REQ& a, LOGIN_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(LOGIN_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOGIN_REQ* New() const final {
    return CreateMaybeMessage<LOGIN_REQ>(nullptr);
  }

  LOGIN_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOGIN_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOGIN_REQ& from);
  void MergeFrom(const LOGIN_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOGIN_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOGIN_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarUidFieldNumber = 2,
    kVarTokenFieldNumber = 3,
    kVarCamNameFieldNumber = 4,
    kVarMachineIdFieldNumber = 5,
    kVarIpFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // required string var_uid = 2;
  bool has_var_uid() const;
  private:
  bool _internal_has_var_uid() const;
  public:
  void clear_var_uid();
  const std::string& var_uid() const;
  void set_var_uid(const std::string& value);
  void set_var_uid(std::string&& value);
  void set_var_uid(const char* value);
  void set_var_uid(const char* value, size_t size);
  std::string* mutable_var_uid();
  std::string* release_var_uid();
  void set_allocated_var_uid(std::string* var_uid);
  private:
  const std::string& _internal_var_uid() const;
  void _internal_set_var_uid(const std::string& value);
  std::string* _internal_mutable_var_uid();
  public:

  // required string var_token = 3;
  bool has_var_token() const;
  private:
  bool _internal_has_var_token() const;
  public:
  void clear_var_token();
  const std::string& var_token() const;
  void set_var_token(const std::string& value);
  void set_var_token(std::string&& value);
  void set_var_token(const char* value);
  void set_var_token(const char* value, size_t size);
  std::string* mutable_var_token();
  std::string* release_var_token();
  void set_allocated_var_token(std::string* var_token);
  private:
  const std::string& _internal_var_token() const;
  void _internal_set_var_token(const std::string& value);
  std::string* _internal_mutable_var_token();
  public:

  // required string var_cam_name = 4;
  bool has_var_cam_name() const;
  private:
  bool _internal_has_var_cam_name() const;
  public:
  void clear_var_cam_name();
  const std::string& var_cam_name() const;
  void set_var_cam_name(const std::string& value);
  void set_var_cam_name(std::string&& value);
  void set_var_cam_name(const char* value);
  void set_var_cam_name(const char* value, size_t size);
  std::string* mutable_var_cam_name();
  std::string* release_var_cam_name();
  void set_allocated_var_cam_name(std::string* var_cam_name);
  private:
  const std::string& _internal_var_cam_name() const;
  void _internal_set_var_cam_name(const std::string& value);
  std::string* _internal_mutable_var_cam_name();
  public:

  // required string var_machine_id = 5;
  bool has_var_machine_id() const;
  private:
  bool _internal_has_var_machine_id() const;
  public:
  void clear_var_machine_id();
  const std::string& var_machine_id() const;
  void set_var_machine_id(const std::string& value);
  void set_var_machine_id(std::string&& value);
  void set_var_machine_id(const char* value);
  void set_var_machine_id(const char* value, size_t size);
  std::string* mutable_var_machine_id();
  std::string* release_var_machine_id();
  void set_allocated_var_machine_id(std::string* var_machine_id);
  private:
  const std::string& _internal_var_machine_id() const;
  void _internal_set_var_machine_id(const std::string& value);
  std::string* _internal_mutable_var_machine_id();
  public:

  // required string var_ip = 6;
  bool has_var_ip() const;
  private:
  bool _internal_has_var_ip() const;
  public:
  void clear_var_ip();
  const std::string& var_ip() const;
  void set_var_ip(const std::string& value);
  void set_var_ip(std::string&& value);
  void set_var_ip(const char* value);
  void set_var_ip(const char* value, size_t size);
  std::string* mutable_var_ip();
  std::string* release_var_ip();
  void set_allocated_var_ip(std::string* var_ip);
  private:
  const std::string& _internal_var_ip() const;
  void _internal_set_var_ip(const std::string& value);
  std::string* _internal_mutable_var_ip();
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:LOGIN_REQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_cam_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_machine_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_ip_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class CREATE_ROOM_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CREATE_ROOM_REQ) */ {
 public:
  CREATE_ROOM_REQ();
  virtual ~CREATE_ROOM_REQ();

  CREATE_ROOM_REQ(const CREATE_ROOM_REQ& from);
  CREATE_ROOM_REQ(CREATE_ROOM_REQ&& from) noexcept
    : CREATE_ROOM_REQ() {
    *this = ::std::move(from);
  }

  inline CREATE_ROOM_REQ& operator=(const CREATE_ROOM_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CREATE_ROOM_REQ& operator=(CREATE_ROOM_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CREATE_ROOM_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CREATE_ROOM_REQ* internal_default_instance() {
    return reinterpret_cast<const CREATE_ROOM_REQ*>(
               &_CREATE_ROOM_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CREATE_ROOM_REQ& a, CREATE_ROOM_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CREATE_ROOM_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CREATE_ROOM_REQ* New() const final {
    return CreateMaybeMessage<CREATE_ROOM_REQ>(nullptr);
  }

  CREATE_ROOM_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CREATE_ROOM_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CREATE_ROOM_REQ& from);
  void MergeFrom(const CREATE_ROOM_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CREATE_ROOM_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CREATE_ROOM_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required string var_name = 2;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const char* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:CREATE_ROOM_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class ENTER_ROOM_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ENTER_ROOM_REQ) */ {
 public:
  ENTER_ROOM_REQ();
  virtual ~ENTER_ROOM_REQ();

  ENTER_ROOM_REQ(const ENTER_ROOM_REQ& from);
  ENTER_ROOM_REQ(ENTER_ROOM_REQ&& from) noexcept
    : ENTER_ROOM_REQ() {
    *this = ::std::move(from);
  }

  inline ENTER_ROOM_REQ& operator=(const ENTER_ROOM_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENTER_ROOM_REQ& operator=(ENTER_ROOM_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENTER_ROOM_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ENTER_ROOM_REQ* internal_default_instance() {
    return reinterpret_cast<const ENTER_ROOM_REQ*>(
               &_ENTER_ROOM_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ENTER_ROOM_REQ& a, ENTER_ROOM_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(ENTER_ROOM_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENTER_ROOM_REQ* New() const final {
    return CreateMaybeMessage<ENTER_ROOM_REQ>(nullptr);
  }

  ENTER_ROOM_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENTER_ROOM_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENTER_ROOM_REQ& from);
  void MergeFrom(const ENTER_ROOM_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENTER_ROOM_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ENTER_ROOM_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarRoomNumberFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required int32 var_room_number = 2;
  bool has_var_room_number() const;
  private:
  bool _internal_has_var_room_number() const;
  public:
  void clear_var_room_number();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number() const;
  void set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_number() const;
  void _internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:ENTER_ROOM_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class LEAVE_ROOM_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LEAVE_ROOM_REQ) */ {
 public:
  LEAVE_ROOM_REQ();
  virtual ~LEAVE_ROOM_REQ();

  LEAVE_ROOM_REQ(const LEAVE_ROOM_REQ& from);
  LEAVE_ROOM_REQ(LEAVE_ROOM_REQ&& from) noexcept
    : LEAVE_ROOM_REQ() {
    *this = ::std::move(from);
  }

  inline LEAVE_ROOM_REQ& operator=(const LEAVE_ROOM_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline LEAVE_ROOM_REQ& operator=(LEAVE_ROOM_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LEAVE_ROOM_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LEAVE_ROOM_REQ* internal_default_instance() {
    return reinterpret_cast<const LEAVE_ROOM_REQ*>(
               &_LEAVE_ROOM_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LEAVE_ROOM_REQ& a, LEAVE_ROOM_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(LEAVE_ROOM_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LEAVE_ROOM_REQ* New() const final {
    return CreateMaybeMessage<LEAVE_ROOM_REQ>(nullptr);
  }

  LEAVE_ROOM_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LEAVE_ROOM_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LEAVE_ROOM_REQ& from);
  void MergeFrom(const LEAVE_ROOM_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LEAVE_ROOM_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LEAVE_ROOM_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarIdFieldNumber = 2,
    kVarRoomNumberFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // required int32 var_id = 2;
  bool has_var_id() const;
  private:
  bool _internal_has_var_id() const;
  public:
  void clear_var_id();
  ::PROTOBUF_NAMESPACE_ID::int32 var_id() const;
  void set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_id() const;
  void _internal_set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 var_room_number = 3;
  bool has_var_room_number() const;
  private:
  bool _internal_has_var_room_number() const;
  public:
  void clear_var_room_number();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number() const;
  void set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_number() const;
  void _internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:LEAVE_ROOM_REQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class ROOM_LIST_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ROOM_LIST_REQ) */ {
 public:
  ROOM_LIST_REQ();
  virtual ~ROOM_LIST_REQ();

  ROOM_LIST_REQ(const ROOM_LIST_REQ& from);
  ROOM_LIST_REQ(ROOM_LIST_REQ&& from) noexcept
    : ROOM_LIST_REQ() {
    *this = ::std::move(from);
  }

  inline ROOM_LIST_REQ& operator=(const ROOM_LIST_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROOM_LIST_REQ& operator=(ROOM_LIST_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROOM_LIST_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROOM_LIST_REQ* internal_default_instance() {
    return reinterpret_cast<const ROOM_LIST_REQ*>(
               &_ROOM_LIST_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ROOM_LIST_REQ& a, ROOM_LIST_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(ROOM_LIST_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROOM_LIST_REQ* New() const final {
    return CreateMaybeMessage<ROOM_LIST_REQ>(nullptr);
  }

  ROOM_LIST_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROOM_LIST_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROOM_LIST_REQ& from);
  void MergeFrom(const ROOM_LIST_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROOM_LIST_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ROOM_LIST_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:ROOM_LIST_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class ROOM_PASS_THROUGH_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ROOM_PASS_THROUGH_REQ) */ {
 public:
  ROOM_PASS_THROUGH_REQ();
  virtual ~ROOM_PASS_THROUGH_REQ();

  ROOM_PASS_THROUGH_REQ(const ROOM_PASS_THROUGH_REQ& from);
  ROOM_PASS_THROUGH_REQ(ROOM_PASS_THROUGH_REQ&& from) noexcept
    : ROOM_PASS_THROUGH_REQ() {
    *this = ::std::move(from);
  }

  inline ROOM_PASS_THROUGH_REQ& operator=(const ROOM_PASS_THROUGH_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROOM_PASS_THROUGH_REQ& operator=(ROOM_PASS_THROUGH_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROOM_PASS_THROUGH_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROOM_PASS_THROUGH_REQ* internal_default_instance() {
    return reinterpret_cast<const ROOM_PASS_THROUGH_REQ*>(
               &_ROOM_PASS_THROUGH_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ROOM_PASS_THROUGH_REQ& a, ROOM_PASS_THROUGH_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(ROOM_PASS_THROUGH_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROOM_PASS_THROUGH_REQ* New() const final {
    return CreateMaybeMessage<ROOM_PASS_THROUGH_REQ>(nullptr);
  }

  ROOM_PASS_THROUGH_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROOM_PASS_THROUGH_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROOM_PASS_THROUGH_REQ& from);
  void MergeFrom(const ROOM_PASS_THROUGH_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROOM_PASS_THROUGH_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ROOM_PASS_THROUGH_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 2,
    kVarTimeFieldNumber = 5,
    kVarMessageIntFieldNumber = 3,
    kVarRoomNumberFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // required string var_message = 2;
  bool has_var_message() const;
  private:
  bool _internal_has_var_message() const;
  public:
  void clear_var_message();
  const std::string& var_message() const;
  void set_var_message(const std::string& value);
  void set_var_message(std::string&& value);
  void set_var_message(const char* value);
  void set_var_message(const char* value, size_t size);
  std::string* mutable_var_message();
  std::string* release_var_message();
  void set_allocated_var_message(std::string* var_message);
  private:
  const std::string& _internal_var_message() const;
  void _internal_set_var_message(const std::string& value);
  std::string* _internal_mutable_var_message();
  public:

  // required string var_time = 5;
  bool has_var_time() const;
  private:
  bool _internal_has_var_time() const;
  public:
  void clear_var_time();
  const std::string& var_time() const;
  void set_var_time(const std::string& value);
  void set_var_time(std::string&& value);
  void set_var_time(const char* value);
  void set_var_time(const char* value, size_t size);
  std::string* mutable_var_time();
  std::string* release_var_time();
  void set_allocated_var_time(std::string* var_time);
  private:
  const std::string& _internal_var_time() const;
  void _internal_set_var_time(const std::string& value);
  std::string* _internal_mutable_var_time();
  public:

  // required int32 var_message_int = 3;
  bool has_var_message_int() const;
  private:
  bool _internal_has_var_message_int() const;
  public:
  void clear_var_message_int();
  ::PROTOBUF_NAMESPACE_ID::int32 var_message_int() const;
  void set_var_message_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_message_int() const;
  void _internal_set_var_message_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 var_room_number = 4;
  bool has_var_room_number() const;
  private:
  bool _internal_has_var_room_number() const;
  public:
  void clear_var_room_number();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number() const;
  void set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_number() const;
  void _internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:ROOM_PASS_THROUGH_REQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_message_int_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class NOTICE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NOTICE_REQ) */ {
 public:
  NOTICE_REQ();
  virtual ~NOTICE_REQ();

  NOTICE_REQ(const NOTICE_REQ& from);
  NOTICE_REQ(NOTICE_REQ&& from) noexcept
    : NOTICE_REQ() {
    *this = ::std::move(from);
  }

  inline NOTICE_REQ& operator=(const NOTICE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline NOTICE_REQ& operator=(NOTICE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NOTICE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NOTICE_REQ* internal_default_instance() {
    return reinterpret_cast<const NOTICE_REQ*>(
               &_NOTICE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NOTICE_REQ& a, NOTICE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(NOTICE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NOTICE_REQ* New() const final {
    return CreateMaybeMessage<NOTICE_REQ>(nullptr);
  }

  NOTICE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NOTICE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NOTICE_REQ& from);
  void MergeFrom(const NOTICE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NOTICE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NOTICE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:NOTICE_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class BITMAP_MESSAGE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BITMAP_MESSAGE_REQ) */ {
 public:
  BITMAP_MESSAGE_REQ();
  virtual ~BITMAP_MESSAGE_REQ();

  BITMAP_MESSAGE_REQ(const BITMAP_MESSAGE_REQ& from);
  BITMAP_MESSAGE_REQ(BITMAP_MESSAGE_REQ&& from) noexcept
    : BITMAP_MESSAGE_REQ() {
    *this = ::std::move(from);
  }

  inline BITMAP_MESSAGE_REQ& operator=(const BITMAP_MESSAGE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline BITMAP_MESSAGE_REQ& operator=(BITMAP_MESSAGE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BITMAP_MESSAGE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BITMAP_MESSAGE_REQ* internal_default_instance() {
    return reinterpret_cast<const BITMAP_MESSAGE_REQ*>(
               &_BITMAP_MESSAGE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BITMAP_MESSAGE_REQ& a, BITMAP_MESSAGE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(BITMAP_MESSAGE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BITMAP_MESSAGE_REQ* New() const final {
    return CreateMaybeMessage<BITMAP_MESSAGE_REQ>(nullptr);
  }

  BITMAP_MESSAGE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BITMAP_MESSAGE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BITMAP_MESSAGE_REQ& from);
  void MergeFrom(const BITMAP_MESSAGE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BITMAP_MESSAGE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BITMAP_MESSAGE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 2,
    kVarToPlayerIdFieldNumber = 5,
    kVarRoomNumberFieldNumber = 3,
    kVarTypeFieldNumber = 4,
    kVarWidthFieldNumber = 6,
    kVarHeightFieldNumber = 7,
    kIdFieldNumber = 1,
  };
  // repeated bytes var_message = 2;
  int var_message_size() const;
  private:
  int _internal_var_message_size() const;
  public:
  void clear_var_message();
  const std::string& var_message(int index) const;
  std::string* mutable_var_message(int index);
  void set_var_message(int index, const std::string& value);
  void set_var_message(int index, std::string&& value);
  void set_var_message(int index, const char* value);
  void set_var_message(int index, const void* value, size_t size);
  std::string* add_var_message();
  void add_var_message(const std::string& value);
  void add_var_message(std::string&& value);
  void add_var_message(const char* value);
  void add_var_message(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& var_message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_var_message();
  private:
  const std::string& _internal_var_message(int index) const;
  std::string* _internal_add_var_message();
  public:

  // repeated int64 var_to_player_id = 5;
  int var_to_player_id_size() const;
  private:
  int _internal_var_to_player_id_size() const;
  public:
  void clear_var_to_player_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_var_to_player_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_var_to_player_id() const;
  void _internal_add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_var_to_player_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 var_to_player_id(int index) const;
  void set_var_to_player_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      var_to_player_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_var_to_player_id();

  // required int32 var_room_number = 3;
  bool has_var_room_number() const;
  private:
  bool _internal_has_var_room_number() const;
  public:
  void clear_var_room_number();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number() const;
  void set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_number() const;
  void _internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 var_type = 4;
  bool has_var_type() const;
  private:
  bool _internal_has_var_type() const;
  public:
  void clear_var_type();
  ::PROTOBUF_NAMESPACE_ID::int32 var_type() const;
  void set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_type() const;
  void _internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 var_width = 6;
  bool has_var_width() const;
  private:
  bool _internal_has_var_width() const;
  public:
  void clear_var_width();
  ::PROTOBUF_NAMESPACE_ID::int32 var_width() const;
  void set_var_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_width() const;
  void _internal_set_var_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 var_height = 7;
  bool has_var_height() const;
  private:
  bool _internal_has_var_height() const;
  public:
  void clear_var_height();
  ::PROTOBUF_NAMESPACE_ID::int32 var_height() const;
  void set_var_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_height() const;
  void _internal_set_var_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:BITMAP_MESSAGE_REQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> var_message_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > var_to_player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_height_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class AUDIO_MESSAGE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUDIO_MESSAGE_REQ) */ {
 public:
  AUDIO_MESSAGE_REQ();
  virtual ~AUDIO_MESSAGE_REQ();

  AUDIO_MESSAGE_REQ(const AUDIO_MESSAGE_REQ& from);
  AUDIO_MESSAGE_REQ(AUDIO_MESSAGE_REQ&& from) noexcept
    : AUDIO_MESSAGE_REQ() {
    *this = ::std::move(from);
  }

  inline AUDIO_MESSAGE_REQ& operator=(const AUDIO_MESSAGE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline AUDIO_MESSAGE_REQ& operator=(AUDIO_MESSAGE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AUDIO_MESSAGE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AUDIO_MESSAGE_REQ* internal_default_instance() {
    return reinterpret_cast<const AUDIO_MESSAGE_REQ*>(
               &_AUDIO_MESSAGE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AUDIO_MESSAGE_REQ& a, AUDIO_MESSAGE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(AUDIO_MESSAGE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AUDIO_MESSAGE_REQ* New() const final {
    return CreateMaybeMessage<AUDIO_MESSAGE_REQ>(nullptr);
  }

  AUDIO_MESSAGE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AUDIO_MESSAGE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AUDIO_MESSAGE_REQ& from);
  void MergeFrom(const AUDIO_MESSAGE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AUDIO_MESSAGE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUDIO_MESSAGE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 2,
    kVarToPlayerIdFieldNumber = 4,
    kVarRoomNumberFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated bytes var_message = 2;
  int var_message_size() const;
  private:
  int _internal_var_message_size() const;
  public:
  void clear_var_message();
  const std::string& var_message(int index) const;
  std::string* mutable_var_message(int index);
  void set_var_message(int index, const std::string& value);
  void set_var_message(int index, std::string&& value);
  void set_var_message(int index, const char* value);
  void set_var_message(int index, const void* value, size_t size);
  std::string* add_var_message();
  void add_var_message(const std::string& value);
  void add_var_message(std::string&& value);
  void add_var_message(const char* value);
  void add_var_message(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& var_message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_var_message();
  private:
  const std::string& _internal_var_message(int index) const;
  std::string* _internal_add_var_message();
  public:

  // repeated int64 var_to_player_id = 4;
  int var_to_player_id_size() const;
  private:
  int _internal_var_to_player_id_size() const;
  public:
  void clear_var_to_player_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_var_to_player_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_var_to_player_id() const;
  void _internal_add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_var_to_player_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 var_to_player_id(int index) const;
  void set_var_to_player_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      var_to_player_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_var_to_player_id();

  // required int32 var_room_number = 3;
  bool has_var_room_number() const;
  private:
  bool _internal_has_var_room_number() const;
  public:
  void clear_var_room_number();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number() const;
  void set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_number() const;
  void _internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:AUDIO_MESSAGE_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> var_message_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > var_to_player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class STOP_STREAM_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:STOP_STREAM_REQ) */ {
 public:
  STOP_STREAM_REQ();
  virtual ~STOP_STREAM_REQ();

  STOP_STREAM_REQ(const STOP_STREAM_REQ& from);
  STOP_STREAM_REQ(STOP_STREAM_REQ&& from) noexcept
    : STOP_STREAM_REQ() {
    *this = ::std::move(from);
  }

  inline STOP_STREAM_REQ& operator=(const STOP_STREAM_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline STOP_STREAM_REQ& operator=(STOP_STREAM_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const STOP_STREAM_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const STOP_STREAM_REQ* internal_default_instance() {
    return reinterpret_cast<const STOP_STREAM_REQ*>(
               &_STOP_STREAM_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(STOP_STREAM_REQ& a, STOP_STREAM_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(STOP_STREAM_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline STOP_STREAM_REQ* New() const final {
    return CreateMaybeMessage<STOP_STREAM_REQ>(nullptr);
  }

  STOP_STREAM_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<STOP_STREAM_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const STOP_STREAM_REQ& from);
  void MergeFrom(const STOP_STREAM_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STOP_STREAM_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "STOP_STREAM_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarToPlayerIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required int64 var_to_player_id = 2;
  bool has_var_to_player_id() const;
  private:
  bool _internal_has_var_to_player_id() const;
  public:
  void clear_var_to_player_id();
  ::PROTOBUF_NAMESPACE_ID::int64 var_to_player_id() const;
  void set_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_var_to_player_id() const;
  void _internal_set_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_STOP_STREAM_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:STOP_STREAM_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 var_to_player_id_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class CAMERA_WAKE_UP_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAMERA_WAKE_UP_REQ) */ {
 public:
  CAMERA_WAKE_UP_REQ();
  virtual ~CAMERA_WAKE_UP_REQ();

  CAMERA_WAKE_UP_REQ(const CAMERA_WAKE_UP_REQ& from);
  CAMERA_WAKE_UP_REQ(CAMERA_WAKE_UP_REQ&& from) noexcept
    : CAMERA_WAKE_UP_REQ() {
    *this = ::std::move(from);
  }

  inline CAMERA_WAKE_UP_REQ& operator=(const CAMERA_WAKE_UP_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAMERA_WAKE_UP_REQ& operator=(CAMERA_WAKE_UP_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CAMERA_WAKE_UP_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAMERA_WAKE_UP_REQ* internal_default_instance() {
    return reinterpret_cast<const CAMERA_WAKE_UP_REQ*>(
               &_CAMERA_WAKE_UP_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CAMERA_WAKE_UP_REQ& a, CAMERA_WAKE_UP_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CAMERA_WAKE_UP_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAMERA_WAKE_UP_REQ* New() const final {
    return CreateMaybeMessage<CAMERA_WAKE_UP_REQ>(nullptr);
  }

  CAMERA_WAKE_UP_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAMERA_WAKE_UP_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAMERA_WAKE_UP_REQ& from);
  void MergeFrom(const CAMERA_WAKE_UP_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAMERA_WAKE_UP_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAMERA_WAKE_UP_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMachineIdFieldNumber = 5,
    kVarTypeFieldNumber = 2,
    kVarRoomNumberFieldNumber = 3,
    kVarToPlayerIdFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // required string var_machine_id = 5;
  bool has_var_machine_id() const;
  private:
  bool _internal_has_var_machine_id() const;
  public:
  void clear_var_machine_id();
  const std::string& var_machine_id() const;
  void set_var_machine_id(const std::string& value);
  void set_var_machine_id(std::string&& value);
  void set_var_machine_id(const char* value);
  void set_var_machine_id(const char* value, size_t size);
  std::string* mutable_var_machine_id();
  std::string* release_var_machine_id();
  void set_allocated_var_machine_id(std::string* var_machine_id);
  private:
  const std::string& _internal_var_machine_id() const;
  void _internal_set_var_machine_id(const std::string& value);
  std::string* _internal_mutable_var_machine_id();
  public:

  // required int32 var_type = 2;
  bool has_var_type() const;
  private:
  bool _internal_has_var_type() const;
  public:
  void clear_var_type();
  ::PROTOBUF_NAMESPACE_ID::int32 var_type() const;
  void set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_type() const;
  void _internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 var_room_number = 3;
  bool has_var_room_number() const;
  private:
  bool _internal_has_var_room_number() const;
  public:
  void clear_var_room_number();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number() const;
  void set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_number() const;
  void _internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int64 var_to_player_id = 4;
  bool has_var_to_player_id() const;
  private:
  bool _internal_has_var_to_player_id() const;
  public:
  void clear_var_to_player_id();
  ::PROTOBUF_NAMESPACE_ID::int64 var_to_player_id() const;
  void set_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_var_to_player_id() const;
  void _internal_set_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_WAKE_UP_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:CAMERA_WAKE_UP_REQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_machine_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 var_to_player_id_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class PRAY_MESSAGE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRAY_MESSAGE_REQ) */ {
 public:
  PRAY_MESSAGE_REQ();
  virtual ~PRAY_MESSAGE_REQ();

  PRAY_MESSAGE_REQ(const PRAY_MESSAGE_REQ& from);
  PRAY_MESSAGE_REQ(PRAY_MESSAGE_REQ&& from) noexcept
    : PRAY_MESSAGE_REQ() {
    *this = ::std::move(from);
  }

  inline PRAY_MESSAGE_REQ& operator=(const PRAY_MESSAGE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PRAY_MESSAGE_REQ& operator=(PRAY_MESSAGE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PRAY_MESSAGE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PRAY_MESSAGE_REQ* internal_default_instance() {
    return reinterpret_cast<const PRAY_MESSAGE_REQ*>(
               &_PRAY_MESSAGE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PRAY_MESSAGE_REQ& a, PRAY_MESSAGE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PRAY_MESSAGE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PRAY_MESSAGE_REQ* New() const final {
    return CreateMaybeMessage<PRAY_MESSAGE_REQ>(nullptr);
  }

  PRAY_MESSAGE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PRAY_MESSAGE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PRAY_MESSAGE_REQ& from);
  void MergeFrom(const PRAY_MESSAGE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PRAY_MESSAGE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRAY_MESSAGE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:PRAY_MESSAGE_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class PRAY_MESSAGE_REG_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PRAY_MESSAGE_REG_REQ) */ {
 public:
  PRAY_MESSAGE_REG_REQ();
  virtual ~PRAY_MESSAGE_REG_REQ();

  PRAY_MESSAGE_REG_REQ(const PRAY_MESSAGE_REG_REQ& from);
  PRAY_MESSAGE_REG_REQ(PRAY_MESSAGE_REG_REQ&& from) noexcept
    : PRAY_MESSAGE_REG_REQ() {
    *this = ::std::move(from);
  }

  inline PRAY_MESSAGE_REG_REQ& operator=(const PRAY_MESSAGE_REG_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PRAY_MESSAGE_REG_REQ& operator=(PRAY_MESSAGE_REG_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PRAY_MESSAGE_REG_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PRAY_MESSAGE_REG_REQ* internal_default_instance() {
    return reinterpret_cast<const PRAY_MESSAGE_REG_REQ*>(
               &_PRAY_MESSAGE_REG_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PRAY_MESSAGE_REG_REQ& a, PRAY_MESSAGE_REG_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PRAY_MESSAGE_REG_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PRAY_MESSAGE_REG_REQ* New() const final {
    return CreateMaybeMessage<PRAY_MESSAGE_REG_REQ>(nullptr);
  }

  PRAY_MESSAGE_REG_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PRAY_MESSAGE_REG_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PRAY_MESSAGE_REG_REQ& from);
  void MergeFrom(const PRAY_MESSAGE_REG_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PRAY_MESSAGE_REG_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PRAY_MESSAGE_REG_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string var_message = 2;
  bool has_var_message() const;
  private:
  bool _internal_has_var_message() const;
  public:
  void clear_var_message();
  const std::string& var_message() const;
  void set_var_message(const std::string& value);
  void set_var_message(std::string&& value);
  void set_var_message(const char* value);
  void set_var_message(const char* value, size_t size);
  std::string* mutable_var_message();
  std::string* release_var_message();
  void set_allocated_var_message(std::string* var_message);
  private:
  const std::string& _internal_var_message() const;
  void _internal_set_var_message(const std::string& value);
  std::string* _internal_mutable_var_message();
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REG_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:PRAY_MESSAGE_REG_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_message_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class QNA_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QNA_REQ) */ {
 public:
  QNA_REQ();
  virtual ~QNA_REQ();

  QNA_REQ(const QNA_REQ& from);
  QNA_REQ(QNA_REQ&& from) noexcept
    : QNA_REQ() {
    *this = ::std::move(from);
  }

  inline QNA_REQ& operator=(const QNA_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline QNA_REQ& operator=(QNA_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QNA_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QNA_REQ* internal_default_instance() {
    return reinterpret_cast<const QNA_REQ*>(
               &_QNA_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QNA_REQ& a, QNA_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(QNA_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QNA_REQ* New() const final {
    return CreateMaybeMessage<QNA_REQ>(nullptr);
  }

  QNA_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QNA_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QNA_REQ& from);
  void MergeFrom(const QNA_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QNA_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QNA_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string var_message = 2;
  bool has_var_message() const;
  private:
  bool _internal_has_var_message() const;
  public:
  void clear_var_message();
  const std::string& var_message() const;
  void set_var_message(const std::string& value);
  void set_var_message(std::string&& value);
  void set_var_message(const char* value);
  void set_var_message(const char* value, size_t size);
  std::string* mutable_var_message();
  std::string* release_var_message();
  void set_allocated_var_message(std::string* var_message);
  private:
  const std::string& _internal_var_message() const;
  void _internal_set_var_message(const std::string& value);
  std::string* _internal_mutable_var_message();
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_QNA_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:QNA_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_message_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class MAIL_LIST_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MAIL_LIST_REQ) */ {
 public:
  MAIL_LIST_REQ();
  virtual ~MAIL_LIST_REQ();

  MAIL_LIST_REQ(const MAIL_LIST_REQ& from);
  MAIL_LIST_REQ(MAIL_LIST_REQ&& from) noexcept
    : MAIL_LIST_REQ() {
    *this = ::std::move(from);
  }

  inline MAIL_LIST_REQ& operator=(const MAIL_LIST_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline MAIL_LIST_REQ& operator=(MAIL_LIST_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MAIL_LIST_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MAIL_LIST_REQ* internal_default_instance() {
    return reinterpret_cast<const MAIL_LIST_REQ*>(
               &_MAIL_LIST_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MAIL_LIST_REQ& a, MAIL_LIST_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(MAIL_LIST_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MAIL_LIST_REQ* New() const final {
    return CreateMaybeMessage<MAIL_LIST_REQ>(nullptr);
  }

  MAIL_LIST_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MAIL_LIST_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MAIL_LIST_REQ& from);
  void MergeFrom(const MAIL_LIST_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MAIL_LIST_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MAIL_LIST_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .PROTOCOL id = 1 [default = ID_PKT_MAIL_LIST_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:MAIL_LIST_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class REG_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:REG_REQ) */ {
 public:
  REG_REQ();
  virtual ~REG_REQ();

  REG_REQ(const REG_REQ& from);
  REG_REQ(REG_REQ&& from) noexcept
    : REG_REQ() {
    *this = ::std::move(from);
  }

  inline REG_REQ& operator=(const REG_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline REG_REQ& operator=(REG_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const REG_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const REG_REQ* internal_default_instance() {
    return reinterpret_cast<const REG_REQ*>(
               &_REG_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(REG_REQ& a, REG_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(REG_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline REG_REQ* New() const final {
    return CreateMaybeMessage<REG_REQ>(nullptr);
  }

  REG_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<REG_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const REG_REQ& from);
  void MergeFrom(const REG_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(REG_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "REG_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required int32 var_id = 2;
  bool has_var_id() const;
  private:
  bool _internal_has_var_id() const;
  public:
  void clear_var_id();
  ::PROTOBUF_NAMESPACE_ID::int32 var_id() const;
  void set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_id() const;
  void _internal_set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_REG_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:REG_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_id_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class CLIENT_LOGOUT_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLIENT_LOGOUT_REQ) */ {
 public:
  CLIENT_LOGOUT_REQ();
  virtual ~CLIENT_LOGOUT_REQ();

  CLIENT_LOGOUT_REQ(const CLIENT_LOGOUT_REQ& from);
  CLIENT_LOGOUT_REQ(CLIENT_LOGOUT_REQ&& from) noexcept
    : CLIENT_LOGOUT_REQ() {
    *this = ::std::move(from);
  }

  inline CLIENT_LOGOUT_REQ& operator=(const CLIENT_LOGOUT_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLIENT_LOGOUT_REQ& operator=(CLIENT_LOGOUT_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CLIENT_LOGOUT_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLIENT_LOGOUT_REQ* internal_default_instance() {
    return reinterpret_cast<const CLIENT_LOGOUT_REQ*>(
               &_CLIENT_LOGOUT_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CLIENT_LOGOUT_REQ& a, CLIENT_LOGOUT_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CLIENT_LOGOUT_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CLIENT_LOGOUT_REQ* New() const final {
    return CreateMaybeMessage<CLIENT_LOGOUT_REQ>(nullptr);
  }

  CLIENT_LOGOUT_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CLIENT_LOGOUT_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CLIENT_LOGOUT_REQ& from);
  void MergeFrom(const CLIENT_LOGOUT_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLIENT_LOGOUT_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLIENT_LOGOUT_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_LOGOUT_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:CLIENT_LOGOUT_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class CAMERA_CONTROL_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAMERA_CONTROL_REQ) */ {
 public:
  CAMERA_CONTROL_REQ();
  virtual ~CAMERA_CONTROL_REQ();

  CAMERA_CONTROL_REQ(const CAMERA_CONTROL_REQ& from);
  CAMERA_CONTROL_REQ(CAMERA_CONTROL_REQ&& from) noexcept
    : CAMERA_CONTROL_REQ() {
    *this = ::std::move(from);
  }

  inline CAMERA_CONTROL_REQ& operator=(const CAMERA_CONTROL_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAMERA_CONTROL_REQ& operator=(CAMERA_CONTROL_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CAMERA_CONTROL_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAMERA_CONTROL_REQ* internal_default_instance() {
    return reinterpret_cast<const CAMERA_CONTROL_REQ*>(
               &_CAMERA_CONTROL_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CAMERA_CONTROL_REQ& a, CAMERA_CONTROL_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CAMERA_CONTROL_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAMERA_CONTROL_REQ* New() const final {
    return CreateMaybeMessage<CAMERA_CONTROL_REQ>(nullptr);
  }

  CAMERA_CONTROL_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAMERA_CONTROL_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAMERA_CONTROL_REQ& from);
  void MergeFrom(const CAMERA_CONTROL_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAMERA_CONTROL_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAMERA_CONTROL_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMachineIdFieldNumber = 3,
    kVarPlayerIdFieldNumber = 4,
    kVarTypeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required string var_machine_id = 3;
  bool has_var_machine_id() const;
  private:
  bool _internal_has_var_machine_id() const;
  public:
  void clear_var_machine_id();
  const std::string& var_machine_id() const;
  void set_var_machine_id(const std::string& value);
  void set_var_machine_id(std::string&& value);
  void set_var_machine_id(const char* value);
  void set_var_machine_id(const char* value, size_t size);
  std::string* mutable_var_machine_id();
  std::string* release_var_machine_id();
  void set_allocated_var_machine_id(std::string* var_machine_id);
  private:
  const std::string& _internal_var_machine_id() const;
  void _internal_set_var_machine_id(const std::string& value);
  std::string* _internal_mutable_var_machine_id();
  public:

  // required int64 var_player_id = 4;
  bool has_var_player_id() const;
  private:
  bool _internal_has_var_player_id() const;
  public:
  void clear_var_player_id();
  ::PROTOBUF_NAMESPACE_ID::int64 var_player_id() const;
  void set_var_player_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_var_player_id() const;
  void _internal_set_var_player_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required .CameraControlType var_type = 2;
  bool has_var_type() const;
  private:
  bool _internal_has_var_type() const;
  public:
  void clear_var_type();
  ::CameraControlType var_type() const;
  void set_var_type(::CameraControlType value);
  private:
  ::CameraControlType _internal_var_type() const;
  void _internal_set_var_type(::CameraControlType value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_CONTROL_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:CAMERA_CONTROL_REQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_machine_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 var_player_id_;
  int var_type_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class MPEG2TS_MESSAGE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MPEG2TS_MESSAGE_REQ) */ {
 public:
  MPEG2TS_MESSAGE_REQ();
  virtual ~MPEG2TS_MESSAGE_REQ();

  MPEG2TS_MESSAGE_REQ(const MPEG2TS_MESSAGE_REQ& from);
  MPEG2TS_MESSAGE_REQ(MPEG2TS_MESSAGE_REQ&& from) noexcept
    : MPEG2TS_MESSAGE_REQ() {
    *this = ::std::move(from);
  }

  inline MPEG2TS_MESSAGE_REQ& operator=(const MPEG2TS_MESSAGE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPEG2TS_MESSAGE_REQ& operator=(MPEG2TS_MESSAGE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MPEG2TS_MESSAGE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MPEG2TS_MESSAGE_REQ* internal_default_instance() {
    return reinterpret_cast<const MPEG2TS_MESSAGE_REQ*>(
               &_MPEG2TS_MESSAGE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MPEG2TS_MESSAGE_REQ& a, MPEG2TS_MESSAGE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(MPEG2TS_MESSAGE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MPEG2TS_MESSAGE_REQ* New() const final {
    return CreateMaybeMessage<MPEG2TS_MESSAGE_REQ>(nullptr);
  }

  MPEG2TS_MESSAGE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MPEG2TS_MESSAGE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MPEG2TS_MESSAGE_REQ& from);
  void MergeFrom(const MPEG2TS_MESSAGE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MPEG2TS_MESSAGE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MPEG2TS_MESSAGE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 2,
    kVarRoomNumberFieldNumber = 3,
    kVarTypeFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // repeated bytes var_message = 2;
  int var_message_size() const;
  private:
  int _internal_var_message_size() const;
  public:
  void clear_var_message();
  const std::string& var_message(int index) const;
  std::string* mutable_var_message(int index);
  void set_var_message(int index, const std::string& value);
  void set_var_message(int index, std::string&& value);
  void set_var_message(int index, const char* value);
  void set_var_message(int index, const void* value, size_t size);
  std::string* add_var_message();
  void add_var_message(const std::string& value);
  void add_var_message(std::string&& value);
  void add_var_message(const char* value);
  void add_var_message(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& var_message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_var_message();
  private:
  const std::string& _internal_var_message(int index) const;
  std::string* _internal_add_var_message();
  public:

  // required int32 var_room_number = 3;
  bool has_var_room_number() const;
  private:
  bool _internal_has_var_room_number() const;
  public:
  void clear_var_room_number();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number() const;
  void set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_number() const;
  void _internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 var_type = 4;
  bool has_var_type() const;
  private:
  bool _internal_has_var_type() const;
  public:
  void clear_var_type();
  ::PROTOBUF_NAMESPACE_ID::int32 var_type() const;
  void set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_type() const;
  void _internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_MESSAGE_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:MPEG2TS_MESSAGE_REQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> var_message_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_type_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class REG_CAMERA_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:REG_CAMERA_REQ) */ {
 public:
  REG_CAMERA_REQ();
  virtual ~REG_CAMERA_REQ();

  REG_CAMERA_REQ(const REG_CAMERA_REQ& from);
  REG_CAMERA_REQ(REG_CAMERA_REQ&& from) noexcept
    : REG_CAMERA_REQ() {
    *this = ::std::move(from);
  }

  inline REG_CAMERA_REQ& operator=(const REG_CAMERA_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline REG_CAMERA_REQ& operator=(REG_CAMERA_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const REG_CAMERA_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const REG_CAMERA_REQ* internal_default_instance() {
    return reinterpret_cast<const REG_CAMERA_REQ*>(
               &_REG_CAMERA_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(REG_CAMERA_REQ& a, REG_CAMERA_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(REG_CAMERA_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline REG_CAMERA_REQ* New() const final {
    return CreateMaybeMessage<REG_CAMERA_REQ>(nullptr);
  }

  REG_CAMERA_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<REG_CAMERA_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const REG_CAMERA_REQ& from);
  void MergeFrom(const REG_CAMERA_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(REG_CAMERA_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "REG_CAMERA_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarCamNameFieldNumber = 2,
    kVarMachineIdFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // required string var_cam_name = 2;
  bool has_var_cam_name() const;
  private:
  bool _internal_has_var_cam_name() const;
  public:
  void clear_var_cam_name();
  const std::string& var_cam_name() const;
  void set_var_cam_name(const std::string& value);
  void set_var_cam_name(std::string&& value);
  void set_var_cam_name(const char* value);
  void set_var_cam_name(const char* value, size_t size);
  std::string* mutable_var_cam_name();
  std::string* release_var_cam_name();
  void set_allocated_var_cam_name(std::string* var_cam_name);
  private:
  const std::string& _internal_var_cam_name() const;
  void _internal_set_var_cam_name(const std::string& value);
  std::string* _internal_mutable_var_cam_name();
  public:

  // required string var_machine_id = 3;
  bool has_var_machine_id() const;
  private:
  bool _internal_has_var_machine_id() const;
  public:
  void clear_var_machine_id();
  const std::string& var_machine_id() const;
  void set_var_machine_id(const std::string& value);
  void set_var_machine_id(std::string&& value);
  void set_var_machine_id(const char* value);
  void set_var_machine_id(const char* value, size_t size);
  std::string* mutable_var_machine_id();
  std::string* release_var_machine_id();
  void set_allocated_var_machine_id(std::string* var_machine_id);
  private:
  const std::string& _internal_var_machine_id() const;
  void _internal_set_var_machine_id(const std::string& value);
  std::string* _internal_mutable_var_machine_id();
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_REG_CAMERA_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:REG_CAMERA_REQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_cam_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_machine_id_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class CAMERA_LIST_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CAMERA_LIST_REQ) */ {
 public:
  CAMERA_LIST_REQ();
  virtual ~CAMERA_LIST_REQ();

  CAMERA_LIST_REQ(const CAMERA_LIST_REQ& from);
  CAMERA_LIST_REQ(CAMERA_LIST_REQ&& from) noexcept
    : CAMERA_LIST_REQ() {
    *this = ::std::move(from);
  }

  inline CAMERA_LIST_REQ& operator=(const CAMERA_LIST_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline CAMERA_LIST_REQ& operator=(CAMERA_LIST_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CAMERA_LIST_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CAMERA_LIST_REQ* internal_default_instance() {
    return reinterpret_cast<const CAMERA_LIST_REQ*>(
               &_CAMERA_LIST_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CAMERA_LIST_REQ& a, CAMERA_LIST_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(CAMERA_LIST_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CAMERA_LIST_REQ* New() const final {
    return CreateMaybeMessage<CAMERA_LIST_REQ>(nullptr);
  }

  CAMERA_LIST_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CAMERA_LIST_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CAMERA_LIST_REQ& from);
  void MergeFrom(const CAMERA_LIST_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CAMERA_LIST_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CAMERA_LIST_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_LIST_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:CAMERA_LIST_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class MACHINE_STATUS_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MACHINE_STATUS_REQ) */ {
 public:
  MACHINE_STATUS_REQ();
  virtual ~MACHINE_STATUS_REQ();

  MACHINE_STATUS_REQ(const MACHINE_STATUS_REQ& from);
  MACHINE_STATUS_REQ(MACHINE_STATUS_REQ&& from) noexcept
    : MACHINE_STATUS_REQ() {
    *this = ::std::move(from);
  }

  inline MACHINE_STATUS_REQ& operator=(const MACHINE_STATUS_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline MACHINE_STATUS_REQ& operator=(MACHINE_STATUS_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MACHINE_STATUS_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MACHINE_STATUS_REQ* internal_default_instance() {
    return reinterpret_cast<const MACHINE_STATUS_REQ*>(
               &_MACHINE_STATUS_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MACHINE_STATUS_REQ& a, MACHINE_STATUS_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(MACHINE_STATUS_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MACHINE_STATUS_REQ* New() const final {
    return CreateMaybeMessage<MACHINE_STATUS_REQ>(nullptr);
  }

  MACHINE_STATUS_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MACHINE_STATUS_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MACHINE_STATUS_REQ& from);
  void MergeFrom(const MACHINE_STATUS_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MACHINE_STATUS_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MACHINE_STATUS_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarToPlayerIdFieldNumber = 5,
    kVarBatteryFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // repeated int64 var_to_player_id = 5;
  int var_to_player_id_size() const;
  private:
  int _internal_var_to_player_id_size() const;
  public:
  void clear_var_to_player_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_var_to_player_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_var_to_player_id() const;
  void _internal_add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_var_to_player_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 var_to_player_id(int index) const;
  void set_var_to_player_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      var_to_player_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_var_to_player_id();

  // required int32 var_battery = 4;
  bool has_var_battery() const;
  private:
  bool _internal_has_var_battery() const;
  public:
  void clear_var_battery();
  ::PROTOBUF_NAMESPACE_ID::int32 var_battery() const;
  void set_var_battery(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_battery() const;
  void _internal_set_var_battery(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_MACHINE_STATUS_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:MACHINE_STATUS_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > var_to_player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_battery_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class VERIFY_PURCHASE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VERIFY_PURCHASE_REQ) */ {
 public:
  VERIFY_PURCHASE_REQ();
  virtual ~VERIFY_PURCHASE_REQ();

  VERIFY_PURCHASE_REQ(const VERIFY_PURCHASE_REQ& from);
  VERIFY_PURCHASE_REQ(VERIFY_PURCHASE_REQ&& from) noexcept
    : VERIFY_PURCHASE_REQ() {
    *this = ::std::move(from);
  }

  inline VERIFY_PURCHASE_REQ& operator=(const VERIFY_PURCHASE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline VERIFY_PURCHASE_REQ& operator=(VERIFY_PURCHASE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VERIFY_PURCHASE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VERIFY_PURCHASE_REQ* internal_default_instance() {
    return reinterpret_cast<const VERIFY_PURCHASE_REQ*>(
               &_VERIFY_PURCHASE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(VERIFY_PURCHASE_REQ& a, VERIFY_PURCHASE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(VERIFY_PURCHASE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VERIFY_PURCHASE_REQ* New() const final {
    return CreateMaybeMessage<VERIFY_PURCHASE_REQ>(nullptr);
  }

  VERIFY_PURCHASE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VERIFY_PURCHASE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VERIFY_PURCHASE_REQ& from);
  void MergeFrom(const VERIFY_PURCHASE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VERIFY_PURCHASE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VERIFY_PURCHASE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarPackageNameFieldNumber = 2,
    kVarPurchaseIdFieldNumber = 3,
    kVarTokenFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // required string var_package_name = 2;
  bool has_var_package_name() const;
  private:
  bool _internal_has_var_package_name() const;
  public:
  void clear_var_package_name();
  const std::string& var_package_name() const;
  void set_var_package_name(const std::string& value);
  void set_var_package_name(std::string&& value);
  void set_var_package_name(const char* value);
  void set_var_package_name(const char* value, size_t size);
  std::string* mutable_var_package_name();
  std::string* release_var_package_name();
  void set_allocated_var_package_name(std::string* var_package_name);
  private:
  const std::string& _internal_var_package_name() const;
  void _internal_set_var_package_name(const std::string& value);
  std::string* _internal_mutable_var_package_name();
  public:

  // required string var_purchase_id = 3;
  bool has_var_purchase_id() const;
  private:
  bool _internal_has_var_purchase_id() const;
  public:
  void clear_var_purchase_id();
  const std::string& var_purchase_id() const;
  void set_var_purchase_id(const std::string& value);
  void set_var_purchase_id(std::string&& value);
  void set_var_purchase_id(const char* value);
  void set_var_purchase_id(const char* value, size_t size);
  std::string* mutable_var_purchase_id();
  std::string* release_var_purchase_id();
  void set_allocated_var_purchase_id(std::string* var_purchase_id);
  private:
  const std::string& _internal_var_purchase_id() const;
  void _internal_set_var_purchase_id(const std::string& value);
  std::string* _internal_mutable_var_purchase_id();
  public:

  // required string var_token = 4;
  bool has_var_token() const;
  private:
  bool _internal_has_var_token() const;
  public:
  void clear_var_token();
  const std::string& var_token() const;
  void set_var_token(const std::string& value);
  void set_var_token(std::string&& value);
  void set_var_token(const char* value);
  void set_var_token(const char* value, size_t size);
  std::string* mutable_var_token();
  std::string* release_var_token();
  void set_allocated_var_token(std::string* var_token);
  private:
  const std::string& _internal_var_token() const;
  void _internal_set_var_token(const std::string& value);
  std::string* _internal_mutable_var_token();
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_VERIFY_PURCHASE_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:VERIFY_PURCHASE_REQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_package_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_purchase_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_token_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class DEL_CAMERA_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DEL_CAMERA_REQ) */ {
 public:
  DEL_CAMERA_REQ();
  virtual ~DEL_CAMERA_REQ();

  DEL_CAMERA_REQ(const DEL_CAMERA_REQ& from);
  DEL_CAMERA_REQ(DEL_CAMERA_REQ&& from) noexcept
    : DEL_CAMERA_REQ() {
    *this = ::std::move(from);
  }

  inline DEL_CAMERA_REQ& operator=(const DEL_CAMERA_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline DEL_CAMERA_REQ& operator=(DEL_CAMERA_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DEL_CAMERA_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DEL_CAMERA_REQ* internal_default_instance() {
    return reinterpret_cast<const DEL_CAMERA_REQ*>(
               &_DEL_CAMERA_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DEL_CAMERA_REQ& a, DEL_CAMERA_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(DEL_CAMERA_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DEL_CAMERA_REQ* New() const final {
    return CreateMaybeMessage<DEL_CAMERA_REQ>(nullptr);
  }

  DEL_CAMERA_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DEL_CAMERA_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DEL_CAMERA_REQ& from);
  void MergeFrom(const DEL_CAMERA_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DEL_CAMERA_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DEL_CAMERA_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMachineIdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required string var_machine_id = 2;
  bool has_var_machine_id() const;
  private:
  bool _internal_has_var_machine_id() const;
  public:
  void clear_var_machine_id();
  const std::string& var_machine_id() const;
  void set_var_machine_id(const std::string& value);
  void set_var_machine_id(std::string&& value);
  void set_var_machine_id(const char* value);
  void set_var_machine_id(const char* value, size_t size);
  std::string* mutable_var_machine_id();
  std::string* release_var_machine_id();
  void set_allocated_var_machine_id(std::string* var_machine_id);
  private:
  const std::string& _internal_var_machine_id() const;
  void _internal_set_var_machine_id(const std::string& value);
  std::string* _internal_mutable_var_machine_id();
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_DEL_CAMERA_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:DEL_CAMERA_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_machine_id_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// -------------------------------------------------------------------

class RECONNECT_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RECONNECT_REQ) */ {
 public:
  RECONNECT_REQ();
  virtual ~RECONNECT_REQ();

  RECONNECT_REQ(const RECONNECT_REQ& from);
  RECONNECT_REQ(RECONNECT_REQ&& from) noexcept
    : RECONNECT_REQ() {
    *this = ::std::move(from);
  }

  inline RECONNECT_REQ& operator=(const RECONNECT_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline RECONNECT_REQ& operator=(RECONNECT_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RECONNECT_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RECONNECT_REQ* internal_default_instance() {
    return reinterpret_cast<const RECONNECT_REQ*>(
               &_RECONNECT_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RECONNECT_REQ& a, RECONNECT_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(RECONNECT_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RECONNECT_REQ* New() const final {
    return CreateMaybeMessage<RECONNECT_REQ>(nullptr);
  }

  RECONNECT_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RECONNECT_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RECONNECT_REQ& from);
  void MergeFrom(const RECONNECT_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RECONNECT_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RECONNECT_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_CLI_2eGS_2eproto);
    return ::descriptor_table_CLI_2eGS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMachineIdFieldNumber = 2,
    kVarMachineNameFieldNumber = 3,
    kVarTokenFieldNumber = 4,
    kVarEmailFieldNumber = 6,
    kVarNameFieldNumber = 7,
    kVarIndexFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // required string var_machine_id = 2;
  bool has_var_machine_id() const;
  private:
  bool _internal_has_var_machine_id() const;
  public:
  void clear_var_machine_id();
  const std::string& var_machine_id() const;
  void set_var_machine_id(const std::string& value);
  void set_var_machine_id(std::string&& value);
  void set_var_machine_id(const char* value);
  void set_var_machine_id(const char* value, size_t size);
  std::string* mutable_var_machine_id();
  std::string* release_var_machine_id();
  void set_allocated_var_machine_id(std::string* var_machine_id);
  private:
  const std::string& _internal_var_machine_id() const;
  void _internal_set_var_machine_id(const std::string& value);
  std::string* _internal_mutable_var_machine_id();
  public:

  // required string var_machine_name = 3;
  bool has_var_machine_name() const;
  private:
  bool _internal_has_var_machine_name() const;
  public:
  void clear_var_machine_name();
  const std::string& var_machine_name() const;
  void set_var_machine_name(const std::string& value);
  void set_var_machine_name(std::string&& value);
  void set_var_machine_name(const char* value);
  void set_var_machine_name(const char* value, size_t size);
  std::string* mutable_var_machine_name();
  std::string* release_var_machine_name();
  void set_allocated_var_machine_name(std::string* var_machine_name);
  private:
  const std::string& _internal_var_machine_name() const;
  void _internal_set_var_machine_name(const std::string& value);
  std::string* _internal_mutable_var_machine_name();
  public:

  // required string var_token = 4;
  bool has_var_token() const;
  private:
  bool _internal_has_var_token() const;
  public:
  void clear_var_token();
  const std::string& var_token() const;
  void set_var_token(const std::string& value);
  void set_var_token(std::string&& value);
  void set_var_token(const char* value);
  void set_var_token(const char* value, size_t size);
  std::string* mutable_var_token();
  std::string* release_var_token();
  void set_allocated_var_token(std::string* var_token);
  private:
  const std::string& _internal_var_token() const;
  void _internal_set_var_token(const std::string& value);
  std::string* _internal_mutable_var_token();
  public:

  // required string var_email = 6;
  bool has_var_email() const;
  private:
  bool _internal_has_var_email() const;
  public:
  void clear_var_email();
  const std::string& var_email() const;
  void set_var_email(const std::string& value);
  void set_var_email(std::string&& value);
  void set_var_email(const char* value);
  void set_var_email(const char* value, size_t size);
  std::string* mutable_var_email();
  std::string* release_var_email();
  void set_allocated_var_email(std::string* var_email);
  private:
  const std::string& _internal_var_email() const;
  void _internal_set_var_email(const std::string& value);
  std::string* _internal_mutable_var_email();
  public:

  // required string var_name = 7;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const char* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // required int64 var_index = 5;
  bool has_var_index() const;
  private:
  bool _internal_has_var_index() const;
  public:
  void clear_var_index();
  ::PROTOBUF_NAMESPACE_ID::int64 var_index() const;
  void set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_var_index() const;
  void _internal_set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_RECONNECT_REQ];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:RECONNECT_REQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_machine_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_machine_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 var_index_;
  int id_;
  friend struct ::TableStruct_CLI_2eGS_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VERSION_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_REQ];
inline bool VERSION_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VERSION_REQ::has_id() const {
  return _internal_has_id();
}
inline void VERSION_REQ::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL VERSION_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL VERSION_REQ::id() const {
  // @@protoc_insertion_point(field_get:VERSION_REQ.id)
  return _internal_id();
}
inline void VERSION_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void VERSION_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:VERSION_REQ.id)
}

// -------------------------------------------------------------------

// LOGIN_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_REQ];
inline bool LOGIN_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LOGIN_REQ::has_id() const {
  return _internal_has_id();
}
inline void LOGIN_REQ::clear_id() {
  id_ = 2;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOCOL LOGIN_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL LOGIN_REQ::id() const {
  // @@protoc_insertion_point(field_get:LOGIN_REQ.id)
  return _internal_id();
}
inline void LOGIN_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  id_ = value;
}
inline void LOGIN_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LOGIN_REQ.id)
}

// required string var_uid = 2;
inline bool LOGIN_REQ::_internal_has_var_uid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LOGIN_REQ::has_var_uid() const {
  return _internal_has_var_uid();
}
inline void LOGIN_REQ::clear_var_uid() {
  var_uid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LOGIN_REQ::var_uid() const {
  // @@protoc_insertion_point(field_get:LOGIN_REQ.var_uid)
  return _internal_var_uid();
}
inline void LOGIN_REQ::set_var_uid(const std::string& value) {
  _internal_set_var_uid(value);
  // @@protoc_insertion_point(field_set:LOGIN_REQ.var_uid)
}
inline std::string* LOGIN_REQ::mutable_var_uid() {
  // @@protoc_insertion_point(field_mutable:LOGIN_REQ.var_uid)
  return _internal_mutable_var_uid();
}
inline const std::string& LOGIN_REQ::_internal_var_uid() const {
  return var_uid_.GetNoArena();
}
inline void LOGIN_REQ::_internal_set_var_uid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LOGIN_REQ::set_var_uid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_uid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOGIN_REQ.var_uid)
}
inline void LOGIN_REQ::set_var_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOGIN_REQ.var_uid)
}
inline void LOGIN_REQ::set_var_uid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_uid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOGIN_REQ.var_uid)
}
inline std::string* LOGIN_REQ::_internal_mutable_var_uid() {
  _has_bits_[0] |= 0x00000001u;
  return var_uid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LOGIN_REQ::release_var_uid() {
  // @@protoc_insertion_point(field_release:LOGIN_REQ.var_uid)
  if (!_internal_has_var_uid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_uid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LOGIN_REQ::set_allocated_var_uid(std::string* var_uid) {
  if (var_uid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_uid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_uid);
  // @@protoc_insertion_point(field_set_allocated:LOGIN_REQ.var_uid)
}

// required string var_token = 3;
inline bool LOGIN_REQ::_internal_has_var_token() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LOGIN_REQ::has_var_token() const {
  return _internal_has_var_token();
}
inline void LOGIN_REQ::clear_var_token() {
  var_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LOGIN_REQ::var_token() const {
  // @@protoc_insertion_point(field_get:LOGIN_REQ.var_token)
  return _internal_var_token();
}
inline void LOGIN_REQ::set_var_token(const std::string& value) {
  _internal_set_var_token(value);
  // @@protoc_insertion_point(field_set:LOGIN_REQ.var_token)
}
inline std::string* LOGIN_REQ::mutable_var_token() {
  // @@protoc_insertion_point(field_mutable:LOGIN_REQ.var_token)
  return _internal_mutable_var_token();
}
inline const std::string& LOGIN_REQ::_internal_var_token() const {
  return var_token_.GetNoArena();
}
inline void LOGIN_REQ::_internal_set_var_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  var_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LOGIN_REQ::set_var_token(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  var_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOGIN_REQ.var_token)
}
inline void LOGIN_REQ::set_var_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  var_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOGIN_REQ.var_token)
}
inline void LOGIN_REQ::set_var_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  var_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOGIN_REQ.var_token)
}
inline std::string* LOGIN_REQ::_internal_mutable_var_token() {
  _has_bits_[0] |= 0x00000002u;
  return var_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LOGIN_REQ::release_var_token() {
  // @@protoc_insertion_point(field_release:LOGIN_REQ.var_token)
  if (!_internal_has_var_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return var_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LOGIN_REQ::set_allocated_var_token(std::string* var_token) {
  if (var_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  var_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_token);
  // @@protoc_insertion_point(field_set_allocated:LOGIN_REQ.var_token)
}

// required string var_cam_name = 4;
inline bool LOGIN_REQ::_internal_has_var_cam_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LOGIN_REQ::has_var_cam_name() const {
  return _internal_has_var_cam_name();
}
inline void LOGIN_REQ::clear_var_cam_name() {
  var_cam_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LOGIN_REQ::var_cam_name() const {
  // @@protoc_insertion_point(field_get:LOGIN_REQ.var_cam_name)
  return _internal_var_cam_name();
}
inline void LOGIN_REQ::set_var_cam_name(const std::string& value) {
  _internal_set_var_cam_name(value);
  // @@protoc_insertion_point(field_set:LOGIN_REQ.var_cam_name)
}
inline std::string* LOGIN_REQ::mutable_var_cam_name() {
  // @@protoc_insertion_point(field_mutable:LOGIN_REQ.var_cam_name)
  return _internal_mutable_var_cam_name();
}
inline const std::string& LOGIN_REQ::_internal_var_cam_name() const {
  return var_cam_name_.GetNoArena();
}
inline void LOGIN_REQ::_internal_set_var_cam_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  var_cam_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LOGIN_REQ::set_var_cam_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  var_cam_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOGIN_REQ.var_cam_name)
}
inline void LOGIN_REQ::set_var_cam_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  var_cam_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOGIN_REQ.var_cam_name)
}
inline void LOGIN_REQ::set_var_cam_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  var_cam_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOGIN_REQ.var_cam_name)
}
inline std::string* LOGIN_REQ::_internal_mutable_var_cam_name() {
  _has_bits_[0] |= 0x00000004u;
  return var_cam_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LOGIN_REQ::release_var_cam_name() {
  // @@protoc_insertion_point(field_release:LOGIN_REQ.var_cam_name)
  if (!_internal_has_var_cam_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return var_cam_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LOGIN_REQ::set_allocated_var_cam_name(std::string* var_cam_name) {
  if (var_cam_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  var_cam_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_cam_name);
  // @@protoc_insertion_point(field_set_allocated:LOGIN_REQ.var_cam_name)
}

// required string var_machine_id = 5;
inline bool LOGIN_REQ::_internal_has_var_machine_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LOGIN_REQ::has_var_machine_id() const {
  return _internal_has_var_machine_id();
}
inline void LOGIN_REQ::clear_var_machine_id() {
  var_machine_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LOGIN_REQ::var_machine_id() const {
  // @@protoc_insertion_point(field_get:LOGIN_REQ.var_machine_id)
  return _internal_var_machine_id();
}
inline void LOGIN_REQ::set_var_machine_id(const std::string& value) {
  _internal_set_var_machine_id(value);
  // @@protoc_insertion_point(field_set:LOGIN_REQ.var_machine_id)
}
inline std::string* LOGIN_REQ::mutable_var_machine_id() {
  // @@protoc_insertion_point(field_mutable:LOGIN_REQ.var_machine_id)
  return _internal_mutable_var_machine_id();
}
inline const std::string& LOGIN_REQ::_internal_var_machine_id() const {
  return var_machine_id_.GetNoArena();
}
inline void LOGIN_REQ::_internal_set_var_machine_id(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LOGIN_REQ::set_var_machine_id(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  var_machine_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOGIN_REQ.var_machine_id)
}
inline void LOGIN_REQ::set_var_machine_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOGIN_REQ.var_machine_id)
}
inline void LOGIN_REQ::set_var_machine_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOGIN_REQ.var_machine_id)
}
inline std::string* LOGIN_REQ::_internal_mutable_var_machine_id() {
  _has_bits_[0] |= 0x00000008u;
  return var_machine_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LOGIN_REQ::release_var_machine_id() {
  // @@protoc_insertion_point(field_release:LOGIN_REQ.var_machine_id)
  if (!_internal_has_var_machine_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return var_machine_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LOGIN_REQ::set_allocated_var_machine_id(std::string* var_machine_id) {
  if (var_machine_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  var_machine_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_machine_id);
  // @@protoc_insertion_point(field_set_allocated:LOGIN_REQ.var_machine_id)
}

// required string var_ip = 6;
inline bool LOGIN_REQ::_internal_has_var_ip() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool LOGIN_REQ::has_var_ip() const {
  return _internal_has_var_ip();
}
inline void LOGIN_REQ::clear_var_ip() {
  var_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& LOGIN_REQ::var_ip() const {
  // @@protoc_insertion_point(field_get:LOGIN_REQ.var_ip)
  return _internal_var_ip();
}
inline void LOGIN_REQ::set_var_ip(const std::string& value) {
  _internal_set_var_ip(value);
  // @@protoc_insertion_point(field_set:LOGIN_REQ.var_ip)
}
inline std::string* LOGIN_REQ::mutable_var_ip() {
  // @@protoc_insertion_point(field_mutable:LOGIN_REQ.var_ip)
  return _internal_mutable_var_ip();
}
inline const std::string& LOGIN_REQ::_internal_var_ip() const {
  return var_ip_.GetNoArena();
}
inline void LOGIN_REQ::_internal_set_var_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  var_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LOGIN_REQ::set_var_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  var_ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LOGIN_REQ.var_ip)
}
inline void LOGIN_REQ::set_var_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  var_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LOGIN_REQ.var_ip)
}
inline void LOGIN_REQ::set_var_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  var_ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LOGIN_REQ.var_ip)
}
inline std::string* LOGIN_REQ::_internal_mutable_var_ip() {
  _has_bits_[0] |= 0x00000010u;
  return var_ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LOGIN_REQ::release_var_ip() {
  // @@protoc_insertion_point(field_release:LOGIN_REQ.var_ip)
  if (!_internal_has_var_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return var_ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LOGIN_REQ::set_allocated_var_ip(std::string* var_ip) {
  if (var_ip != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  var_ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_ip);
  // @@protoc_insertion_point(field_set_allocated:LOGIN_REQ.var_ip)
}

// -------------------------------------------------------------------

// CREATE_ROOM_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_REQ];
inline bool CREATE_ROOM_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CREATE_ROOM_REQ::has_id() const {
  return _internal_has_id();
}
inline void CREATE_ROOM_REQ::clear_id() {
  id_ = 4;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL CREATE_ROOM_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL CREATE_ROOM_REQ::id() const {
  // @@protoc_insertion_point(field_get:CREATE_ROOM_REQ.id)
  return _internal_id();
}
inline void CREATE_ROOM_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CREATE_ROOM_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CREATE_ROOM_REQ.id)
}

// required string var_name = 2;
inline bool CREATE_ROOM_REQ::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CREATE_ROOM_REQ::has_var_name() const {
  return _internal_has_var_name();
}
inline void CREATE_ROOM_REQ::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CREATE_ROOM_REQ::var_name() const {
  // @@protoc_insertion_point(field_get:CREATE_ROOM_REQ.var_name)
  return _internal_var_name();
}
inline void CREATE_ROOM_REQ::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:CREATE_ROOM_REQ.var_name)
}
inline std::string* CREATE_ROOM_REQ::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:CREATE_ROOM_REQ.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& CREATE_ROOM_REQ::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void CREATE_ROOM_REQ::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CREATE_ROOM_REQ::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CREATE_ROOM_REQ.var_name)
}
inline void CREATE_ROOM_REQ::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CREATE_ROOM_REQ.var_name)
}
inline void CREATE_ROOM_REQ::set_var_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CREATE_ROOM_REQ.var_name)
}
inline std::string* CREATE_ROOM_REQ::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CREATE_ROOM_REQ::release_var_name() {
  // @@protoc_insertion_point(field_release:CREATE_ROOM_REQ.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CREATE_ROOM_REQ::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:CREATE_ROOM_REQ.var_name)
}

// -------------------------------------------------------------------

// ENTER_ROOM_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_REQ];
inline bool ENTER_ROOM_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ENTER_ROOM_REQ::has_id() const {
  return _internal_has_id();
}
inline void ENTER_ROOM_REQ::clear_id() {
  id_ = 6;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL ENTER_ROOM_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL ENTER_ROOM_REQ::id() const {
  // @@protoc_insertion_point(field_get:ENTER_ROOM_REQ.id)
  return _internal_id();
}
inline void ENTER_ROOM_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void ENTER_ROOM_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ENTER_ROOM_REQ.id)
}

// required int32 var_room_number = 2;
inline bool ENTER_ROOM_REQ::_internal_has_var_room_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ENTER_ROOM_REQ::has_var_room_number() const {
  return _internal_has_var_room_number();
}
inline void ENTER_ROOM_REQ::clear_var_room_number() {
  var_room_number_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ENTER_ROOM_REQ::_internal_var_room_number() const {
  return var_room_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ENTER_ROOM_REQ::var_room_number() const {
  // @@protoc_insertion_point(field_get:ENTER_ROOM_REQ.var_room_number)
  return _internal_var_room_number();
}
inline void ENTER_ROOM_REQ::_internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  var_room_number_ = value;
}
inline void ENTER_ROOM_REQ::set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_number(value);
  // @@protoc_insertion_point(field_set:ENTER_ROOM_REQ.var_room_number)
}

// -------------------------------------------------------------------

// LEAVE_ROOM_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_REQ];
inline bool LEAVE_ROOM_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LEAVE_ROOM_REQ::has_id() const {
  return _internal_has_id();
}
inline void LEAVE_ROOM_REQ::clear_id() {
  id_ = 8;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOCOL LEAVE_ROOM_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL LEAVE_ROOM_REQ::id() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_REQ.id)
  return _internal_id();
}
inline void LEAVE_ROOM_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void LEAVE_ROOM_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_REQ.id)
}

// required int32 var_id = 2;
inline bool LEAVE_ROOM_REQ::_internal_has_var_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LEAVE_ROOM_REQ::has_var_id() const {
  return _internal_has_var_id();
}
inline void LEAVE_ROOM_REQ::clear_var_id() {
  var_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LEAVE_ROOM_REQ::_internal_var_id() const {
  return var_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LEAVE_ROOM_REQ::var_id() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_REQ.var_id)
  return _internal_var_id();
}
inline void LEAVE_ROOM_REQ::_internal_set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  var_id_ = value;
}
inline void LEAVE_ROOM_REQ::set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_id(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_REQ.var_id)
}

// required int32 var_room_number = 3;
inline bool LEAVE_ROOM_REQ::_internal_has_var_room_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LEAVE_ROOM_REQ::has_var_room_number() const {
  return _internal_has_var_room_number();
}
inline void LEAVE_ROOM_REQ::clear_var_room_number() {
  var_room_number_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LEAVE_ROOM_REQ::_internal_var_room_number() const {
  return var_room_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LEAVE_ROOM_REQ::var_room_number() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_REQ.var_room_number)
  return _internal_var_room_number();
}
inline void LEAVE_ROOM_REQ::_internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  var_room_number_ = value;
}
inline void LEAVE_ROOM_REQ::set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_number(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_REQ.var_room_number)
}

// -------------------------------------------------------------------

// ROOM_LIST_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_REQ];
inline bool ROOM_LIST_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROOM_LIST_REQ::has_id() const {
  return _internal_has_id();
}
inline void ROOM_LIST_REQ::clear_id() {
  id_ = 13;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL ROOM_LIST_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL ROOM_LIST_REQ::id() const {
  // @@protoc_insertion_point(field_get:ROOM_LIST_REQ.id)
  return _internal_id();
}
inline void ROOM_LIST_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void ROOM_LIST_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ROOM_LIST_REQ.id)
}

// -------------------------------------------------------------------

// ROOM_PASS_THROUGH_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_PASS_THROUGH_REQ];
inline bool ROOM_PASS_THROUGH_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ROOM_PASS_THROUGH_REQ::has_id() const {
  return _internal_has_id();
}
inline void ROOM_PASS_THROUGH_REQ::clear_id() {
  id_ = 17;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOCOL ROOM_PASS_THROUGH_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL ROOM_PASS_THROUGH_REQ::id() const {
  // @@protoc_insertion_point(field_get:ROOM_PASS_THROUGH_REQ.id)
  return _internal_id();
}
inline void ROOM_PASS_THROUGH_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void ROOM_PASS_THROUGH_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ROOM_PASS_THROUGH_REQ.id)
}

// required string var_message = 2;
inline bool ROOM_PASS_THROUGH_REQ::_internal_has_var_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROOM_PASS_THROUGH_REQ::has_var_message() const {
  return _internal_has_var_message();
}
inline void ROOM_PASS_THROUGH_REQ::clear_var_message() {
  var_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ROOM_PASS_THROUGH_REQ::var_message() const {
  // @@protoc_insertion_point(field_get:ROOM_PASS_THROUGH_REQ.var_message)
  return _internal_var_message();
}
inline void ROOM_PASS_THROUGH_REQ::set_var_message(const std::string& value) {
  _internal_set_var_message(value);
  // @@protoc_insertion_point(field_set:ROOM_PASS_THROUGH_REQ.var_message)
}
inline std::string* ROOM_PASS_THROUGH_REQ::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable:ROOM_PASS_THROUGH_REQ.var_message)
  return _internal_mutable_var_message();
}
inline const std::string& ROOM_PASS_THROUGH_REQ::_internal_var_message() const {
  return var_message_.GetNoArena();
}
inline void ROOM_PASS_THROUGH_REQ::_internal_set_var_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ROOM_PASS_THROUGH_REQ::set_var_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ROOM_PASS_THROUGH_REQ.var_message)
}
inline void ROOM_PASS_THROUGH_REQ::set_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ROOM_PASS_THROUGH_REQ.var_message)
}
inline void ROOM_PASS_THROUGH_REQ::set_var_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ROOM_PASS_THROUGH_REQ.var_message)
}
inline std::string* ROOM_PASS_THROUGH_REQ::_internal_mutable_var_message() {
  _has_bits_[0] |= 0x00000001u;
  return var_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ROOM_PASS_THROUGH_REQ::release_var_message() {
  // @@protoc_insertion_point(field_release:ROOM_PASS_THROUGH_REQ.var_message)
  if (!_internal_has_var_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ROOM_PASS_THROUGH_REQ::set_allocated_var_message(std::string* var_message) {
  if (var_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_message);
  // @@protoc_insertion_point(field_set_allocated:ROOM_PASS_THROUGH_REQ.var_message)
}

// required int32 var_message_int = 3;
inline bool ROOM_PASS_THROUGH_REQ::_internal_has_var_message_int() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ROOM_PASS_THROUGH_REQ::has_var_message_int() const {
  return _internal_has_var_message_int();
}
inline void ROOM_PASS_THROUGH_REQ::clear_var_message_int() {
  var_message_int_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ROOM_PASS_THROUGH_REQ::_internal_var_message_int() const {
  return var_message_int_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ROOM_PASS_THROUGH_REQ::var_message_int() const {
  // @@protoc_insertion_point(field_get:ROOM_PASS_THROUGH_REQ.var_message_int)
  return _internal_var_message_int();
}
inline void ROOM_PASS_THROUGH_REQ::_internal_set_var_message_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  var_message_int_ = value;
}
inline void ROOM_PASS_THROUGH_REQ::set_var_message_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_message_int(value);
  // @@protoc_insertion_point(field_set:ROOM_PASS_THROUGH_REQ.var_message_int)
}

// required int32 var_room_number = 4;
inline bool ROOM_PASS_THROUGH_REQ::_internal_has_var_room_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ROOM_PASS_THROUGH_REQ::has_var_room_number() const {
  return _internal_has_var_room_number();
}
inline void ROOM_PASS_THROUGH_REQ::clear_var_room_number() {
  var_room_number_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ROOM_PASS_THROUGH_REQ::_internal_var_room_number() const {
  return var_room_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ROOM_PASS_THROUGH_REQ::var_room_number() const {
  // @@protoc_insertion_point(field_get:ROOM_PASS_THROUGH_REQ.var_room_number)
  return _internal_var_room_number();
}
inline void ROOM_PASS_THROUGH_REQ::_internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  var_room_number_ = value;
}
inline void ROOM_PASS_THROUGH_REQ::set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_number(value);
  // @@protoc_insertion_point(field_set:ROOM_PASS_THROUGH_REQ.var_room_number)
}

// required string var_time = 5;
inline bool ROOM_PASS_THROUGH_REQ::_internal_has_var_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ROOM_PASS_THROUGH_REQ::has_var_time() const {
  return _internal_has_var_time();
}
inline void ROOM_PASS_THROUGH_REQ::clear_var_time() {
  var_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ROOM_PASS_THROUGH_REQ::var_time() const {
  // @@protoc_insertion_point(field_get:ROOM_PASS_THROUGH_REQ.var_time)
  return _internal_var_time();
}
inline void ROOM_PASS_THROUGH_REQ::set_var_time(const std::string& value) {
  _internal_set_var_time(value);
  // @@protoc_insertion_point(field_set:ROOM_PASS_THROUGH_REQ.var_time)
}
inline std::string* ROOM_PASS_THROUGH_REQ::mutable_var_time() {
  // @@protoc_insertion_point(field_mutable:ROOM_PASS_THROUGH_REQ.var_time)
  return _internal_mutable_var_time();
}
inline const std::string& ROOM_PASS_THROUGH_REQ::_internal_var_time() const {
  return var_time_.GetNoArena();
}
inline void ROOM_PASS_THROUGH_REQ::_internal_set_var_time(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  var_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ROOM_PASS_THROUGH_REQ::set_var_time(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  var_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ROOM_PASS_THROUGH_REQ.var_time)
}
inline void ROOM_PASS_THROUGH_REQ::set_var_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  var_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ROOM_PASS_THROUGH_REQ.var_time)
}
inline void ROOM_PASS_THROUGH_REQ::set_var_time(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  var_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ROOM_PASS_THROUGH_REQ.var_time)
}
inline std::string* ROOM_PASS_THROUGH_REQ::_internal_mutable_var_time() {
  _has_bits_[0] |= 0x00000002u;
  return var_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ROOM_PASS_THROUGH_REQ::release_var_time() {
  // @@protoc_insertion_point(field_release:ROOM_PASS_THROUGH_REQ.var_time)
  if (!_internal_has_var_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return var_time_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ROOM_PASS_THROUGH_REQ::set_allocated_var_time(std::string* var_time) {
  if (var_time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  var_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_time);
  // @@protoc_insertion_point(field_set_allocated:ROOM_PASS_THROUGH_REQ.var_time)
}

// -------------------------------------------------------------------

// NOTICE_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_NOTICE_REQ];
inline bool NOTICE_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NOTICE_REQ::has_id() const {
  return _internal_has_id();
}
inline void NOTICE_REQ::clear_id() {
  id_ = 19;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL NOTICE_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL NOTICE_REQ::id() const {
  // @@protoc_insertion_point(field_get:NOTICE_REQ.id)
  return _internal_id();
}
inline void NOTICE_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void NOTICE_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NOTICE_REQ.id)
}

// -------------------------------------------------------------------

// BITMAP_MESSAGE_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_BITMAP_MESSAGE_REQ];
inline bool BITMAP_MESSAGE_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BITMAP_MESSAGE_REQ::has_id() const {
  return _internal_has_id();
}
inline void BITMAP_MESSAGE_REQ::clear_id() {
  id_ = 10;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOCOL BITMAP_MESSAGE_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL BITMAP_MESSAGE_REQ::id() const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_REQ.id)
  return _internal_id();
}
inline void BITMAP_MESSAGE_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void BITMAP_MESSAGE_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_REQ.id)
}

// repeated bytes var_message = 2;
inline int BITMAP_MESSAGE_REQ::_internal_var_message_size() const {
  return var_message_.size();
}
inline int BITMAP_MESSAGE_REQ::var_message_size() const {
  return _internal_var_message_size();
}
inline void BITMAP_MESSAGE_REQ::clear_var_message() {
  var_message_.Clear();
}
inline std::string* BITMAP_MESSAGE_REQ::add_var_message() {
  // @@protoc_insertion_point(field_add_mutable:BITMAP_MESSAGE_REQ.var_message)
  return _internal_add_var_message();
}
inline const std::string& BITMAP_MESSAGE_REQ::_internal_var_message(int index) const {
  return var_message_.Get(index);
}
inline const std::string& BITMAP_MESSAGE_REQ::var_message(int index) const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_REQ.var_message)
  return _internal_var_message(index);
}
inline std::string* BITMAP_MESSAGE_REQ::mutable_var_message(int index) {
  // @@protoc_insertion_point(field_mutable:BITMAP_MESSAGE_REQ.var_message)
  return var_message_.Mutable(index);
}
inline void BITMAP_MESSAGE_REQ::set_var_message(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_REQ.var_message)
  var_message_.Mutable(index)->assign(value);
}
inline void BITMAP_MESSAGE_REQ::set_var_message(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_REQ.var_message)
  var_message_.Mutable(index)->assign(std::move(value));
}
inline void BITMAP_MESSAGE_REQ::set_var_message(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BITMAP_MESSAGE_REQ.var_message)
}
inline void BITMAP_MESSAGE_REQ::set_var_message(int index, const void* value, size_t size) {
  var_message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BITMAP_MESSAGE_REQ.var_message)
}
inline std::string* BITMAP_MESSAGE_REQ::_internal_add_var_message() {
  return var_message_.Add();
}
inline void BITMAP_MESSAGE_REQ::add_var_message(const std::string& value) {
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BITMAP_MESSAGE_REQ.var_message)
}
inline void BITMAP_MESSAGE_REQ::add_var_message(std::string&& value) {
  var_message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BITMAP_MESSAGE_REQ.var_message)
}
inline void BITMAP_MESSAGE_REQ::add_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BITMAP_MESSAGE_REQ.var_message)
}
inline void BITMAP_MESSAGE_REQ::add_var_message(const void* value, size_t size) {
  var_message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BITMAP_MESSAGE_REQ.var_message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BITMAP_MESSAGE_REQ::var_message() const {
  // @@protoc_insertion_point(field_list:BITMAP_MESSAGE_REQ.var_message)
  return var_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BITMAP_MESSAGE_REQ::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable_list:BITMAP_MESSAGE_REQ.var_message)
  return &var_message_;
}

// required int32 var_room_number = 3;
inline bool BITMAP_MESSAGE_REQ::_internal_has_var_room_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BITMAP_MESSAGE_REQ::has_var_room_number() const {
  return _internal_has_var_room_number();
}
inline void BITMAP_MESSAGE_REQ::clear_var_room_number() {
  var_room_number_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BITMAP_MESSAGE_REQ::_internal_var_room_number() const {
  return var_room_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BITMAP_MESSAGE_REQ::var_room_number() const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_REQ.var_room_number)
  return _internal_var_room_number();
}
inline void BITMAP_MESSAGE_REQ::_internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  var_room_number_ = value;
}
inline void BITMAP_MESSAGE_REQ::set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_number(value);
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_REQ.var_room_number)
}

// required int32 var_type = 4;
inline bool BITMAP_MESSAGE_REQ::_internal_has_var_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BITMAP_MESSAGE_REQ::has_var_type() const {
  return _internal_has_var_type();
}
inline void BITMAP_MESSAGE_REQ::clear_var_type() {
  var_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BITMAP_MESSAGE_REQ::_internal_var_type() const {
  return var_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BITMAP_MESSAGE_REQ::var_type() const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_REQ.var_type)
  return _internal_var_type();
}
inline void BITMAP_MESSAGE_REQ::_internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  var_type_ = value;
}
inline void BITMAP_MESSAGE_REQ::set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_type(value);
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_REQ.var_type)
}

// repeated int64 var_to_player_id = 5;
inline int BITMAP_MESSAGE_REQ::_internal_var_to_player_id_size() const {
  return var_to_player_id_.size();
}
inline int BITMAP_MESSAGE_REQ::var_to_player_id_size() const {
  return _internal_var_to_player_id_size();
}
inline void BITMAP_MESSAGE_REQ::clear_var_to_player_id() {
  var_to_player_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BITMAP_MESSAGE_REQ::_internal_var_to_player_id(int index) const {
  return var_to_player_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BITMAP_MESSAGE_REQ::var_to_player_id(int index) const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_REQ.var_to_player_id)
  return _internal_var_to_player_id(index);
}
inline void BITMAP_MESSAGE_REQ::set_var_to_player_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  var_to_player_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_REQ.var_to_player_id)
}
inline void BITMAP_MESSAGE_REQ::_internal_add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  var_to_player_id_.Add(value);
}
inline void BITMAP_MESSAGE_REQ::add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_var_to_player_id(value);
  // @@protoc_insertion_point(field_add:BITMAP_MESSAGE_REQ.var_to_player_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BITMAP_MESSAGE_REQ::_internal_var_to_player_id() const {
  return var_to_player_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BITMAP_MESSAGE_REQ::var_to_player_id() const {
  // @@protoc_insertion_point(field_list:BITMAP_MESSAGE_REQ.var_to_player_id)
  return _internal_var_to_player_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BITMAP_MESSAGE_REQ::_internal_mutable_var_to_player_id() {
  return &var_to_player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BITMAP_MESSAGE_REQ::mutable_var_to_player_id() {
  // @@protoc_insertion_point(field_mutable_list:BITMAP_MESSAGE_REQ.var_to_player_id)
  return _internal_mutable_var_to_player_id();
}

// required int32 var_width = 6;
inline bool BITMAP_MESSAGE_REQ::_internal_has_var_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BITMAP_MESSAGE_REQ::has_var_width() const {
  return _internal_has_var_width();
}
inline void BITMAP_MESSAGE_REQ::clear_var_width() {
  var_width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BITMAP_MESSAGE_REQ::_internal_var_width() const {
  return var_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BITMAP_MESSAGE_REQ::var_width() const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_REQ.var_width)
  return _internal_var_width();
}
inline void BITMAP_MESSAGE_REQ::_internal_set_var_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  var_width_ = value;
}
inline void BITMAP_MESSAGE_REQ::set_var_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_width(value);
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_REQ.var_width)
}

// required int32 var_height = 7;
inline bool BITMAP_MESSAGE_REQ::_internal_has_var_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BITMAP_MESSAGE_REQ::has_var_height() const {
  return _internal_has_var_height();
}
inline void BITMAP_MESSAGE_REQ::clear_var_height() {
  var_height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BITMAP_MESSAGE_REQ::_internal_var_height() const {
  return var_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BITMAP_MESSAGE_REQ::var_height() const {
  // @@protoc_insertion_point(field_get:BITMAP_MESSAGE_REQ.var_height)
  return _internal_var_height();
}
inline void BITMAP_MESSAGE_REQ::_internal_set_var_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  var_height_ = value;
}
inline void BITMAP_MESSAGE_REQ::set_var_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_height(value);
  // @@protoc_insertion_point(field_set:BITMAP_MESSAGE_REQ.var_height)
}

// -------------------------------------------------------------------

// AUDIO_MESSAGE_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_AUDIO_MESSAGE_REQ];
inline bool AUDIO_MESSAGE_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AUDIO_MESSAGE_REQ::has_id() const {
  return _internal_has_id();
}
inline void AUDIO_MESSAGE_REQ::clear_id() {
  id_ = 21;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL AUDIO_MESSAGE_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL AUDIO_MESSAGE_REQ::id() const {
  // @@protoc_insertion_point(field_get:AUDIO_MESSAGE_REQ.id)
  return _internal_id();
}
inline void AUDIO_MESSAGE_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void AUDIO_MESSAGE_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_REQ.id)
}

// repeated bytes var_message = 2;
inline int AUDIO_MESSAGE_REQ::_internal_var_message_size() const {
  return var_message_.size();
}
inline int AUDIO_MESSAGE_REQ::var_message_size() const {
  return _internal_var_message_size();
}
inline void AUDIO_MESSAGE_REQ::clear_var_message() {
  var_message_.Clear();
}
inline std::string* AUDIO_MESSAGE_REQ::add_var_message() {
  // @@protoc_insertion_point(field_add_mutable:AUDIO_MESSAGE_REQ.var_message)
  return _internal_add_var_message();
}
inline const std::string& AUDIO_MESSAGE_REQ::_internal_var_message(int index) const {
  return var_message_.Get(index);
}
inline const std::string& AUDIO_MESSAGE_REQ::var_message(int index) const {
  // @@protoc_insertion_point(field_get:AUDIO_MESSAGE_REQ.var_message)
  return _internal_var_message(index);
}
inline std::string* AUDIO_MESSAGE_REQ::mutable_var_message(int index) {
  // @@protoc_insertion_point(field_mutable:AUDIO_MESSAGE_REQ.var_message)
  return var_message_.Mutable(index);
}
inline void AUDIO_MESSAGE_REQ::set_var_message(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_REQ.var_message)
  var_message_.Mutable(index)->assign(value);
}
inline void AUDIO_MESSAGE_REQ::set_var_message(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_REQ.var_message)
  var_message_.Mutable(index)->assign(std::move(value));
}
inline void AUDIO_MESSAGE_REQ::set_var_message(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AUDIO_MESSAGE_REQ.var_message)
}
inline void AUDIO_MESSAGE_REQ::set_var_message(int index, const void* value, size_t size) {
  var_message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AUDIO_MESSAGE_REQ.var_message)
}
inline std::string* AUDIO_MESSAGE_REQ::_internal_add_var_message() {
  return var_message_.Add();
}
inline void AUDIO_MESSAGE_REQ::add_var_message(const std::string& value) {
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AUDIO_MESSAGE_REQ.var_message)
}
inline void AUDIO_MESSAGE_REQ::add_var_message(std::string&& value) {
  var_message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AUDIO_MESSAGE_REQ.var_message)
}
inline void AUDIO_MESSAGE_REQ::add_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AUDIO_MESSAGE_REQ.var_message)
}
inline void AUDIO_MESSAGE_REQ::add_var_message(const void* value, size_t size) {
  var_message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AUDIO_MESSAGE_REQ.var_message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AUDIO_MESSAGE_REQ::var_message() const {
  // @@protoc_insertion_point(field_list:AUDIO_MESSAGE_REQ.var_message)
  return var_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AUDIO_MESSAGE_REQ::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable_list:AUDIO_MESSAGE_REQ.var_message)
  return &var_message_;
}

// required int32 var_room_number = 3;
inline bool AUDIO_MESSAGE_REQ::_internal_has_var_room_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AUDIO_MESSAGE_REQ::has_var_room_number() const {
  return _internal_has_var_room_number();
}
inline void AUDIO_MESSAGE_REQ::clear_var_room_number() {
  var_room_number_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AUDIO_MESSAGE_REQ::_internal_var_room_number() const {
  return var_room_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AUDIO_MESSAGE_REQ::var_room_number() const {
  // @@protoc_insertion_point(field_get:AUDIO_MESSAGE_REQ.var_room_number)
  return _internal_var_room_number();
}
inline void AUDIO_MESSAGE_REQ::_internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  var_room_number_ = value;
}
inline void AUDIO_MESSAGE_REQ::set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_number(value);
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_REQ.var_room_number)
}

// repeated int64 var_to_player_id = 4;
inline int AUDIO_MESSAGE_REQ::_internal_var_to_player_id_size() const {
  return var_to_player_id_.size();
}
inline int AUDIO_MESSAGE_REQ::var_to_player_id_size() const {
  return _internal_var_to_player_id_size();
}
inline void AUDIO_MESSAGE_REQ::clear_var_to_player_id() {
  var_to_player_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AUDIO_MESSAGE_REQ::_internal_var_to_player_id(int index) const {
  return var_to_player_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AUDIO_MESSAGE_REQ::var_to_player_id(int index) const {
  // @@protoc_insertion_point(field_get:AUDIO_MESSAGE_REQ.var_to_player_id)
  return _internal_var_to_player_id(index);
}
inline void AUDIO_MESSAGE_REQ::set_var_to_player_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  var_to_player_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:AUDIO_MESSAGE_REQ.var_to_player_id)
}
inline void AUDIO_MESSAGE_REQ::_internal_add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  var_to_player_id_.Add(value);
}
inline void AUDIO_MESSAGE_REQ::add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_var_to_player_id(value);
  // @@protoc_insertion_point(field_add:AUDIO_MESSAGE_REQ.var_to_player_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AUDIO_MESSAGE_REQ::_internal_var_to_player_id() const {
  return var_to_player_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AUDIO_MESSAGE_REQ::var_to_player_id() const {
  // @@protoc_insertion_point(field_list:AUDIO_MESSAGE_REQ.var_to_player_id)
  return _internal_var_to_player_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AUDIO_MESSAGE_REQ::_internal_mutable_var_to_player_id() {
  return &var_to_player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AUDIO_MESSAGE_REQ::mutable_var_to_player_id() {
  // @@protoc_insertion_point(field_mutable_list:AUDIO_MESSAGE_REQ.var_to_player_id)
  return _internal_mutable_var_to_player_id();
}

// -------------------------------------------------------------------

// STOP_STREAM_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_STOP_STREAM_REQ];
inline bool STOP_STREAM_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool STOP_STREAM_REQ::has_id() const {
  return _internal_has_id();
}
inline void STOP_STREAM_REQ::clear_id() {
  id_ = 48;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL STOP_STREAM_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL STOP_STREAM_REQ::id() const {
  // @@protoc_insertion_point(field_get:STOP_STREAM_REQ.id)
  return _internal_id();
}
inline void STOP_STREAM_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void STOP_STREAM_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:STOP_STREAM_REQ.id)
}

// required int64 var_to_player_id = 2;
inline bool STOP_STREAM_REQ::_internal_has_var_to_player_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool STOP_STREAM_REQ::has_var_to_player_id() const {
  return _internal_has_var_to_player_id();
}
inline void STOP_STREAM_REQ::clear_var_to_player_id() {
  var_to_player_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 STOP_STREAM_REQ::_internal_var_to_player_id() const {
  return var_to_player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 STOP_STREAM_REQ::var_to_player_id() const {
  // @@protoc_insertion_point(field_get:STOP_STREAM_REQ.var_to_player_id)
  return _internal_var_to_player_id();
}
inline void STOP_STREAM_REQ::_internal_set_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  var_to_player_id_ = value;
}
inline void STOP_STREAM_REQ::set_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_var_to_player_id(value);
  // @@protoc_insertion_point(field_set:STOP_STREAM_REQ.var_to_player_id)
}

// -------------------------------------------------------------------

// CAMERA_WAKE_UP_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_WAKE_UP_REQ];
inline bool CAMERA_WAKE_UP_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CAMERA_WAKE_UP_REQ::has_id() const {
  return _internal_has_id();
}
inline void CAMERA_WAKE_UP_REQ::clear_id() {
  id_ = 46;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOCOL CAMERA_WAKE_UP_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL CAMERA_WAKE_UP_REQ::id() const {
  // @@protoc_insertion_point(field_get:CAMERA_WAKE_UP_REQ.id)
  return _internal_id();
}
inline void CAMERA_WAKE_UP_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void CAMERA_WAKE_UP_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CAMERA_WAKE_UP_REQ.id)
}

// required int32 var_type = 2;
inline bool CAMERA_WAKE_UP_REQ::_internal_has_var_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAMERA_WAKE_UP_REQ::has_var_type() const {
  return _internal_has_var_type();
}
inline void CAMERA_WAKE_UP_REQ::clear_var_type() {
  var_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CAMERA_WAKE_UP_REQ::_internal_var_type() const {
  return var_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CAMERA_WAKE_UP_REQ::var_type() const {
  // @@protoc_insertion_point(field_get:CAMERA_WAKE_UP_REQ.var_type)
  return _internal_var_type();
}
inline void CAMERA_WAKE_UP_REQ::_internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  var_type_ = value;
}
inline void CAMERA_WAKE_UP_REQ::set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_type(value);
  // @@protoc_insertion_point(field_set:CAMERA_WAKE_UP_REQ.var_type)
}

// required int32 var_room_number = 3;
inline bool CAMERA_WAKE_UP_REQ::_internal_has_var_room_number() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAMERA_WAKE_UP_REQ::has_var_room_number() const {
  return _internal_has_var_room_number();
}
inline void CAMERA_WAKE_UP_REQ::clear_var_room_number() {
  var_room_number_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CAMERA_WAKE_UP_REQ::_internal_var_room_number() const {
  return var_room_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CAMERA_WAKE_UP_REQ::var_room_number() const {
  // @@protoc_insertion_point(field_get:CAMERA_WAKE_UP_REQ.var_room_number)
  return _internal_var_room_number();
}
inline void CAMERA_WAKE_UP_REQ::_internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  var_room_number_ = value;
}
inline void CAMERA_WAKE_UP_REQ::set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_number(value);
  // @@protoc_insertion_point(field_set:CAMERA_WAKE_UP_REQ.var_room_number)
}

// required int64 var_to_player_id = 4;
inline bool CAMERA_WAKE_UP_REQ::_internal_has_var_to_player_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAMERA_WAKE_UP_REQ::has_var_to_player_id() const {
  return _internal_has_var_to_player_id();
}
inline void CAMERA_WAKE_UP_REQ::clear_var_to_player_id() {
  var_to_player_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CAMERA_WAKE_UP_REQ::_internal_var_to_player_id() const {
  return var_to_player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CAMERA_WAKE_UP_REQ::var_to_player_id() const {
  // @@protoc_insertion_point(field_get:CAMERA_WAKE_UP_REQ.var_to_player_id)
  return _internal_var_to_player_id();
}
inline void CAMERA_WAKE_UP_REQ::_internal_set_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  var_to_player_id_ = value;
}
inline void CAMERA_WAKE_UP_REQ::set_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_var_to_player_id(value);
  // @@protoc_insertion_point(field_set:CAMERA_WAKE_UP_REQ.var_to_player_id)
}

// required string var_machine_id = 5;
inline bool CAMERA_WAKE_UP_REQ::_internal_has_var_machine_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAMERA_WAKE_UP_REQ::has_var_machine_id() const {
  return _internal_has_var_machine_id();
}
inline void CAMERA_WAKE_UP_REQ::clear_var_machine_id() {
  var_machine_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAMERA_WAKE_UP_REQ::var_machine_id() const {
  // @@protoc_insertion_point(field_get:CAMERA_WAKE_UP_REQ.var_machine_id)
  return _internal_var_machine_id();
}
inline void CAMERA_WAKE_UP_REQ::set_var_machine_id(const std::string& value) {
  _internal_set_var_machine_id(value);
  // @@protoc_insertion_point(field_set:CAMERA_WAKE_UP_REQ.var_machine_id)
}
inline std::string* CAMERA_WAKE_UP_REQ::mutable_var_machine_id() {
  // @@protoc_insertion_point(field_mutable:CAMERA_WAKE_UP_REQ.var_machine_id)
  return _internal_mutable_var_machine_id();
}
inline const std::string& CAMERA_WAKE_UP_REQ::_internal_var_machine_id() const {
  return var_machine_id_.GetNoArena();
}
inline void CAMERA_WAKE_UP_REQ::_internal_set_var_machine_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CAMERA_WAKE_UP_REQ::set_var_machine_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CAMERA_WAKE_UP_REQ.var_machine_id)
}
inline void CAMERA_WAKE_UP_REQ::set_var_machine_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CAMERA_WAKE_UP_REQ.var_machine_id)
}
inline void CAMERA_WAKE_UP_REQ::set_var_machine_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CAMERA_WAKE_UP_REQ.var_machine_id)
}
inline std::string* CAMERA_WAKE_UP_REQ::_internal_mutable_var_machine_id() {
  _has_bits_[0] |= 0x00000001u;
  return var_machine_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CAMERA_WAKE_UP_REQ::release_var_machine_id() {
  // @@protoc_insertion_point(field_release:CAMERA_WAKE_UP_REQ.var_machine_id)
  if (!_internal_has_var_machine_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_machine_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CAMERA_WAKE_UP_REQ::set_allocated_var_machine_id(std::string* var_machine_id) {
  if (var_machine_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_machine_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_machine_id);
  // @@protoc_insertion_point(field_set_allocated:CAMERA_WAKE_UP_REQ.var_machine_id)
}

// -------------------------------------------------------------------

// PRAY_MESSAGE_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REQ];
inline bool PRAY_MESSAGE_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PRAY_MESSAGE_REQ::has_id() const {
  return _internal_has_id();
}
inline void PRAY_MESSAGE_REQ::clear_id() {
  id_ = 23;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL PRAY_MESSAGE_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL PRAY_MESSAGE_REQ::id() const {
  // @@protoc_insertion_point(field_get:PRAY_MESSAGE_REQ.id)
  return _internal_id();
}
inline void PRAY_MESSAGE_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void PRAY_MESSAGE_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PRAY_MESSAGE_REQ.id)
}

// -------------------------------------------------------------------

// PRAY_MESSAGE_REG_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_PRAY_MESSAGE_REG_REQ];
inline bool PRAY_MESSAGE_REG_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PRAY_MESSAGE_REG_REQ::has_id() const {
  return _internal_has_id();
}
inline void PRAY_MESSAGE_REG_REQ::clear_id() {
  id_ = 25;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL PRAY_MESSAGE_REG_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL PRAY_MESSAGE_REG_REQ::id() const {
  // @@protoc_insertion_point(field_get:PRAY_MESSAGE_REG_REQ.id)
  return _internal_id();
}
inline void PRAY_MESSAGE_REG_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void PRAY_MESSAGE_REG_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:PRAY_MESSAGE_REG_REQ.id)
}

// optional string var_message = 2;
inline bool PRAY_MESSAGE_REG_REQ::_internal_has_var_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PRAY_MESSAGE_REG_REQ::has_var_message() const {
  return _internal_has_var_message();
}
inline void PRAY_MESSAGE_REG_REQ::clear_var_message() {
  var_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PRAY_MESSAGE_REG_REQ::var_message() const {
  // @@protoc_insertion_point(field_get:PRAY_MESSAGE_REG_REQ.var_message)
  return _internal_var_message();
}
inline void PRAY_MESSAGE_REG_REQ::set_var_message(const std::string& value) {
  _internal_set_var_message(value);
  // @@protoc_insertion_point(field_set:PRAY_MESSAGE_REG_REQ.var_message)
}
inline std::string* PRAY_MESSAGE_REG_REQ::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable:PRAY_MESSAGE_REG_REQ.var_message)
  return _internal_mutable_var_message();
}
inline const std::string& PRAY_MESSAGE_REG_REQ::_internal_var_message() const {
  return var_message_.GetNoArena();
}
inline void PRAY_MESSAGE_REG_REQ::_internal_set_var_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PRAY_MESSAGE_REG_REQ::set_var_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PRAY_MESSAGE_REG_REQ.var_message)
}
inline void PRAY_MESSAGE_REG_REQ::set_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PRAY_MESSAGE_REG_REQ.var_message)
}
inline void PRAY_MESSAGE_REG_REQ::set_var_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PRAY_MESSAGE_REG_REQ.var_message)
}
inline std::string* PRAY_MESSAGE_REG_REQ::_internal_mutable_var_message() {
  _has_bits_[0] |= 0x00000001u;
  return var_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PRAY_MESSAGE_REG_REQ::release_var_message() {
  // @@protoc_insertion_point(field_release:PRAY_MESSAGE_REG_REQ.var_message)
  if (!_internal_has_var_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PRAY_MESSAGE_REG_REQ::set_allocated_var_message(std::string* var_message) {
  if (var_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_message);
  // @@protoc_insertion_point(field_set_allocated:PRAY_MESSAGE_REG_REQ.var_message)
}

// -------------------------------------------------------------------

// QNA_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_QNA_REQ];
inline bool QNA_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool QNA_REQ::has_id() const {
  return _internal_has_id();
}
inline void QNA_REQ::clear_id() {
  id_ = 27;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL QNA_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL QNA_REQ::id() const {
  // @@protoc_insertion_point(field_get:QNA_REQ.id)
  return _internal_id();
}
inline void QNA_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void QNA_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:QNA_REQ.id)
}

// optional string var_message = 2;
inline bool QNA_REQ::_internal_has_var_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool QNA_REQ::has_var_message() const {
  return _internal_has_var_message();
}
inline void QNA_REQ::clear_var_message() {
  var_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QNA_REQ::var_message() const {
  // @@protoc_insertion_point(field_get:QNA_REQ.var_message)
  return _internal_var_message();
}
inline void QNA_REQ::set_var_message(const std::string& value) {
  _internal_set_var_message(value);
  // @@protoc_insertion_point(field_set:QNA_REQ.var_message)
}
inline std::string* QNA_REQ::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable:QNA_REQ.var_message)
  return _internal_mutable_var_message();
}
inline const std::string& QNA_REQ::_internal_var_message() const {
  return var_message_.GetNoArena();
}
inline void QNA_REQ::_internal_set_var_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QNA_REQ::set_var_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:QNA_REQ.var_message)
}
inline void QNA_REQ::set_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:QNA_REQ.var_message)
}
inline void QNA_REQ::set_var_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:QNA_REQ.var_message)
}
inline std::string* QNA_REQ::_internal_mutable_var_message() {
  _has_bits_[0] |= 0x00000001u;
  return var_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QNA_REQ::release_var_message() {
  // @@protoc_insertion_point(field_release:QNA_REQ.var_message)
  if (!_internal_has_var_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QNA_REQ::set_allocated_var_message(std::string* var_message) {
  if (var_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_message);
  // @@protoc_insertion_point(field_set_allocated:QNA_REQ.var_message)
}

// -------------------------------------------------------------------

// MAIL_LIST_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_MAIL_LIST_REQ];
inline bool MAIL_LIST_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MAIL_LIST_REQ::has_id() const {
  return _internal_has_id();
}
inline void MAIL_LIST_REQ::clear_id() {
  id_ = 29;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL MAIL_LIST_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL MAIL_LIST_REQ::id() const {
  // @@protoc_insertion_point(field_get:MAIL_LIST_REQ.id)
  return _internal_id();
}
inline void MAIL_LIST_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void MAIL_LIST_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MAIL_LIST_REQ.id)
}

// -------------------------------------------------------------------

// REG_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_REG_REQ];
inline bool REG_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool REG_REQ::has_id() const {
  return _internal_has_id();
}
inline void REG_REQ::clear_id() {
  id_ = 37;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL REG_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL REG_REQ::id() const {
  // @@protoc_insertion_point(field_get:REG_REQ.id)
  return _internal_id();
}
inline void REG_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void REG_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:REG_REQ.id)
}

// required int32 var_id = 2;
inline bool REG_REQ::_internal_has_var_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool REG_REQ::has_var_id() const {
  return _internal_has_var_id();
}
inline void REG_REQ::clear_var_id() {
  var_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 REG_REQ::_internal_var_id() const {
  return var_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 REG_REQ::var_id() const {
  // @@protoc_insertion_point(field_get:REG_REQ.var_id)
  return _internal_var_id();
}
inline void REG_REQ::_internal_set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  var_id_ = value;
}
inline void REG_REQ::set_var_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_id(value);
  // @@protoc_insertion_point(field_set:REG_REQ.var_id)
}

// -------------------------------------------------------------------

// CLIENT_LOGOUT_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_CLIENT_LOGOUT_REQ];
inline bool CLIENT_LOGOUT_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLIENT_LOGOUT_REQ::has_id() const {
  return _internal_has_id();
}
inline void CLIENT_LOGOUT_REQ::clear_id() {
  id_ = 39;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL CLIENT_LOGOUT_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL CLIENT_LOGOUT_REQ::id() const {
  // @@protoc_insertion_point(field_get:CLIENT_LOGOUT_REQ.id)
  return _internal_id();
}
inline void CLIENT_LOGOUT_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CLIENT_LOGOUT_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CLIENT_LOGOUT_REQ.id)
}

// -------------------------------------------------------------------

// CAMERA_CONTROL_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_CONTROL_REQ];
inline bool CAMERA_CONTROL_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CAMERA_CONTROL_REQ::has_id() const {
  return _internal_has_id();
}
inline void CAMERA_CONTROL_REQ::clear_id() {
  id_ = 42;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOCOL CAMERA_CONTROL_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL CAMERA_CONTROL_REQ::id() const {
  // @@protoc_insertion_point(field_get:CAMERA_CONTROL_REQ.id)
  return _internal_id();
}
inline void CAMERA_CONTROL_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void CAMERA_CONTROL_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CAMERA_CONTROL_REQ.id)
}

// required .CameraControlType var_type = 2;
inline bool CAMERA_CONTROL_REQ::_internal_has_var_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CAMERA_CONTROL_REQ::has_var_type() const {
  return _internal_has_var_type();
}
inline void CAMERA_CONTROL_REQ::clear_var_type() {
  var_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::CameraControlType CAMERA_CONTROL_REQ::_internal_var_type() const {
  return static_cast< ::CameraControlType >(var_type_);
}
inline ::CameraControlType CAMERA_CONTROL_REQ::var_type() const {
  // @@protoc_insertion_point(field_get:CAMERA_CONTROL_REQ.var_type)
  return _internal_var_type();
}
inline void CAMERA_CONTROL_REQ::_internal_set_var_type(::CameraControlType value) {
  assert(::CameraControlType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  var_type_ = value;
}
inline void CAMERA_CONTROL_REQ::set_var_type(::CameraControlType value) {
  _internal_set_var_type(value);
  // @@protoc_insertion_point(field_set:CAMERA_CONTROL_REQ.var_type)
}

// required string var_machine_id = 3;
inline bool CAMERA_CONTROL_REQ::_internal_has_var_machine_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAMERA_CONTROL_REQ::has_var_machine_id() const {
  return _internal_has_var_machine_id();
}
inline void CAMERA_CONTROL_REQ::clear_var_machine_id() {
  var_machine_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CAMERA_CONTROL_REQ::var_machine_id() const {
  // @@protoc_insertion_point(field_get:CAMERA_CONTROL_REQ.var_machine_id)
  return _internal_var_machine_id();
}
inline void CAMERA_CONTROL_REQ::set_var_machine_id(const std::string& value) {
  _internal_set_var_machine_id(value);
  // @@protoc_insertion_point(field_set:CAMERA_CONTROL_REQ.var_machine_id)
}
inline std::string* CAMERA_CONTROL_REQ::mutable_var_machine_id() {
  // @@protoc_insertion_point(field_mutable:CAMERA_CONTROL_REQ.var_machine_id)
  return _internal_mutable_var_machine_id();
}
inline const std::string& CAMERA_CONTROL_REQ::_internal_var_machine_id() const {
  return var_machine_id_.GetNoArena();
}
inline void CAMERA_CONTROL_REQ::_internal_set_var_machine_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CAMERA_CONTROL_REQ::set_var_machine_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CAMERA_CONTROL_REQ.var_machine_id)
}
inline void CAMERA_CONTROL_REQ::set_var_machine_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CAMERA_CONTROL_REQ.var_machine_id)
}
inline void CAMERA_CONTROL_REQ::set_var_machine_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CAMERA_CONTROL_REQ.var_machine_id)
}
inline std::string* CAMERA_CONTROL_REQ::_internal_mutable_var_machine_id() {
  _has_bits_[0] |= 0x00000001u;
  return var_machine_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CAMERA_CONTROL_REQ::release_var_machine_id() {
  // @@protoc_insertion_point(field_release:CAMERA_CONTROL_REQ.var_machine_id)
  if (!_internal_has_var_machine_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_machine_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CAMERA_CONTROL_REQ::set_allocated_var_machine_id(std::string* var_machine_id) {
  if (var_machine_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_machine_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_machine_id);
  // @@protoc_insertion_point(field_set_allocated:CAMERA_CONTROL_REQ.var_machine_id)
}

// required int64 var_player_id = 4;
inline bool CAMERA_CONTROL_REQ::_internal_has_var_player_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CAMERA_CONTROL_REQ::has_var_player_id() const {
  return _internal_has_var_player_id();
}
inline void CAMERA_CONTROL_REQ::clear_var_player_id() {
  var_player_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CAMERA_CONTROL_REQ::_internal_var_player_id() const {
  return var_player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CAMERA_CONTROL_REQ::var_player_id() const {
  // @@protoc_insertion_point(field_get:CAMERA_CONTROL_REQ.var_player_id)
  return _internal_var_player_id();
}
inline void CAMERA_CONTROL_REQ::_internal_set_var_player_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  var_player_id_ = value;
}
inline void CAMERA_CONTROL_REQ::set_var_player_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_var_player_id(value);
  // @@protoc_insertion_point(field_set:CAMERA_CONTROL_REQ.var_player_id)
}

// -------------------------------------------------------------------

// MPEG2TS_MESSAGE_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_MPEG2TS_MESSAGE_REQ];
inline bool MPEG2TS_MESSAGE_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MPEG2TS_MESSAGE_REQ::has_id() const {
  return _internal_has_id();
}
inline void MPEG2TS_MESSAGE_REQ::clear_id() {
  id_ = 44;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOCOL MPEG2TS_MESSAGE_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL MPEG2TS_MESSAGE_REQ::id() const {
  // @@protoc_insertion_point(field_get:MPEG2TS_MESSAGE_REQ.id)
  return _internal_id();
}
inline void MPEG2TS_MESSAGE_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void MPEG2TS_MESSAGE_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MPEG2TS_MESSAGE_REQ.id)
}

// repeated bytes var_message = 2;
inline int MPEG2TS_MESSAGE_REQ::_internal_var_message_size() const {
  return var_message_.size();
}
inline int MPEG2TS_MESSAGE_REQ::var_message_size() const {
  return _internal_var_message_size();
}
inline void MPEG2TS_MESSAGE_REQ::clear_var_message() {
  var_message_.Clear();
}
inline std::string* MPEG2TS_MESSAGE_REQ::add_var_message() {
  // @@protoc_insertion_point(field_add_mutable:MPEG2TS_MESSAGE_REQ.var_message)
  return _internal_add_var_message();
}
inline const std::string& MPEG2TS_MESSAGE_REQ::_internal_var_message(int index) const {
  return var_message_.Get(index);
}
inline const std::string& MPEG2TS_MESSAGE_REQ::var_message(int index) const {
  // @@protoc_insertion_point(field_get:MPEG2TS_MESSAGE_REQ.var_message)
  return _internal_var_message(index);
}
inline std::string* MPEG2TS_MESSAGE_REQ::mutable_var_message(int index) {
  // @@protoc_insertion_point(field_mutable:MPEG2TS_MESSAGE_REQ.var_message)
  return var_message_.Mutable(index);
}
inline void MPEG2TS_MESSAGE_REQ::set_var_message(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MPEG2TS_MESSAGE_REQ.var_message)
  var_message_.Mutable(index)->assign(value);
}
inline void MPEG2TS_MESSAGE_REQ::set_var_message(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MPEG2TS_MESSAGE_REQ.var_message)
  var_message_.Mutable(index)->assign(std::move(value));
}
inline void MPEG2TS_MESSAGE_REQ::set_var_message(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MPEG2TS_MESSAGE_REQ.var_message)
}
inline void MPEG2TS_MESSAGE_REQ::set_var_message(int index, const void* value, size_t size) {
  var_message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MPEG2TS_MESSAGE_REQ.var_message)
}
inline std::string* MPEG2TS_MESSAGE_REQ::_internal_add_var_message() {
  return var_message_.Add();
}
inline void MPEG2TS_MESSAGE_REQ::add_var_message(const std::string& value) {
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MPEG2TS_MESSAGE_REQ.var_message)
}
inline void MPEG2TS_MESSAGE_REQ::add_var_message(std::string&& value) {
  var_message_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MPEG2TS_MESSAGE_REQ.var_message)
}
inline void MPEG2TS_MESSAGE_REQ::add_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  var_message_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MPEG2TS_MESSAGE_REQ.var_message)
}
inline void MPEG2TS_MESSAGE_REQ::add_var_message(const void* value, size_t size) {
  var_message_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MPEG2TS_MESSAGE_REQ.var_message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MPEG2TS_MESSAGE_REQ::var_message() const {
  // @@protoc_insertion_point(field_list:MPEG2TS_MESSAGE_REQ.var_message)
  return var_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MPEG2TS_MESSAGE_REQ::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable_list:MPEG2TS_MESSAGE_REQ.var_message)
  return &var_message_;
}

// required int32 var_room_number = 3;
inline bool MPEG2TS_MESSAGE_REQ::_internal_has_var_room_number() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MPEG2TS_MESSAGE_REQ::has_var_room_number() const {
  return _internal_has_var_room_number();
}
inline void MPEG2TS_MESSAGE_REQ::clear_var_room_number() {
  var_room_number_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPEG2TS_MESSAGE_REQ::_internal_var_room_number() const {
  return var_room_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPEG2TS_MESSAGE_REQ::var_room_number() const {
  // @@protoc_insertion_point(field_get:MPEG2TS_MESSAGE_REQ.var_room_number)
  return _internal_var_room_number();
}
inline void MPEG2TS_MESSAGE_REQ::_internal_set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  var_room_number_ = value;
}
inline void MPEG2TS_MESSAGE_REQ::set_var_room_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_number(value);
  // @@protoc_insertion_point(field_set:MPEG2TS_MESSAGE_REQ.var_room_number)
}

// required int32 var_type = 4;
inline bool MPEG2TS_MESSAGE_REQ::_internal_has_var_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MPEG2TS_MESSAGE_REQ::has_var_type() const {
  return _internal_has_var_type();
}
inline void MPEG2TS_MESSAGE_REQ::clear_var_type() {
  var_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPEG2TS_MESSAGE_REQ::_internal_var_type() const {
  return var_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MPEG2TS_MESSAGE_REQ::var_type() const {
  // @@protoc_insertion_point(field_get:MPEG2TS_MESSAGE_REQ.var_type)
  return _internal_var_type();
}
inline void MPEG2TS_MESSAGE_REQ::_internal_set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  var_type_ = value;
}
inline void MPEG2TS_MESSAGE_REQ::set_var_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_type(value);
  // @@protoc_insertion_point(field_set:MPEG2TS_MESSAGE_REQ.var_type)
}

// -------------------------------------------------------------------

// REG_CAMERA_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_REG_CAMERA_REQ];
inline bool REG_CAMERA_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool REG_CAMERA_REQ::has_id() const {
  return _internal_has_id();
}
inline void REG_CAMERA_REQ::clear_id() {
  id_ = 50;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOCOL REG_CAMERA_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL REG_CAMERA_REQ::id() const {
  // @@protoc_insertion_point(field_get:REG_CAMERA_REQ.id)
  return _internal_id();
}
inline void REG_CAMERA_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void REG_CAMERA_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:REG_CAMERA_REQ.id)
}

// required string var_cam_name = 2;
inline bool REG_CAMERA_REQ::_internal_has_var_cam_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool REG_CAMERA_REQ::has_var_cam_name() const {
  return _internal_has_var_cam_name();
}
inline void REG_CAMERA_REQ::clear_var_cam_name() {
  var_cam_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& REG_CAMERA_REQ::var_cam_name() const {
  // @@protoc_insertion_point(field_get:REG_CAMERA_REQ.var_cam_name)
  return _internal_var_cam_name();
}
inline void REG_CAMERA_REQ::set_var_cam_name(const std::string& value) {
  _internal_set_var_cam_name(value);
  // @@protoc_insertion_point(field_set:REG_CAMERA_REQ.var_cam_name)
}
inline std::string* REG_CAMERA_REQ::mutable_var_cam_name() {
  // @@protoc_insertion_point(field_mutable:REG_CAMERA_REQ.var_cam_name)
  return _internal_mutable_var_cam_name();
}
inline const std::string& REG_CAMERA_REQ::_internal_var_cam_name() const {
  return var_cam_name_.GetNoArena();
}
inline void REG_CAMERA_REQ::_internal_set_var_cam_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_cam_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void REG_CAMERA_REQ::set_var_cam_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_cam_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:REG_CAMERA_REQ.var_cam_name)
}
inline void REG_CAMERA_REQ::set_var_cam_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_cam_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:REG_CAMERA_REQ.var_cam_name)
}
inline void REG_CAMERA_REQ::set_var_cam_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_cam_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:REG_CAMERA_REQ.var_cam_name)
}
inline std::string* REG_CAMERA_REQ::_internal_mutable_var_cam_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_cam_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* REG_CAMERA_REQ::release_var_cam_name() {
  // @@protoc_insertion_point(field_release:REG_CAMERA_REQ.var_cam_name)
  if (!_internal_has_var_cam_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_cam_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void REG_CAMERA_REQ::set_allocated_var_cam_name(std::string* var_cam_name) {
  if (var_cam_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_cam_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_cam_name);
  // @@protoc_insertion_point(field_set_allocated:REG_CAMERA_REQ.var_cam_name)
}

// required string var_machine_id = 3;
inline bool REG_CAMERA_REQ::_internal_has_var_machine_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool REG_CAMERA_REQ::has_var_machine_id() const {
  return _internal_has_var_machine_id();
}
inline void REG_CAMERA_REQ::clear_var_machine_id() {
  var_machine_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& REG_CAMERA_REQ::var_machine_id() const {
  // @@protoc_insertion_point(field_get:REG_CAMERA_REQ.var_machine_id)
  return _internal_var_machine_id();
}
inline void REG_CAMERA_REQ::set_var_machine_id(const std::string& value) {
  _internal_set_var_machine_id(value);
  // @@protoc_insertion_point(field_set:REG_CAMERA_REQ.var_machine_id)
}
inline std::string* REG_CAMERA_REQ::mutable_var_machine_id() {
  // @@protoc_insertion_point(field_mutable:REG_CAMERA_REQ.var_machine_id)
  return _internal_mutable_var_machine_id();
}
inline const std::string& REG_CAMERA_REQ::_internal_var_machine_id() const {
  return var_machine_id_.GetNoArena();
}
inline void REG_CAMERA_REQ::_internal_set_var_machine_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void REG_CAMERA_REQ::set_var_machine_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  var_machine_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:REG_CAMERA_REQ.var_machine_id)
}
inline void REG_CAMERA_REQ::set_var_machine_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:REG_CAMERA_REQ.var_machine_id)
}
inline void REG_CAMERA_REQ::set_var_machine_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:REG_CAMERA_REQ.var_machine_id)
}
inline std::string* REG_CAMERA_REQ::_internal_mutable_var_machine_id() {
  _has_bits_[0] |= 0x00000002u;
  return var_machine_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* REG_CAMERA_REQ::release_var_machine_id() {
  // @@protoc_insertion_point(field_release:REG_CAMERA_REQ.var_machine_id)
  if (!_internal_has_var_machine_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return var_machine_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void REG_CAMERA_REQ::set_allocated_var_machine_id(std::string* var_machine_id) {
  if (var_machine_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  var_machine_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_machine_id);
  // @@protoc_insertion_point(field_set_allocated:REG_CAMERA_REQ.var_machine_id)
}

// -------------------------------------------------------------------

// CAMERA_LIST_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_CAMERA_LIST_REQ];
inline bool CAMERA_LIST_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CAMERA_LIST_REQ::has_id() const {
  return _internal_has_id();
}
inline void CAMERA_LIST_REQ::clear_id() {
  id_ = 52;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOCOL CAMERA_LIST_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL CAMERA_LIST_REQ::id() const {
  // @@protoc_insertion_point(field_get:CAMERA_LIST_REQ.id)
  return _internal_id();
}
inline void CAMERA_LIST_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void CAMERA_LIST_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CAMERA_LIST_REQ.id)
}

// -------------------------------------------------------------------

// MACHINE_STATUS_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_MACHINE_STATUS_REQ];
inline bool MACHINE_STATUS_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MACHINE_STATUS_REQ::has_id() const {
  return _internal_has_id();
}
inline void MACHINE_STATUS_REQ::clear_id() {
  id_ = 54;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL MACHINE_STATUS_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL MACHINE_STATUS_REQ::id() const {
  // @@protoc_insertion_point(field_get:MACHINE_STATUS_REQ.id)
  return _internal_id();
}
inline void MACHINE_STATUS_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void MACHINE_STATUS_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MACHINE_STATUS_REQ.id)
}

// repeated int64 var_to_player_id = 5;
inline int MACHINE_STATUS_REQ::_internal_var_to_player_id_size() const {
  return var_to_player_id_.size();
}
inline int MACHINE_STATUS_REQ::var_to_player_id_size() const {
  return _internal_var_to_player_id_size();
}
inline void MACHINE_STATUS_REQ::clear_var_to_player_id() {
  var_to_player_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MACHINE_STATUS_REQ::_internal_var_to_player_id(int index) const {
  return var_to_player_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MACHINE_STATUS_REQ::var_to_player_id(int index) const {
  // @@protoc_insertion_point(field_get:MACHINE_STATUS_REQ.var_to_player_id)
  return _internal_var_to_player_id(index);
}
inline void MACHINE_STATUS_REQ::set_var_to_player_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  var_to_player_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:MACHINE_STATUS_REQ.var_to_player_id)
}
inline void MACHINE_STATUS_REQ::_internal_add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  var_to_player_id_.Add(value);
}
inline void MACHINE_STATUS_REQ::add_var_to_player_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_var_to_player_id(value);
  // @@protoc_insertion_point(field_add:MACHINE_STATUS_REQ.var_to_player_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MACHINE_STATUS_REQ::_internal_var_to_player_id() const {
  return var_to_player_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MACHINE_STATUS_REQ::var_to_player_id() const {
  // @@protoc_insertion_point(field_list:MACHINE_STATUS_REQ.var_to_player_id)
  return _internal_var_to_player_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MACHINE_STATUS_REQ::_internal_mutable_var_to_player_id() {
  return &var_to_player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MACHINE_STATUS_REQ::mutable_var_to_player_id() {
  // @@protoc_insertion_point(field_mutable_list:MACHINE_STATUS_REQ.var_to_player_id)
  return _internal_mutable_var_to_player_id();
}

// required int32 var_battery = 4;
inline bool MACHINE_STATUS_REQ::_internal_has_var_battery() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MACHINE_STATUS_REQ::has_var_battery() const {
  return _internal_has_var_battery();
}
inline void MACHINE_STATUS_REQ::clear_var_battery() {
  var_battery_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MACHINE_STATUS_REQ::_internal_var_battery() const {
  return var_battery_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MACHINE_STATUS_REQ::var_battery() const {
  // @@protoc_insertion_point(field_get:MACHINE_STATUS_REQ.var_battery)
  return _internal_var_battery();
}
inline void MACHINE_STATUS_REQ::_internal_set_var_battery(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  var_battery_ = value;
}
inline void MACHINE_STATUS_REQ::set_var_battery(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_battery(value);
  // @@protoc_insertion_point(field_set:MACHINE_STATUS_REQ.var_battery)
}

// -------------------------------------------------------------------

// VERIFY_PURCHASE_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_VERIFY_PURCHASE_REQ];
inline bool VERIFY_PURCHASE_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VERIFY_PURCHASE_REQ::has_id() const {
  return _internal_has_id();
}
inline void VERIFY_PURCHASE_REQ::clear_id() {
  id_ = 56;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOCOL VERIFY_PURCHASE_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL VERIFY_PURCHASE_REQ::id() const {
  // @@protoc_insertion_point(field_get:VERIFY_PURCHASE_REQ.id)
  return _internal_id();
}
inline void VERIFY_PURCHASE_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void VERIFY_PURCHASE_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:VERIFY_PURCHASE_REQ.id)
}

// required string var_package_name = 2;
inline bool VERIFY_PURCHASE_REQ::_internal_has_var_package_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VERIFY_PURCHASE_REQ::has_var_package_name() const {
  return _internal_has_var_package_name();
}
inline void VERIFY_PURCHASE_REQ::clear_var_package_name() {
  var_package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VERIFY_PURCHASE_REQ::var_package_name() const {
  // @@protoc_insertion_point(field_get:VERIFY_PURCHASE_REQ.var_package_name)
  return _internal_var_package_name();
}
inline void VERIFY_PURCHASE_REQ::set_var_package_name(const std::string& value) {
  _internal_set_var_package_name(value);
  // @@protoc_insertion_point(field_set:VERIFY_PURCHASE_REQ.var_package_name)
}
inline std::string* VERIFY_PURCHASE_REQ::mutable_var_package_name() {
  // @@protoc_insertion_point(field_mutable:VERIFY_PURCHASE_REQ.var_package_name)
  return _internal_mutable_var_package_name();
}
inline const std::string& VERIFY_PURCHASE_REQ::_internal_var_package_name() const {
  return var_package_name_.GetNoArena();
}
inline void VERIFY_PURCHASE_REQ::_internal_set_var_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VERIFY_PURCHASE_REQ::set_var_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VERIFY_PURCHASE_REQ.var_package_name)
}
inline void VERIFY_PURCHASE_REQ::set_var_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VERIFY_PURCHASE_REQ.var_package_name)
}
inline void VERIFY_PURCHASE_REQ::set_var_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VERIFY_PURCHASE_REQ.var_package_name)
}
inline std::string* VERIFY_PURCHASE_REQ::_internal_mutable_var_package_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VERIFY_PURCHASE_REQ::release_var_package_name() {
  // @@protoc_insertion_point(field_release:VERIFY_PURCHASE_REQ.var_package_name)
  if (!_internal_has_var_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VERIFY_PURCHASE_REQ::set_allocated_var_package_name(std::string* var_package_name) {
  if (var_package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_package_name);
  // @@protoc_insertion_point(field_set_allocated:VERIFY_PURCHASE_REQ.var_package_name)
}

// required string var_purchase_id = 3;
inline bool VERIFY_PURCHASE_REQ::_internal_has_var_purchase_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VERIFY_PURCHASE_REQ::has_var_purchase_id() const {
  return _internal_has_var_purchase_id();
}
inline void VERIFY_PURCHASE_REQ::clear_var_purchase_id() {
  var_purchase_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VERIFY_PURCHASE_REQ::var_purchase_id() const {
  // @@protoc_insertion_point(field_get:VERIFY_PURCHASE_REQ.var_purchase_id)
  return _internal_var_purchase_id();
}
inline void VERIFY_PURCHASE_REQ::set_var_purchase_id(const std::string& value) {
  _internal_set_var_purchase_id(value);
  // @@protoc_insertion_point(field_set:VERIFY_PURCHASE_REQ.var_purchase_id)
}
inline std::string* VERIFY_PURCHASE_REQ::mutable_var_purchase_id() {
  // @@protoc_insertion_point(field_mutable:VERIFY_PURCHASE_REQ.var_purchase_id)
  return _internal_mutable_var_purchase_id();
}
inline const std::string& VERIFY_PURCHASE_REQ::_internal_var_purchase_id() const {
  return var_purchase_id_.GetNoArena();
}
inline void VERIFY_PURCHASE_REQ::_internal_set_var_purchase_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  var_purchase_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VERIFY_PURCHASE_REQ::set_var_purchase_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  var_purchase_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VERIFY_PURCHASE_REQ.var_purchase_id)
}
inline void VERIFY_PURCHASE_REQ::set_var_purchase_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  var_purchase_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VERIFY_PURCHASE_REQ.var_purchase_id)
}
inline void VERIFY_PURCHASE_REQ::set_var_purchase_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  var_purchase_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VERIFY_PURCHASE_REQ.var_purchase_id)
}
inline std::string* VERIFY_PURCHASE_REQ::_internal_mutable_var_purchase_id() {
  _has_bits_[0] |= 0x00000002u;
  return var_purchase_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VERIFY_PURCHASE_REQ::release_var_purchase_id() {
  // @@protoc_insertion_point(field_release:VERIFY_PURCHASE_REQ.var_purchase_id)
  if (!_internal_has_var_purchase_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return var_purchase_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VERIFY_PURCHASE_REQ::set_allocated_var_purchase_id(std::string* var_purchase_id) {
  if (var_purchase_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  var_purchase_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_purchase_id);
  // @@protoc_insertion_point(field_set_allocated:VERIFY_PURCHASE_REQ.var_purchase_id)
}

// required string var_token = 4;
inline bool VERIFY_PURCHASE_REQ::_internal_has_var_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VERIFY_PURCHASE_REQ::has_var_token() const {
  return _internal_has_var_token();
}
inline void VERIFY_PURCHASE_REQ::clear_var_token() {
  var_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VERIFY_PURCHASE_REQ::var_token() const {
  // @@protoc_insertion_point(field_get:VERIFY_PURCHASE_REQ.var_token)
  return _internal_var_token();
}
inline void VERIFY_PURCHASE_REQ::set_var_token(const std::string& value) {
  _internal_set_var_token(value);
  // @@protoc_insertion_point(field_set:VERIFY_PURCHASE_REQ.var_token)
}
inline std::string* VERIFY_PURCHASE_REQ::mutable_var_token() {
  // @@protoc_insertion_point(field_mutable:VERIFY_PURCHASE_REQ.var_token)
  return _internal_mutable_var_token();
}
inline const std::string& VERIFY_PURCHASE_REQ::_internal_var_token() const {
  return var_token_.GetNoArena();
}
inline void VERIFY_PURCHASE_REQ::_internal_set_var_token(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  var_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VERIFY_PURCHASE_REQ::set_var_token(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  var_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:VERIFY_PURCHASE_REQ.var_token)
}
inline void VERIFY_PURCHASE_REQ::set_var_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  var_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:VERIFY_PURCHASE_REQ.var_token)
}
inline void VERIFY_PURCHASE_REQ::set_var_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  var_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:VERIFY_PURCHASE_REQ.var_token)
}
inline std::string* VERIFY_PURCHASE_REQ::_internal_mutable_var_token() {
  _has_bits_[0] |= 0x00000004u;
  return var_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VERIFY_PURCHASE_REQ::release_var_token() {
  // @@protoc_insertion_point(field_release:VERIFY_PURCHASE_REQ.var_token)
  if (!_internal_has_var_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return var_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VERIFY_PURCHASE_REQ::set_allocated_var_token(std::string* var_token) {
  if (var_token != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  var_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_token);
  // @@protoc_insertion_point(field_set_allocated:VERIFY_PURCHASE_REQ.var_token)
}

// -------------------------------------------------------------------

// DEL_CAMERA_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_DEL_CAMERA_REQ];
inline bool DEL_CAMERA_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DEL_CAMERA_REQ::has_id() const {
  return _internal_has_id();
}
inline void DEL_CAMERA_REQ::clear_id() {
  id_ = 58;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL DEL_CAMERA_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL DEL_CAMERA_REQ::id() const {
  // @@protoc_insertion_point(field_get:DEL_CAMERA_REQ.id)
  return _internal_id();
}
inline void DEL_CAMERA_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void DEL_CAMERA_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:DEL_CAMERA_REQ.id)
}

// required string var_machine_id = 2;
inline bool DEL_CAMERA_REQ::_internal_has_var_machine_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DEL_CAMERA_REQ::has_var_machine_id() const {
  return _internal_has_var_machine_id();
}
inline void DEL_CAMERA_REQ::clear_var_machine_id() {
  var_machine_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DEL_CAMERA_REQ::var_machine_id() const {
  // @@protoc_insertion_point(field_get:DEL_CAMERA_REQ.var_machine_id)
  return _internal_var_machine_id();
}
inline void DEL_CAMERA_REQ::set_var_machine_id(const std::string& value) {
  _internal_set_var_machine_id(value);
  // @@protoc_insertion_point(field_set:DEL_CAMERA_REQ.var_machine_id)
}
inline std::string* DEL_CAMERA_REQ::mutable_var_machine_id() {
  // @@protoc_insertion_point(field_mutable:DEL_CAMERA_REQ.var_machine_id)
  return _internal_mutable_var_machine_id();
}
inline const std::string& DEL_CAMERA_REQ::_internal_var_machine_id() const {
  return var_machine_id_.GetNoArena();
}
inline void DEL_CAMERA_REQ::_internal_set_var_machine_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DEL_CAMERA_REQ::set_var_machine_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DEL_CAMERA_REQ.var_machine_id)
}
inline void DEL_CAMERA_REQ::set_var_machine_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DEL_CAMERA_REQ.var_machine_id)
}
inline void DEL_CAMERA_REQ::set_var_machine_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DEL_CAMERA_REQ.var_machine_id)
}
inline std::string* DEL_CAMERA_REQ::_internal_mutable_var_machine_id() {
  _has_bits_[0] |= 0x00000001u;
  return var_machine_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DEL_CAMERA_REQ::release_var_machine_id() {
  // @@protoc_insertion_point(field_release:DEL_CAMERA_REQ.var_machine_id)
  if (!_internal_has_var_machine_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_machine_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DEL_CAMERA_REQ::set_allocated_var_machine_id(std::string* var_machine_id) {
  if (var_machine_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_machine_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_machine_id);
  // @@protoc_insertion_point(field_set_allocated:DEL_CAMERA_REQ.var_machine_id)
}

// -------------------------------------------------------------------

// RECONNECT_REQ

// optional .PROTOCOL id = 1 [default = ID_PKT_RECONNECT_REQ];
inline bool RECONNECT_REQ::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RECONNECT_REQ::has_id() const {
  return _internal_has_id();
}
inline void RECONNECT_REQ::clear_id() {
  id_ = 60;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOCOL RECONNECT_REQ::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL RECONNECT_REQ::id() const {
  // @@protoc_insertion_point(field_get:RECONNECT_REQ.id)
  return _internal_id();
}
inline void RECONNECT_REQ::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  id_ = value;
}
inline void RECONNECT_REQ::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RECONNECT_REQ.id)
}

// required string var_machine_id = 2;
inline bool RECONNECT_REQ::_internal_has_var_machine_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RECONNECT_REQ::has_var_machine_id() const {
  return _internal_has_var_machine_id();
}
inline void RECONNECT_REQ::clear_var_machine_id() {
  var_machine_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RECONNECT_REQ::var_machine_id() const {
  // @@protoc_insertion_point(field_get:RECONNECT_REQ.var_machine_id)
  return _internal_var_machine_id();
}
inline void RECONNECT_REQ::set_var_machine_id(const std::string& value) {
  _internal_set_var_machine_id(value);
  // @@protoc_insertion_point(field_set:RECONNECT_REQ.var_machine_id)
}
inline std::string* RECONNECT_REQ::mutable_var_machine_id() {
  // @@protoc_insertion_point(field_mutable:RECONNECT_REQ.var_machine_id)
  return _internal_mutable_var_machine_id();
}
inline const std::string& RECONNECT_REQ::_internal_var_machine_id() const {
  return var_machine_id_.GetNoArena();
}
inline void RECONNECT_REQ::_internal_set_var_machine_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RECONNECT_REQ::set_var_machine_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RECONNECT_REQ.var_machine_id)
}
inline void RECONNECT_REQ::set_var_machine_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RECONNECT_REQ.var_machine_id)
}
inline void RECONNECT_REQ::set_var_machine_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_machine_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RECONNECT_REQ.var_machine_id)
}
inline std::string* RECONNECT_REQ::_internal_mutable_var_machine_id() {
  _has_bits_[0] |= 0x00000001u;
  return var_machine_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RECONNECT_REQ::release_var_machine_id() {
  // @@protoc_insertion_point(field_release:RECONNECT_REQ.var_machine_id)
  if (!_internal_has_var_machine_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_machine_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RECONNECT_REQ::set_allocated_var_machine_id(std::string* var_machine_id) {
  if (var_machine_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_machine_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_machine_id);
  // @@protoc_insertion_point(field_set_allocated:RECONNECT_REQ.var_machine_id)
}

// required string var_machine_name = 3;
inline bool RECONNECT_REQ::_internal_has_var_machine_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RECONNECT_REQ::has_var_machine_name() const {
  return _internal_has_var_machine_name();
}
inline void RECONNECT_REQ::clear_var_machine_name() {
  var_machine_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RECONNECT_REQ::var_machine_name() const {
  // @@protoc_insertion_point(field_get:RECONNECT_REQ.var_machine_name)
  return _internal_var_machine_name();
}
inline void RECONNECT_REQ::set_var_machine_name(const std::string& value) {
  _internal_set_var_machine_name(value);
  // @@protoc_insertion_point(field_set:RECONNECT_REQ.var_machine_name)
}
inline std::string* RECONNECT_REQ::mutable_var_machine_name() {
  // @@protoc_insertion_point(field_mutable:RECONNECT_REQ.var_machine_name)
  return _internal_mutable_var_machine_name();
}
inline const std::string& RECONNECT_REQ::_internal_var_machine_name() const {
  return var_machine_name_.GetNoArena();
}
inline void RECONNECT_REQ::_internal_set_var_machine_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  var_machine_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RECONNECT_REQ::set_var_machine_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  var_machine_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RECONNECT_REQ.var_machine_name)
}
inline void RECONNECT_REQ::set_var_machine_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  var_machine_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RECONNECT_REQ.var_machine_name)
}
inline void RECONNECT_REQ::set_var_machine_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  var_machine_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RECONNECT_REQ.var_machine_name)
}
inline std::string* RECONNECT_REQ::_internal_mutable_var_machine_name() {
  _has_bits_[0] |= 0x00000002u;
  return var_machine_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RECONNECT_REQ::release_var_machine_name() {
  // @@protoc_insertion_point(field_release:RECONNECT_REQ.var_machine_name)
  if (!_internal_has_var_machine_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return var_machine_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RECONNECT_REQ::set_allocated_var_machine_name(std::string* var_machine_name) {
  if (var_machine_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  var_machine_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_machine_name);
  // @@protoc_insertion_point(field_set_allocated:RECONNECT_REQ.var_machine_name)
}

// required string var_token = 4;
inline bool RECONNECT_REQ::_internal_has_var_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RECONNECT_REQ::has_var_token() const {
  return _internal_has_var_token();
}
inline void RECONNECT_REQ::clear_var_token() {
  var_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RECONNECT_REQ::var_token() const {
  // @@protoc_insertion_point(field_get:RECONNECT_REQ.var_token)
  return _internal_var_token();
}
inline void RECONNECT_REQ::set_var_token(const std::string& value) {
  _internal_set_var_token(value);
  // @@protoc_insertion_point(field_set:RECONNECT_REQ.var_token)
}
inline std::string* RECONNECT_REQ::mutable_var_token() {
  // @@protoc_insertion_point(field_mutable:RECONNECT_REQ.var_token)
  return _internal_mutable_var_token();
}
inline const std::string& RECONNECT_REQ::_internal_var_token() const {
  return var_token_.GetNoArena();
}
inline void RECONNECT_REQ::_internal_set_var_token(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  var_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RECONNECT_REQ::set_var_token(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  var_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RECONNECT_REQ.var_token)
}
inline void RECONNECT_REQ::set_var_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  var_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RECONNECT_REQ.var_token)
}
inline void RECONNECT_REQ::set_var_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  var_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RECONNECT_REQ.var_token)
}
inline std::string* RECONNECT_REQ::_internal_mutable_var_token() {
  _has_bits_[0] |= 0x00000004u;
  return var_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RECONNECT_REQ::release_var_token() {
  // @@protoc_insertion_point(field_release:RECONNECT_REQ.var_token)
  if (!_internal_has_var_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return var_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RECONNECT_REQ::set_allocated_var_token(std::string* var_token) {
  if (var_token != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  var_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_token);
  // @@protoc_insertion_point(field_set_allocated:RECONNECT_REQ.var_token)
}

// required int64 var_index = 5;
inline bool RECONNECT_REQ::_internal_has_var_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RECONNECT_REQ::has_var_index() const {
  return _internal_has_var_index();
}
inline void RECONNECT_REQ::clear_var_index() {
  var_index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RECONNECT_REQ::_internal_var_index() const {
  return var_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RECONNECT_REQ::var_index() const {
  // @@protoc_insertion_point(field_get:RECONNECT_REQ.var_index)
  return _internal_var_index();
}
inline void RECONNECT_REQ::_internal_set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  var_index_ = value;
}
inline void RECONNECT_REQ::set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_var_index(value);
  // @@protoc_insertion_point(field_set:RECONNECT_REQ.var_index)
}

// required string var_email = 6;
inline bool RECONNECT_REQ::_internal_has_var_email() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RECONNECT_REQ::has_var_email() const {
  return _internal_has_var_email();
}
inline void RECONNECT_REQ::clear_var_email() {
  var_email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RECONNECT_REQ::var_email() const {
  // @@protoc_insertion_point(field_get:RECONNECT_REQ.var_email)
  return _internal_var_email();
}
inline void RECONNECT_REQ::set_var_email(const std::string& value) {
  _internal_set_var_email(value);
  // @@protoc_insertion_point(field_set:RECONNECT_REQ.var_email)
}
inline std::string* RECONNECT_REQ::mutable_var_email() {
  // @@protoc_insertion_point(field_mutable:RECONNECT_REQ.var_email)
  return _internal_mutable_var_email();
}
inline const std::string& RECONNECT_REQ::_internal_var_email() const {
  return var_email_.GetNoArena();
}
inline void RECONNECT_REQ::_internal_set_var_email(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  var_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RECONNECT_REQ::set_var_email(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  var_email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RECONNECT_REQ.var_email)
}
inline void RECONNECT_REQ::set_var_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  var_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RECONNECT_REQ.var_email)
}
inline void RECONNECT_REQ::set_var_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  var_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RECONNECT_REQ.var_email)
}
inline std::string* RECONNECT_REQ::_internal_mutable_var_email() {
  _has_bits_[0] |= 0x00000008u;
  return var_email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RECONNECT_REQ::release_var_email() {
  // @@protoc_insertion_point(field_release:RECONNECT_REQ.var_email)
  if (!_internal_has_var_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return var_email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RECONNECT_REQ::set_allocated_var_email(std::string* var_email) {
  if (var_email != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  var_email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_email);
  // @@protoc_insertion_point(field_set_allocated:RECONNECT_REQ.var_email)
}

// required string var_name = 7;
inline bool RECONNECT_REQ::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RECONNECT_REQ::has_var_name() const {
  return _internal_has_var_name();
}
inline void RECONNECT_REQ::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& RECONNECT_REQ::var_name() const {
  // @@protoc_insertion_point(field_get:RECONNECT_REQ.var_name)
  return _internal_var_name();
}
inline void RECONNECT_REQ::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:RECONNECT_REQ.var_name)
}
inline std::string* RECONNECT_REQ::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:RECONNECT_REQ.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& RECONNECT_REQ::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void RECONNECT_REQ::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RECONNECT_REQ::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RECONNECT_REQ.var_name)
}
inline void RECONNECT_REQ::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RECONNECT_REQ.var_name)
}
inline void RECONNECT_REQ::set_var_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RECONNECT_REQ.var_name)
}
inline std::string* RECONNECT_REQ::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000010u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RECONNECT_REQ::release_var_name() {
  // @@protoc_insertion_point(field_release:RECONNECT_REQ.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RECONNECT_REQ::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:RECONNECT_REQ.var_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_CLI_2eGS_2eproto

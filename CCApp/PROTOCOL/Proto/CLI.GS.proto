// Caution : 1. 수정 시 Generater를 사용하여 코드를 생성하여야 수정내용이 적용됨니다.
//           2. 수정 시 Client Protocol도 함께 변경됨니다.

import "Generated.Id.proto";
import "Generated.Enum.proto";
import "Generated.CremaEnum.proto";
import "Generated.Structure.proto";
import "Generated.StructureGames.proto";

option optimize_for = SPEED;

package PROTOCOL_CLI_TO_GS; // client -> gameserver

// 치트 요청
message PKT_CLI_TO_GS_CHEAT_GLOBAL_ASSET
{
    optional PROTOID.CLI_TO_GS.ID   id              = 1 [default = CHEAT_GLOBAL_ASSET];

    enum eCheatType
    {
        GameMoney                       =  0;
        Cash                            =  1;
        PennantProcess                  =  2;
        PennantSeasonReset              =  3;
        PostSeasonWinTeam               =  4;
        PennantProcessRound             =  5;
        PennantGameResultCheckCancel    =  6;
        PlayerCard                      =  7;
        TrainingPoint                   =  8;
        TeamBadgeGetCheckDisable        =  9;
        ShopProductListReset            = 10;
        SetUserAchieve                  = 11; // Params: type(eAchieveType), groupId, level, value
        PennantTeamBuff                 = 12;
        SingleModeReset                 = 13;
        SingleModeCouponAdd             = 14; // Params: singleModeId(1~4), CouponCount(>=0)
        TeamExp                         = 15; // Params: Exp Add Value
        BoardWriteCount                 = 16; // Params: Write Count
        ChallengeMiniGameInfinit        = 17; // [챌리지 미니게임] 무제한 플레이. Params: mode(0:Off, 1:On)
        ChallengeMiniGameResetUserPlay  = 18; // [챌리지 미니게임] (치트 사용한) 사용자의 플레이 상태 초기화.
        LifeLineGradeUpMaterialDisable  = 19; // [라이프라인] 등급업 재료체크 비활성화. Params: mode(0:Off, 1:On)
        LifeLineSlotGradeValueSet       = 20; // [라이프라인] 승롯 등급 설정.(-1: 비활성화, 0: Ex, 1: Best, 2: Good, 3: Bad)
        PlayerCardShopGuidSet           = 21; // [상점] 선수카드 GUID 설정.(-1: 비활성화, 뽑을 선수카드 Guid)
        RankingModeSetRankingPoint      = 22; // [랭킹전] 랭킹포인트 설정 (1000 포인트 이상 값 지정)
        PennantGradeSet                 = 23; // [페넌트레이스] 리그 등급 변경 설정(0 ~ ), 54라운드 이후에 지정해야함.
        BettingTotalWinSet              = 24; // [경기예측] 누적 승수 설정
        BettingWinComboCountSet         = 25; // [경기예측] 연속 콤보 횟수 설정
        SingleModeNpcBuffViewStateSet   = 26; // [시범경기] 시범 경기 NPC 히든 버프 출력 상태 설정
        KboBettingInitializeInfo        = 27; // [KBO 예측] 팀별 초기화(진행상태) 또는 전체 초기화(시스템 초기상태). Params: mode(0: 팀별 초기화, 1: 전체 초기화)
        KboBettingScheduleProcess       = 28; // [KBO 예측] 진행날짜 변경. (주의: 설정된 현재 예측 날짜/시간 보다 과거로 변경할 수 없다.) Params: YYYY, MM, DD, hh, mm
        KboBettingAddKboPoint           = 29; // [KBO 예측] KBO 포인트 추가. Params: KBO 포인트 추가 값
        RandomItemProbabilityTest       = 30; // [상점] 랜덤형 아이템 확률 테스트
        CreateCopyTeam                  = 31; // 특정 구단 복사 생성
        SpecialAbilityCardGet           = 32; // 특수능력 카드 획득
        SpecialAbilityCardCreateGradeSet= 33; // 특수능력 카드 생성 등급 설정
        TryoutMatchInfinit              = 34; // [평가전] 무제한 플레이. 플레이 가능 횟수 차감 안하며, 가능 횟수가 0 이어도 플레이 가능. Params: mode(0:Off, 1:On)
        PlayerCollectionCheckDisable    = 35; // [선수카드 컬렉션] 재료 체크 기능 비활성화 - 아무카드나 등록됨. Params: mode(0:Off, 1:On)
        AddAccumulRankingModePoint      = 36; // 누적 랭킹전 포인트 추가. Params: 음/양수 값으로 포인트 증감. (변경된 포인트가 음수 값이 되지 않도록 DB 에서 처리함.)
        AddAccumulPennantPoint          = 37; // 누적 페넌트레이스 우승 포인트 추가. Params: 음/양수 값으로 포인트 증감. (변경된 포인트가 음수 값이 되지 않도록 DB 에서 처리함.)
        InvenItemCountSet               = 38; // 인벤토리 아이템 수량 설정 요청
        SimulatorLogSet                 = 39; // 시뮬레이터 로그 활성화 설정 요청
        SpecialAbilityRecipeCheckOff    = 40; // [특수능력카드 레시피] 재료 체크 기능 비활성화
        SpecialAbilityRecipeReset       = 41; // [특수능력카드 레시피] 초기화
        CoachCardAdd                    = 42; // [코치] 코치 추가
        KpiChangeForecast               = 43; // [KPI] 예상 순위 변경. Params: 예상순위1, 예상순위2, 예상순위3
		MasterPlayerMaterialCheckDisable = 44; // [마스터카드] 재료체크 비활성화. Params: mode(0:Off, 1:On)
    }

    optional eCheatType             var_cheat_type  = 2;
    repeated bytes                  var_param       = 3;
}

// 게스트 인증 요청
message PKT_CLI_TO_GS_GUEST_AUTHENTICATE
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = GUEST_AUTHENTICATE];

    required bytes                  var_device_identifier   = 2; // device unique id
    required Struct.Version         var_version             = 3; // 버전
}

// 타 플랫폼 OAUTH 토큰 인증 요청
message PKT_CLI_TO_GS_TOKEN_AUTHENTICATE
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TOKEN_AUTHENTICATE];

    required bytes                  var_oauth_access_token  = 2;
    required bytes                  var_device_identifier   = 3; // device unique id
    optional H3Enum.eAuthService    var_service_type        = 4 [default = NC_GUEST];
    required Struct.Version         var_version             = 5; // 버전
    optional bytes                  var_platform_id         = 6; // platformId
//    optional bytes                  var_hashed_kakao_id     = 7; // KakaoHashedId
}

// 플렛폼 변경 요청
message PKT_CLI_TO_GS_CHANGE_ACCOUNT_PLATFORM
{
    optional PROTOID.CLI_TO_GS.ID id                      = 1 [default = CHANGE_ACCOUNT_PLATFORM];

    required bytes                var_oauth_access_token  = 2;
    optional H3Enum.eAuthService  var_service_type        = 3 [default = NC_GUEST];
}

// 로그인 요청
message PKT_CLI_TO_GS_LOGIN
{
    optional PROTOID.CLI_TO_GS.ID id                	= 1 [default = LOGIN];

    required bytes          var_account_token       	= 2;
	required H3Enum.eStoreType var_store_type      	 	= 3; // 스토어 타입
	optional bytes          var_registered_token    	= 4; // gcm, apns registered id
    optional bool           var_is_first_login      	= 5 [default = false]; // 첫 로그인인가?
	required Struct.DeviceInformation	var_device_info	= 6; // 접속 기기에 대한 전반적인 정보
}

// 재접속 요청
message PKT_CLI_TO_GS_RECONNECT
{
    optional PROTOID.CLI_TO_GS.ID id            		= 1 [default = RECONNECT];

    required bytes          var_account_token   		= 2;
	required H3Enum.eStoreType var_store_type   		= 3; // 스토어 타입
	required Struct.DeviceInformation	var_device_info	= 4; // 접속 기기에 대한 전반적인 정보
}

// 구단 생성 요청
message PKT_CLI_TO_GS_CREATE_TEAM
{
    optional PROTOID.CLI_TO_GS.ID id            		= 1 [default = CREATE_TEAM];

    required bytes var_account_token           			= 2;
    required bytes var_team_name                		= 3;
    required int32 var_favorite_team            		= 4;
    optional bytes  var_registered_token        		= 5; // gcm, apns registered id
    required H3Enum.eStoreType var_store_type   		= 6; // 스토어 타입
	required Struct.DeviceInformation	var_device_info	= 7; // 접속 기기에 대한 전반적인 정보
}

// 탈퇴 요청
//message PKT_CLI_TO_GS_DROP_OUT_CANCEL
//{
//    optional PROTOID.CLI_TO_GS.ID id            = 1 [default = DROP_OUT_CANCEL];
//
//    required bytes          var_account_token   = 2;
//}

// 푸쉬 토큰 등록
message PKT_CLI_TO_GS_NOTIFICATION_REGISTERED_TOKEN
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = NOTIFICATION_REGISTERED_TOKEN];

    required H3Enum.ePlatform       var_platform            = 2;
    required bytes                  var_device_identifier   = 3; // device unique id
    required bytes                  var_registered_token    = 4; // gcm, apns registered id
}

//-----------------------------------------------------------------------------
// 로그 아웃 및 탈퇴
//-----------------------------------------------------------------------------
// logout 요청
message PKT_CLI_TO_GS_LOGOUT
{
    optional PROTOID.CLI_TO_GS.ID id            = 1 [default = LOGOUT];
}

// 탈퇴 요청
//message PKT_CLI_TO_GS_DROP_OUT
//{
//    optional PROTOID.CLI_TO_GS.ID id            = 1 [default = DROP_OUT];
//}

// 접속종료 요청(백그라운드)
message PKT_CLI_TO_GS_GRACEFUL_DISCONNECT
{
    optional PROTOID.CLI_TO_GS.ID id            = 1 [default = GRACEFUL_DISCONNECT];
}

// 핑퐁(미사용)
message PKT_CLI_TO_GS_APPLICATION_STATUS_SCAN
{
    optional PROTOID.CLI_TO_GS.ID id            = 1 [default = APPLICATION_STATUS_SCAN];

    required int32                var_index     = 2;
}

// 게임 옵션 변경 요청
message PKT_CLI_TO_GS_SET_GAME_OPTION
{
    optional PROTOID.CLI_TO_GS.ID   id              = 1 [default = SET_GAME_OPTION];

    repeated Struct.GameOptionInfo   var_options    = 2;
}

// 매니지먼트 모드 정보 조회 요청
message PKT_CLI_TO_GS_MANAGEMENT_MODE_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id              = 1 [default = MANAGEMENT_MODE_INFO];
}

// 매니지먼트 모드 업무 지정 요청
message PKT_CLI_TO_GS_MANAGEMENT_MODE_SET_WORK
{
    optional PROTOID.CLI_TO_GS.ID   id              = 1 [default = MANAGEMENT_MODE_SET_WORK];

    required int32                  var_work_guid   = 2;    // (매니지먼트 모드 크레마 테이블에 정의된) 업무 GUID
}

// 매니지먼트 모드 업무 결과 확인 요청 (즉시 완료, 취소 기능 포함)
message PKT_CLI_TO_GS_MANAGEMENT_MODE_GET_WORK_RESULT
{
    optional PROTOID.CLI_TO_GS.ID   id              = 1 [default = MANAGEMENT_MODE_GET_WORK_RESULT];

    enum eType
    {
        TypeNormal              = 0;    // 일반 (업무 결과 확인)
        TypeInstantlyComplete   = 1;    // 업무 즉시 완료
        TypeCancel              = 2;    // 업무 취소
    }

    required int32                  var_work_guid   = 2;    // (매니지먼트 모드 크레마 테이블에 정의된) 업무 GUID
    required eType                  var_type        = 3;    // 요청 형식
    optional int32                  var_instantly_complete_type = 4 [default = 0];  // 업무 즉시 완료 형식 (Crema: Management_QuickResultPrice_Table:GUID 값 지정. 사용하지 않으면 0 지정.)
}

// 매니지먼트 모드 특수 고용인 활성화 요청
message PKT_CLI_TO_GS_MANAGEMENT_MODE_SET_SPECIAL_WORKER
{
    optional PROTOID.CLI_TO_GS.ID   id              = 1 [default = MANAGEMENT_MODE_SET_SPECIAL_WORKER];

    required int32                  var_worker_guid = 2;    // (매니지먼트 모드 크레마 테이블에 정의된) 고용인 GUID
}

// 페넌트레이스 정보 조회 요청
message PKT_CLI_TO_GS_PENNANT_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id              = 1 [default = PENNANT_INFO];

    optional int32                  var_type        = 2 [default = 0];  // 프로토콜 호출 구분을 위한 클라이언트에서 사용하는 데이터
}

// 페넌트레이스 리그 정보 조회 요청
message PKT_CLI_TO_GS_PENNANT_LEAGUE_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id              = 1 [default = PENNANT_LEAGUE_INFO];

    required int32                  var_season_id   = 2;    // 시즌ID
}

// 페넌트레이스 경기 일정 정보 조회 요청
message PKT_CLI_TO_GS_PENNANT_SCHEDULE_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_SCHEDULE_INFO];

    required int32                  var_season_id       = 2;    // 시즌ID
    required int32                  var_round_id_begin  = 3;    // 라운드ID 시작
    required int32                  var_round_id_end    = 4;    // 라운드ID 끝
}

// 페넌트레이스 경기 결과 세부정보 조회 요청
message PKT_CLI_TO_GS_PENNANT_GAME_RESULT_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_GAME_RESULT_INFO];

    required int32                  var_season_id       = 2;    // 시즌ID
    required int32                  var_round_id        = 3;    // 라운드ID
    //required int32                  var_recap_team_guid = 4;    // 리캡 뉴스 구단 GUID
}

// 페넌트레이스 경기 결과 확인 설정 요청
message PKT_CLI_TO_GS_PENNANT_GAME_RESULT_CHECK
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = PENNANT_GAME_RESULT_CHECK];

    required int32                  var_season_id           = 2;    // 시즌ID
    required int32                  var_round_id            = 3;    // 라운드ID
    optional H3Enum.eGameWatchType    var_game_watch_type     = 4 [default = GameWatchTypeNone];  // 경기 관전 방식

    //-------------------------------------------------------------------------
    // 현재 사용안함. 삭제 예정!!!
    enum eMiniGameResult
    {
        MiniGameResultNone          = 0;    // 미니게임 없음
        MiniGameResultClearSuccess  = 1;    // 미니게임 클리어 성공
        MiniGameResultClearFail     = 2;    // 미니게임 클리어 실패
    }
    optional eMiniGameResult        var_mini_game_result    = 5 [default = MiniGameResultNone]; // 미니게임 플레이 결과
    //-------------------------------------------------------------------------
}

// 페넌트레이스 리그 순위표 및 기록실 조회 요청
message PKT_CLI_TO_GS_PENNANT_LEAGUE_RECORD_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id              = 1 [default = PENNANT_LEAGUE_RECORD_INFO];

    required int32                  var_season_id   = 2;    // 시즌ID
    required int32                  var_league_id   = 3;    // 리그ID
}

// 페넌트레이스 경기 작전 방침 설정 요청
message PKT_CLI_TO_GS_PENNANT_GAME_SET_FRIENDLY_TACTICS
{
    optional PROTOID.CLI_TO_GS.ID       id                        = 1 [default = PENNANT_GAME_SET_FRIENDLY_TACTICS];

    required int32                      var_season_id             = 2; // 시즌ID
    required int32                      var_schedule_id           = 3;
    required int32                      var_friendly_tactics_id   = 4;
    optional int32                      var_friend_team_guid      = 5;
}

// 페넌트레이스 리포트: 시즌 예상 조회 요청
message PKT_CLI_TO_GS_PENNANT_REPORT_FORECAST_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_REPORT_FORECAST_INFO];

    required int32                  var_season_id       = 2;    // 시즌ID
}

// 페넌트레이스 리포트: 시즌 예상 설정 요청
message PKT_CLI_TO_GS_PENNANT_REPORT_FORECAST_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_REPORT_FORECAST_SET];

    required int32                                      var_season_id           = 2; // 시즌ID
    optional int32                                      var_teamcard_id         = 3 [default = 0]; // 선택할 주목 선수의 구단 카드 ID
    repeated Struct.PennantReportForecastInterviewInfo  var_interviews          = 4; // 인터뷰 응답 목록
    optional int32                                      var_kpi_interview_id    = 5 [default = 0]; // KPI 인터뷰 ID
    optional int32                                      var_kpi_forecast_1      = 6 [default = 0]; // KPI 순위 예상 1 (예상 값 그대로 입력. 예상 순위 3 이면, 값 3 입력.)
    optional int32                                      var_kpi_forecast_2      = 7 [default = 0]; // KPI 순위 예상 2
    optional int32                                      var_kpi_forecast_3      = 8 [default = 0]; // KPI 순위 예상 3
}

// 페넌트레이스 리포트: 전반기 결산 조회 요청
message PKT_CLI_TO_GS_PENNANT_REPORT_FIRST_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_REPORT_FIRST_INFO];

    required int32                  var_season_id       = 2;    // 시즌ID
}

// 페넌트레이스 리포트: 전반기 결산 설정 요청
message PKT_CLI_TO_GS_PENNANT_REPORT_FIRST_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_REPORT_FIRST_SET];

    required int32                  var_season_id       = 2;    // 시즌ID
    required int32                  var_teamcard_id     = 3;    // 선택할 주목 선수의 구단 카드 ID
    required H3Enum.eRewardType     var_reward_type     = 4;    // 보상 종류 선택 (eRewardType: Cash, GameMoney, TrainingPoint, Item)
    optional int32                  var_kpi_forecast_1  = 5 [default = 0]; // KPI 순위 예상 1 변경 (변경이 없으면 항목 1~3 모두 0 을 설정)
    optional int32                  var_kpi_forecast_2  = 6 [default = 0]; // KPI 순위 예상 2 변경
    optional int32                  var_kpi_forecast_3  = 7 [default = 0]; // KPI 순위 예상 3 변경
}

// 페넌트레이스 리포트: 중반기 결산 조회 요청
message PKT_CLI_TO_GS_PENNANT_REPORT_SECOND_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_REPORT_SECOND_INFO];

    required int32                  var_season_id       = 2;    // 시즌ID
}

// 페넌트레이스 리포트: 중반기 결산 설정 요청
message PKT_CLI_TO_GS_PENNANT_REPORT_SECOND_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_REPORT_SECOND_SET];

    required int32                  var_season_id       = 2;    // 시즌ID
    required int32                  var_teamcard_id     = 3;    // 선택할 주목 선수의 구단 카드 ID
    required H3Enum.eRewardType     var_reward_type     = 4;    // 보상 종류 선택 (eRewardType: Cash, GameMoney, TrainingPoint, Item)
    optional int32                  var_kpi_forecast_1  = 5 [default = 0]; // KPI 순위 예상 1 변경 (변경이 없으면 항목 1~3 모두 0 을 설정)
    optional int32                  var_kpi_forecast_2  = 6 [default = 0]; // KPI 순위 예상 2 변경
    optional int32                  var_kpi_forecast_3  = 7 [default = 0]; // KPI 순위 예상 3 변경
}

// 페넌트레이스 리포트: 시즌 결산 조회 요청
message PKT_CLI_TO_GS_PENNANT_REPORT_END_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_REPORT_END_INFO];

    required int32                  var_season_id       = 2;    // 시즌ID
}

// 페넌트레이스 리포트: 시즌 결산 설정 요청
message PKT_CLI_TO_GS_PENNANT_REPORT_END_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_REPORT_END_SET];

    required int32                  var_season_id       = 2;    // 시즌ID
}

// 페넌트레이스 리포트: 포스트 시즌 결산 조회 요청
message PKT_CLI_TO_GS_PENNANT_REPORT_POST_END_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_REPORT_POST_END_INFO];

    required int32                  var_season_id       = 2;    // 시즌ID
}

// 페넌트레이스 리포트: 포스트 시즌 결산 설정 요청
message PKT_CLI_TO_GS_PENNANT_REPORT_POST_END_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_REPORT_POST_END_SET];

    required int32                  var_season_id       = 2;    // 시즌ID
}

// 페넌트레이스 경기 준비 정보 요청
message PKT_CLI_TO_GS_PENNANT_GAME_PREPARATION_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_GAME_PREPARATION_INFO];

    required int32                  var_season_id       = 2;    // 시즌ID
    required int32                  var_round_id        = 3;    // 라운드ID
}

// 선수 카드 정보 갱신 요청
message PKT_CLI_TO_GS_PLAYER_CARD_GET_INFO_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PLAYER_CARD_GET_INFO_LIST];
}

// 페넌트레이스 미니 게임 결과 설정 요청
message PKT_CLI_TO_GS_PENNANT_MINI_GAME_RESULT
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = PENNANT_MINI_GAME_RESULT];

    required bytes                  var_verify_data         = 2;    // 확인 데이터
    repeated int32                  var_result_values       = 3;    // 미니 게임 결과 값 목록 (항목 값: 0:실패, 0<:성공)
    optional int32                  var_play_data           = 4 [default = 0];  // 플레이 데이터

    //-------------------------------------------------------------------------
    // 삭제 예정 항목들
    //required int32                  var_season_id           = 4;    // 시즌ID
    //required int32                  var_round_id            = 5;    // 라운드ID
    //required int32                  var_result_value        = 6;    // 미니 게임 결과 값 (0:실패, 0<:성공)
    //-------------------------------------------------------------------------
}

// 팀 로스터 멤버 변경
message PKT_CLI_TO_GS_ROSTER_MEMBER_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                            = 1 [default = ROSTER_MEMBER_SET];

    required int32                  var_batter_tactical_entry_id  = 2; // 타자 택티컬 엔트리 Id
    required int32                  var_pitcher_tactical_entry_id = 3; // 투수 택티컬 엔트리 Id
    repeated Struct.RosterMember    var_roster_member             = 4; // 로스터 멤버
}

// 선수 카드 판매
message PKT_CLI_TO_GS_PLAYER_CARD_SELL
{
    optional PROTOID.CLI_TO_GS.ID   id                            = 1 [default = PLAYER_CARD_SELL];
    required int32                  var_payback_type              = 2 [default = 0]; // 0 : GameMoney, 1 : TrainingPoint
    repeated int32                  var_teamcard_id_list          = 3; // 삭제할 선수 카드 목록
}

// 선수카드 구매 요청
message PKT_CLI_TO_GS_PLAYER_CARD_BUY
{
    optional PROTOID.CLI_TO_GS.ID   id                            = 1 [default = PLAYER_CARD_BUY];
    optional int32                  var_buy_count                 = 2 [default = 0]; // 카드 구매 수량
}

// 타구단 정보 검색 요청
message PKT_CLI_TO_GS_OPPENENT_TEAM_INFO_FIND
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = OPPENENT_TEAM_INFO_FIND];
    required int32                  var_team_guid       = 2; // 팀 guid
}

// 라이프라인 슬롯 설정 요청
message PKT_CLI_TO_GS_LIFELINE_SLOT_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = LIFELINE_SLOT_SET];

    required int32                  var_teamcard_id             = 2; // 구단 선수카드 ID
    required int32                  var_lifeline_step           = 3; // 성장 단계 (시작 값 1)(주의: classic, rare 등에 해당하는 실제 등급 값이 아닌 단계 순서 값 지정)
    required int32                  var_slot_num                = 4; // 슬롯 번호 (시작 값 0)
    optional int32                  var_use_cash                = 5 [default = 0]; // 사용할 Cash (훈련포인트가 모자를 경우 사용)
    optional int32                  var_grade_chance_up_item_id = 6 [default = 0]; // 등급 확정 아이템 ID 설정 (등급 확정 아이템 사용 시 설정)
}

// 라이프라인 슬롯 초기화 요청
message PKT_CLI_TO_GS_LIFELINE_SLOT_RESET
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = LIFELINE_SLOT_RESET];

    // 초기화 비용 종류
    enum eCostType
    {
        CostTypeCash    = 0; // 위닝볼
        CostTypeItem    = 1; // 초기화권
    }

    required int32                  var_teamcard_id     = 2; // 구단 선수카드 ID
    required int32                  var_lifeline_step   = 3; // 성장 단계 (시작 값 1)(주의: classic, rare 등에 해당하는 실제 등급 값이 아닌 단계 순서 값 지정)
    required int32                  var_slot_num        = 4; // 슬롯 번호 (0 부터 첫번째 슬롯 시작)
    optional eCostType              var_cost_type       = 5 [default = CostTypeCash]; // 초기화 비용 종류
}

// 라이프라인 등급 상승 요청
message PKT_CLI_TO_GS_LIFELINE_GRADE_UP
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = LIFELINE_GRADE_UP];

    required int32                  var_teamcard_id             = 2; // 구단 선수카드 ID
    optional int32                  var_material_teamcard_id    = 3 [default = 0]; // 재료 구단 선수카드 ID (프렌차이즈 등급업에 사용)
	optional int32					var_material_teamcard_id_2	= 4 [default = 0];
}

// 선수 카드 잠금
message PKT_CLI_TO_GS_PLAYER_CARD_LOCK
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = PLAYER_CARD_LOCK];

    required bool                   var_lock_status         = 2; //false : 잠금해제, true : 잠금
    repeated int32                  var_teamcard_id_list    = 3 [packed=true]; //카드 guid 최대 20장
}

// 선수카드 인벤토리 확장 
message PKT_CLI_TO_GS_PLAYER_CARD_INVENTORY_EXTEND
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = PLAYER_CARD_INVENTORY_EXTEND];
}

// 구단 정보 : 세부 정보 요청
message PKT_CLI_TO_GS_TEAM_INFO_DETAIL
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = TEAM_INFO_DETAIL];
    required int32                  var_team_guid       = 2; // 팀 guid
}

// 구단 정보 : 보유 선수 정보 요청
message PKT_CLI_TO_GS_TEAM_INFO_HAVE_PLAYER_CARD
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = TEAM_INFO_HAVE_PLAYER_CARD];
    required int32                  var_team_guid       = 2; // 팀 guid
}

// 구단 정보 : 누적 리그 성적 상세 요청
message PKT_CLI_TO_GS_TEAM_INFO_RECORD_TOTAL
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = TEAM_INFO_RECORD_TOTAL];
    required int32                  var_team_guid       = 2; // 팀 guid
}

// 선수카드 검색 요청
message PKT_CLI_TO_GS_PLAYER_CARD_INFO_FIND
{
    optional PROTOID.CLI_TO_GS.ID   id                        = 1 [default = PLAYER_CARD_INFO_FIND];
    repeated Struct.PlayerCardFind  var_player_card_find_list = 2; // 검색할 선수 카드 정보 리스트
}

// 팀 배지 정보 조회 요청
message PKT_CLI_TO_GS_TEAM_BADGE_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TEAM_BADGE_INFO];
}

// 팀 배지 재료 등록 요청
message PKT_CLI_TO_GS_TEAM_BADGE_MATERIAL_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TEAM_BADGE_MATERIAL_SET];

    required int32                  var_team_badge_id       = 2; // 재료를 등록할 미보유 팀 배지 ID
    required int32                  var_material_slot       = 3; // 재료 슬롯 번호 (0부터 시작)
    required int32                  var_team_card_id        = 4; // 재료 구단 선수카드 ID
}

// 팀 배지 획득 요청
message PKT_CLI_TO_GS_TEAM_BADGE_GET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TEAM_BADGE_GET];

    required int32                  var_team_badge_id       = 2; // 팀 배지 ID
}

// 팀 배지 장착 요청
message PKT_CLI_TO_GS_TEAM_BADGE_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TEAM_BADGE_SET];

    required int32                  var_team_badge_id       = 2; // 팀 배지 ID (0이면 장착 해제)
    required int32                  var_slot                = 3; // 팀 배지 슬롯 번호 (0부터 시작)
}

// 선수카드 조합 요청
message PKT_CLI_TO_GS_PLAYER_CARD_COMPOSE
{
    optional PROTOID.CLI_TO_GS.ID   id                        = 1 [default = PLAYER_CARD_COMPOSE];
    optional bool                   var_is_retry              = 2 [default = false];  //true : 재시도, false : 일반 합성 
    repeated int32                  var_teamcard_id_list      = 3 [packed=true]; //카드 guid 최대 10장
    optional int32                  var_team_group_filter_id  = 4; // 구단 그룹 필터 ID
    optional int32                  var_year_filter_id        = 5; // 연도 필터 ID
}

// 상점 : 상품 리스트 요청
message PKT_CLI_TO_GS_SHOP_PRODUCT_INFO_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id                        = 1 [default = SHOP_PRODUCT_INFO_LIST];
}

// 상점 : 아이템 구매 요청
message PKT_CLI_TO_GS_SHOP_PRODUCT_BUY
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = SHOP_PRODUCT_BUY];
    required H3Enum.eShopGroup      var_shop_group          = 2; // 상점 GroupIndex
    required int32                  var_slot_id             = 3; // 슬롯 번호(0~100: 이벤트, 101~: 일반)
    optional int32                  var_count               = 4 [default = 1]; // 구매 수량
    optional bytes                  var_verify_data         = 5; // 확인 데이터

    optional bool                   var_is_eventshop_product    = 6; // -추가- 이벤트샵 인앱 아이템 인가
    optional int32                  var_eventshop_event_id      = 7; // -추가- 이벤트샵의 이벤트 id    
    optional int32                  var_eventshop_product_id    = 8; // -추가- 이벤트샵의 Product id
    optional int32                  var_eventshop_item_id       = 9; // -추가- ItemShop 테이블에서의 ID
    
    optional int32                  var_select_item_id          = 10 [default = 0];// 선택형 가차에서 선택된 ItemId

    optional bool                   var_is_usercareshop_product = 11; // -추가- 유저캐어샵 인앱 아이템 인가
    optional int32                  var_usercareshop_event_id   = 12; // -추가- 유저캐어샵의 이벤트 id    
    optional int32                  var_usercareshop_product_id = 13; // -추가- 유저캐어샵의 Product id
    optional int32                  var_usercareshop_item_id    = 14; // -추가- ItemShop 테이블에서의 ID

    optional int32                  var_select_item_id_sub      = 15 [default = 0];// 셀렉터블 아이템 사용 시 보조 선택용 ItemId
}

// 상점 : 노멀 선수카드팩 리셋
message PKT_CLI_TO_GS_SHOP_NORMAL_PACK_RESET
{
    optional PROTOID.CLI_TO_GS.ID   id                        = 1 [default = SHOP_NORMAL_PACK_RESET];
    required int32                  var_reset_count           = 2; // 리셋 횟수
}

// 선물함 : 정보 요청
message PKT_CLI_TO_GS_GIFT_BOX_INFO_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id                        = 1 [default = GIFT_BOX_INFO_LIST];
}

// 선물함 : 선물 받기 요청
message PKT_CLI_TO_GS_GIFT_BOX_GET
{
    optional PROTOID.CLI_TO_GS.ID     id                        = 1 [default = GIFT_BOX_GET];
    required H3Enum.eItemCategoryType var_item_cartegory        = 2; // 선물 카테고리
    required bool                     var_is_receive_all        = 3; // 선물 모두 받기 (True : 모두 받기, false : 개별 받기)
    required int64                    var_gift_id               = 4; // 선물 ID (0 : 모두 받기,  1~ : 개별로 받을 선물 ID)
}

// 아이템 보관함 : 정보 요청
message PKT_CLI_TO_GS_ITEM_INVEN_INFO_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id                        = 1 [default = ITEM_INVEN_INFO_LIST];
}

// 아이템 보관함 : 아이템 사용
message PKT_CLI_TO_GS_ITEM_INVEN_USE
{
    optional PROTOID.CLI_TO_GS.ID   id                        = 1 [default = ITEM_INVEN_USE];
    optional Struct.InvenItemInfo   var_target_inven_item     = 2; // 사용할 아이템 정보
    optional int32                  var_select_item_id        = 3 [default = 0];// 선택형 가차에서 선택된 ItemId
    optional int32                  var_select_item_id_sub    = 4 [default = 0];// 셀렉터블 아이템 사용 시 보조 선택용 ItemId
}

// 아이템 보관함 : 아이템 판매
message PKT_CLI_TO_GS_ITEM_INVEN_SELL
{
    optional PROTOID.CLI_TO_GS.ID   id                        = 1 [default = ITEM_INVEN_SELL];
    optional Struct.InvenItemInfo   var_target_inven_item     = 2; // 판매할 아이템 정보
}

// 전지훈련 정보 조회 요청
message PKT_CLI_TO_GS_TRAINING_CAMP_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TRAINING_CAMP_INFO];
}

// 선수카드 전지훈련 등록 요청
message PKT_CLI_TO_GS_TRAINING_CAMP_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TRAINING_CAMP_SET];

    required int32                  var_slot_id             = 2; // 전지훈련 슬롯 ID
    required int32                  var_team_card_id        = 3; // 구단 선수카드 ID
}

// 선수카드 전지훈련 종료 요청
message PKT_CLI_TO_GS_TRAINING_CAMP_END
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TRAINING_CAMP_END];

    enum eType
    {
        TypeComplete    = 0; // 완료
        TypeCancel      = 1; // 취소
    }

    required int32                  var_slot_id             = 2; // 전지훈련 슬롯 ID
    required eType                  var_type                = 3; // 요청 종류
}

// 전지훈련 슬롯 개방 요청
message PKT_CLI_TO_GS_TRAINING_CAMP_SLOT_OPEN
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TRAINING_CAMP_SLOT_OPEN];

    required int32                  var_slot_id             = 2; // 전지훈련 슬롯 ID
}

// 도전과제 정보 조회 요청
message PKT_CLI_TO_GS_ACHIEVE_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = ACHIEVE_INFO];
}

// 도전과제 보상 받기 요청
message PKT_CLI_TO_GS_ACHIEVE_REWARD
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = ACHIEVE_REWARD];

    required H3Enum.eAchieveType    var_type                = 2; // 도전과제 종류
    required int32                  var_group_id            = 3; // 해당 도전과제 종류의 그룹 ID
    required int32                  var_level               = 4; // 단계 레벨
    optional Struct.TimeStamp       var_achieve_end_time    = 5; // 일일 또는 주간 도전과제 종료 일시 (프로토콜 GS_TO_CLI_ACHIEVE_INFO 에서 전송된 값을 사용. 업적일 경우 사용안함.)
}

// 싱글모드 정보
message PKT_CLI_TO_GS_SINGLE_MODE_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = SINGLE_MODE_INFO];
}

// 싱글모드 진행 정보 요청
message PKT_CLI_TO_GS_SINGLE_MODE_PROGRESS_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = SINGLE_MODE_PROGRESS_INFO];
    required int32                  var_single_mode_id      = 2; // 싱글 모드 id(1:Normal 2:Special 3:Event1 4:Event2)
    required int32                  var_area_id_1           = 3; // 검색 지역 id 1
    required int32                  var_area_id_2           = 4; // 검색 지역 id 2 (하나만 검색 1, 0 / 두개 검색 1, 2)
}

// 싱글모드 경기 정보 요청
message PKT_CLI_TO_GS_SINGLE_MODE_GAME_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = SINGLE_MODE_GAME_INFO];
    required int32                  var_single_mode_id      = 2; // 싱글 모드 id
    required int32                  var_area_id             = 3; // 지역 id
    required int32                  var_round_id            = 4; // 라운드 id
}

// 싱글모드 경기 결과 요청
message PKT_CLI_TO_GS_SINGLE_MODE_GAME_RESULT
{
    optional PROTOID.CLI_TO_GS.ID   id                         = 1 [default = SINGLE_MODE_GAME_RESULT];
    required int32                  var_single_mode_id         = 2; // 싱글 모드 id
    required int32                  var_area_id                = 3; // 지역 id
    required int32                  var_round_id               = 4; // 라운드 id
    required int32                  var_friendly_tactics_id_1  = 5; // 1차전 작전 방침 설정, 미설정 시 0
    required int32                  var_friendly_tactics_id_2  = 6; // 2차전 작전 방침 설정
    required int32                  var_friendly_tactics_id_3  = 7; // 3차전 작전 방침 설정
    required bool                   var_is_special_tactics_use = 8; // 체험 작전 방침 사용 유무 (체험 작전 방침 사용 시 true)
    repeated int32                  var_is_mission_responses   = 9; // 미션 질문 응답 리스트 (0: 선택안함, 1: 성공 2: 실패)
}

// 싱글모드 경기 스윕 요청
message PKT_CLI_TO_GS_SINGLE_MODE_GAME_SWEEP
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = SINGLE_MODE_GAME_SWEEP];
    required int32                  var_single_mode_id      = 2; // 싱글 모드 id
    required int32                  var_area_id             = 3; // 지역 id
    required int32                  var_round_id            = 4; // 라운드 id
}

// 싱글모드 지역 개방 요청
message PKT_CLI_TO_GS_SINGLE_MODE_AREA_OPEN
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = SINGLE_MODE_AREA_OPEN];

    required int32                  var_single_mode_id      = 2; // 싱글 모드 id
    required int32                  var_area_id             = 3; // 지역 id
}

// 싱글모드 작전 방침 초기화 요청
message PKT_CLI_TO_GS_SINGLE_MODE_TACTICS_RESET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = SINGLE_MODE_TACTICS_RESET];

    required int32                  var_single_mode_id      = 2; // 싱글 모드 id
    //required int32                  var_area_id             = 3; // 지역 id
}

// 구단 마스터리 정보 조회 요청
message PKT_CLI_TO_GS_TEAM_MASTERY_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = TEAM_MASTERY_INFO];
}

// 구단 마스터리 설정 요청
message PKT_CLI_TO_GS_TEAM_MASTERY_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = TEAM_MASTERY_SET];

    repeated int32                  var_team_mastery_id_list    = 2; // 설정할 구단 마스터리 ID 목록
}

// 구단 마스터리 초기화 요청
message PKT_CLI_TO_GS_TEAM_MASTERY_RESET
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = TEAM_MASTERY_RESET];
}

// 구단 마스터리 포인트 구입 요청
message PKT_CLI_TO_GS_TEAM_MASTERY_POINT_BUY
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = TEAM_MASTERY_POINT_BUY];

    required int32                  var_buy_point               = 2; // 구입 구단 마스터리 포인트
}

// 앨범 정보 요청 - 선수카드 수집 수행 목록 전체
message PKT_CLI_TO_GS_TEAM_CARD_ALBUM_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = TEAM_CARD_ALBUM_INFO];

    required int32                  var_team_guid               = 2; // 팀 guid
}
// 앨범 선수카드 레벨업 요청
message PKT_CLI_TO_GS_TEAM_CARD_ALBUM_LEVEL_UP
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = TEAM_CARD_ALBUM_LEVEL_UP];

    required int32                  var_player_card_id          = 2; // 플레이어 카드 guid
}

// 앨범 미션 수행 완료,보상 요청
message PKT_CLI_TO_GS_TEAM_CARD_ALBUM_MISSION_REGISTER
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = TEAM_CARD_ALBUM_MISSION_REGISTER];

    required int32                  var_album_mission_id        = 2; // 앨범:미션의 고유 id
}

// 친구: 친구 리스트 요청
message PKT_CLI_TO_GS_FRIEND_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = FRIEND_INFO];
}

// 친구: 친구 맺기 리스트 요청(추천친구, 받은친구, 보낸친구)
message PKT_CLI_TO_GS_FRIEND_STANDBY_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = FRIEND_STANDBY_INFO];

    required H3Enum.eFriendType     var_friend_type             = 2; // 친구 맺기 리스트 타입(친구(X), 추천친구, 받은친구, 보낸친구)
}

// 친구: 친구 맺기 모든 리스트 요청
message PKT_CLI_TO_GS_FRIEND_STANDBY_INFO_ALL
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = FRIEND_STANDBY_INFO_ALL];

    required H3Enum.eFriendType     var_friend_type             = 2; // 친구 맺기 리스트 타입(친구(X), 추천친구, 받은친구, 보낸친구)
}

// 친구: 친구 수락 요청
message PKT_CLI_TO_GS_FRIEND_ACCEPT
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = FRIEND_ACCEPT];

    required int32                  var_team_guid               = 2; // 수락할 팀 guid
}

// 친구: 친구 삭제 요청
message PKT_CLI_TO_GS_FRIEND_DELETE
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = FRIEND_DELETE];

    required int32                  var_team_guid               = 2; // 삭제할 팀 guid
}

// 친구: 친구 맺기 취소 요청(친구 거절, 보낸 신청 취소)
message PKT_CLI_TO_GS_FRIEND_STANDBY_CANCEL
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = FRIEND_STANDBY_CANCEL];

    required int32                  var_team_guid               = 2; // 취소할 팀 guid
    required H3Enum.eFriendType     var_friend_type             = 3; // 친구 맺기 리스트 타입(받은친구, 보낸친구)
}

// 친구: 친구 찾기 요청
message PKT_CLI_TO_GS_FRIEND_FIND
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = FRIEND_FIND];

    required bytes                  var_team_name               =  2; // 검색할 구단 명
}

// 친구: 친구 요청 보내기
message PKT_CLI_TO_GS_FRIEND_REQUEST
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = FRIEND_REQUEST];

    required int32                  var_team_guid               = 2; // 친구 요청할 팀 guid
}

// 게시판: 선수 게시판 목록 요청
message PKT_CLI_TO_GS_BOARD_REPLY_LIST
{
    // 게시판 정렬 기준 
    enum eSortType
    {
        Sort_NewArrival    = 0;  // 최신 댓글 순
        Sort_Like          = 1;  // 호감순: 좋아요 순
        Sort_MyReply       = 2;  // 내 글
    }

    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = BOARD_REPLY_LIST];

    required int32                  var_player_card_id          = 2; // 선수카드 ID
    required bool                   var_is_first_page           = 3; // 첫 페이지 인가? (true: 첫페이지, false: 첫페이지 아님)
    
    optional eSortType              var_sort_type               = 4 [default = Sort_NewArrival]; // 정렬 타입 
    optional int32                  var_reply_count             = 5 [default = 50]; // 가져올 댓글 수량 (기본 50개)
    optional int64                  var_last_reply_id           = 6 [default = 0]; // 최신순,호감순인 경우: 마지막 댓글 번호(일련번호): 페이징 기능을 위해 (첫 페이지인 경우 0)
    optional int64                  var_last_reply_like_count   = 7 [default = 0]; // 호감순인 경우: 마지막 댓글의 id와 like 번호를 넣어 보낸다. (그외 정렬 타입에서는 0)
    

}

// 게시판: 선수 게시판 댓글 쓰기
message PKT_CLI_TO_GS_BOARD_REPLY_WRITE
{
	optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = BOARD_REPLY_WRITE];

    required int32                  var_player_card_id          = 2; // 선수카드 ID
    required bytes                  var_contents                = 3; // 댓글 내용 (nvarchar 100)
}

// 게시판: 선수 게시판 좋아요 누르기
message PKT_CLI_TO_GS_BOARD_REPLY_LIKE
{
	optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = BOARD_REPLY_LIKE];

    required int32                  var_player_card_id          = 2; // 선수카드 ID
    required int64                  var_board_reply_id          = 3; // 댓글 ID
}

// 게시판: 선수 게시판 내 댓글 지우기
message PKT_CLI_TO_GS_BOARD_REPLY_REMOVE
{
	optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = BOARD_REPLY_REMOVE];

    required int32                  var_player_card_id          = 2; // 선수카드 ID
    required int64                  var_board_reply_id          = 3; // 댓글 ID
}

// 게시판: 선수 게시판 카드 평가하기
message PKT_CLI_TO_GS_BOARD_CARD_ESTIMATION
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = BOARD_CARD_ESTIMATION];

    required int32                  var_player_card_id          = 2; // 선수카드 ID
    required int32                  var_estimation_point        = 3; // 평점
}

// 게시판: 선수 게시판 카드 순위조회
message PKT_CLI_TO_GS_BOARD_CARD_RANK
{
    optional PROTOID.CLI_TO_GS.ID   id                              = 1 [default = BOARD_CARD_RANK];

    required int32                   var_player_card_position_id    = 2; // 포지션 ID(0:결과없음)
    required int32                   var_player_card_state          = 3; // 선수상태 (0:결과없음, 1:타자, 2:투수)
    required int32                   var_rank_count                 = 4; // 가져올 랭크 수
}

// 게시판: 선수 게시판 카드 벌크 입력 (댓글 입력기) (-삭제예정-)
message PKT_CLI_TO_GS_BOARD_DEV_TEST_BULK_ADD
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = BOARD_DEV_TEST_BULK_ADD];

    required int32                  var_player_card_id          = 2; // 선수카드 ID
    required bytes                  var_contents                = 3; // 댓글
    required int32                  var_contents_count          = 4; // 댓글개수
}

// 상점 : InAppItem List 요청
message PKT_CLI_TO_GS_SHOP_IN_APP_ITEM_LIST
{
    optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = SHOP_IN_APP_ITEM_LIST];
}

// 상점 : InAppItem 구매
message PKT_CLI_TO_GS_SHOP_IN_APP_ITEM_BUY
{
    optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = SHOP_IN_APP_ITEM_BUY];

    required int32                      var_inapp_item_id           = 2; // 인앱 아이템 ID
    optional bool                       var_is_eventshop_product    = 3; // -추가- 이벤트샵 인앱 아이템 인가
    optional int32                      var_eventshop_event_id      = 4; // -추가- 이벤트샵의 이벤트 id    
    optional int32                      var_eventshop_product_id    = 5; // -추가- 이벤트샵의 Product id

    optional bool                       var_is_usercareshop_product = 6; // -추가- 유저캐어샵 인앱 아이템 인가
    optional int32                      var_usercareshop_event_id   = 7; // -추가- 유저캐어샵의 이벤트 id    
    optional int32                      var_usercareshop_product_id = 8; // -추가- 유저캐어샵의 Product id
}

// 상점 : 게임머니 충전
message PKT_CLI_TO_GS_SHOP_GAME_MONEY_CHARGE
{
    optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = SHOP_GAME_MONEY_CHARGE];

    required int32                      var_pt_charge_id   = 2;
}

// 튜토리얼 : 중간 저장
message PKT_CLI_TO_GS_TUTORIAL_ID_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TUTORIAL_ID_SET];

    required int32                  var_tutorial_id         = 2; // 튜토이얼 id
}

// 튜토리얼 : 미니 게임 결과 설정 요청
message PKT_CLI_TO_GS_TUTORIAL_MINI_GAME_BONUS_GET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TUTORIAL_MINI_GAME_BONUS_GET];

    required int32                  var_reward_id           = 2; // 선택한 보상 ID
    required bytes                  var_verify_data         = 3; // 확인 데이터
    repeated int32                  var_result_values       = 4; // 미니 게임 결과 값 목록 (항목 값: 0:실패, 0<:성공)
}

// 튜토리얼 : 경기 결과 요청
message PKT_CLI_TO_GS_TUTORIAL_GAME_RESULT
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TUTORIAL_GAME_RESULT];

    required int32                  var_tutorial_id         = 2; // 튜토이얼 id
}

// 예측 : 정보 요청
message PKT_CLI_TO_GS_BETTING_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_INFO];

//    required int32                  var_season_id           = 2; // 시즌 id
//    required int32                  var_round_id            = 3; // 라운드 id
}

// 예측 : 경기 예측 결과 요청
message PKT_CLI_TO_GS_BETTING_GAME_RESULT
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_GAME_RESULT];

//    required int32                  var_season_id           = 2; // 시즌 id
//    required int32                  var_round_id            = 3; // 라운드 id
}

// 예측 : 경기 예측(승수 예측, 기록 예측) 정보 요청
message PKT_CLI_TO_GS_BETTING_GAME_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_GAME_INFO];

    optional int32                  var_betting_info_state  = 2 [default = 0]; // 배팅 정보 요청 상태 - 0 : 일반, 1 : 라운드 예측, 2 : 예측 센터 
}

// 예측 : 선수 기록 추가 요청
message PKT_CLI_TO_GS_BETTING_GAME_PLAYER_RECORD_ADD
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_GAME_PLAYER_RECORD_ADD];

    required int32                  var_season_id           = 2; // 시즌 id
    required int32                  var_round_id            = 4; // 라운드 id
}

// 예측 : 승수 예측 엿보기 요청
message PKT_CLI_TO_GS_BETTING_GAME_WIN_COUNT_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_GAME_WIN_COUNT_INFO];

    required int32                  var_season_id           = 2; // 시즌 id
    required int32                  var_round_id            = 4; // 라운드 id
}

// 예측 : 기록 예측 엿보기 요청
message PKT_CLI_TO_GS_BETTING_GAME_PLAYER_RECORD_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_GAME_PLAYER_RECORD_INFO];

    required int32                  var_season_id           = 2; // 시즌 id
    required int32                  var_round_id            = 4; // 라운드 id
}

// 예측 : 승수 예측 설정
message PKT_CLI_TO_GS_BETTING_GAME_WIN_COUNT_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_GAME_WIN_COUNT_SET];

    required int32                  var_season_id           = 2; // 시즌 id
    required int32                  var_round_id            = 3; // 라운드 id
    required int32                  var_win_count           = 4; // 예상 승수 설정
    required int32                  var_point_betting       = 5; // 베팅한 포인트
}

// 예측 : 기록 예측 설정
message PKT_CLI_TO_GS_BETTING_GAME_PLAYER_RECORD_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_GAME_PLAYER_RECORD_SET];

    required int32                  var_season_id           = 2; // 시즌 id
    required int32                  var_round_id            = 3; // 라운드 id
    required int32                  var_slot_id             = 4; // 선택한 slot id
    required int32                  var_point_betting       = 5; // 베팅한 포인트
}

// 예측 : 라운드 예측 정보
message PKT_CLI_TO_GS_BETTING_ROUND_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_ROUND_INFO];

    required int32                  var_season_id           = 2; // 시즌 id
    required int32                  var_round_id            = 3; // 라운드 id
}

// 예측 : 이전 라운드 예측 보기
message PKT_CLI_TO_GS_BETTING_ROUND_INFO_HISTORY
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_ROUND_INFO_HISTORY];

    required int32                  var_season_id           = 2; // 시즌 id
    required int32                  var_round_id            = 3; // 라운드 id
}

// 예측 : 라운드 예측 전체 순위
message PKT_CLI_TO_GS_BETTING_ROUND_TOTAL_RANKING
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_ROUND_TOTAL_RANKING];

    required int32                  var_season_id           = 2; // 시즌 id
}

// 예측 : 시즌 예측 정보
message PKT_CLI_TO_GS_BETTING_SEASON_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_SEASON_INFO];

    required int32                  var_season_id           = 2; // 시즌 id
    required int32                  var_league_id           = 3; // 리그 id
}

// 예측 : 시즌 예측 설정
message PKT_CLI_TO_GS_BETTING_SEASON_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_SEASON_SET];

    required int32                  var_season_id           = 2; // 시즌 id
    required int32                  var_league_id           = 3; // 리그 id
    required int32                  var_select_team_guid    = 4; // 선택한 teamGuid
}

// 예측 : 예측포인트 리필 요청
message PKT_CLI_TO_GS_BETTING_POINT_REFILL
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_POINT_REFILL];
}

// 예측 : 포스트시즌 질문 생성 요청
message PKT_CLI_TO_GS_BETTING_GAME_POST_SEASON_QUESTION_ADD
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_GAME_POST_SEASON_QUESTION_ADD];

    required int32                  var_season_id           = 2; // 시즌 id
    required H3Enum.ePennantGameType var_pennant_game_type   = 3; // 시즌 타입
}

// 예측 : 포스트시즌 예측 설정
message PKT_CLI_TO_GS_BETTING_GAME_POST_SEASON_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_GAME_POST_SEASON_SET];

    required int32                  var_season_id           = 2; // 시즌 id
    required H3Enum.ePennantGameType var_pennant_game_type  = 3; // 시즌 타입
    required int32                  var_question_select_id  = 4; // 예상 승수 설정 - 시즌 승일때 : 1: 홈, 2:어웨이, 차전 예상 : 1~시리즈 마지막경기
    required int32                  var_point_betting       = 5; // 베팅한 포인트
}

// 명성 정보 조회 요청
message PKT_CLI_TO_GS_FAME_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = FAME_INFO];
}

// 명성 이전 기록 조회 요청
message PKT_CLI_TO_GS_FAME_HISTORY
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = FAME_HISTORY];
}

// 명성 순위 목록 조회 요청
message PKT_CLI_TO_GS_FAME_RANK_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = FAME_RANK_LIST];

    optional int32                  var_team_group          = 2; // 구단 그룹 ID (Crema TeamInfo_Table::TeamGroup 값 설정) (0: 전체)
    optional int32                  var_top_count           = 3 [default = 100]; // 순위 최대 개수 (최대 100 개)
}

// 명성 보상 받기 요청
message PKT_CLI_TO_GS_FAME_REWARD
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = FAME_REWARD];

    optional int32                  var_fame_season_id      = 2; // 명성 시즌 ID
}

// 게임 옵션 저장 요청
message PKT_CLI_TO_GS_SAVE_OPTION
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = SAVE_OPTION];

    optional int32                  var_push_option         = 2;    // 옵션 비트 플래그(0x00: 모두ON, 0x01: 홍보성 푸시, 0x02: 야간 푸시, 0xFF: 모두OFF)
                                                                    // ePushOption 타입 참조. 
}

// 방침 친구 정보 용청
message PKT_CLI_TO_GS_FRIENDLY_TACTICS_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = FRIENDLY_TACTICS_INFO];
}

// 월드 정보 목록 조회 요청
message PKT_CLI_TO_GS_WORLD_INFO_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = WORLD_INFO_LIST];
}

// 채팅 - 유저 정보(차단, 금지정보 포함)
message PKT_CLI_TO_GS_CHAT_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = CHAT_INFO];
}

// 채팅 - 유저 차단하기
message PKT_CLI_TO_GS_CHAT_BLOCK_USER
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = CHAT_BLOCK_USER];
    optional int32                  var_target_team_guid    = 2;    // 차단할 구단 GUID
}

// 채팅 - 유저 차단해제하기
message PKT_CLI_TO_GS_CHAT_UNBLOCK_USER
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = CHAT_UNBLOCK_USER];
    optional int32                  var_target_team_guid    = 2;    // 차단해제할 구단 GUID
}

// 쿠폰 사용 하기 요청
message PKT_CLI_TO_GS_COUPON_USE
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = COUPON_USE];
    required bytes                  var_coupon_value        = 2; // 쿠폰 입력 값
}

// 롤링 공지 조회 요청
message PKT_CLI_TO_GS_NOTICE_ROLLING_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = NOTICE_ROLLING_INFO];
}

// Platform ID 로 구단 정보 조회 요청
message PKT_CLI_TO_GS_PLATFORM_FIND_TEAM
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = PLATFORM_FIND_TEAM];

    required bytes                  var_platform_id         = 2; // Platform ID
}

// 인앱 정액제 아이템 보너스 아이템 수령 요청
message PKT_CLI_TO_GS_INAPP_PERIOD_ITEM_BONUS_GET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = INAPP_PERIOD_ITEM_BONUS_GET];

    repeated int32                  var_inapp_item_id       = 2; // 인앱 상품 id
}

// 팀 기본 정보 요청
message PKT_CLI_TO_GS_TEAM_INFO_ONLY_GET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TEAM_INFO_ONLY_GET];

    repeated int32                  var_team_guid_list      = 2; // TeamGuid 리스트
}

// XIGNCODE 검증 요청
message PKT_CLI_TO_GS_XIGNCODE_VERIFY
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = XIGNCODE_VERIFY];

    required bytes                  var_cookie              = 2; // XignCode 쿠키값
}

// 선수카드 상세 정보 요청
message PKT_CLI_TO_GS_PLAYER_CARD_INFO_DETAIL
{
    optional PROTOID.CLI_TO_GS.ID   id						= 1 [default = PLAYER_CARD_INFO_DETAIL];
	required int32					var_team_guid			= 2; // 팀 GUID
	required int32                  var_player_card_id		= 3; // 선수카드 ID
	required bool					var_is_batter			= 4; // 야수, 투수 구분
}

// 챌린지 미니게임 정보 조회 요청
message PKT_CLI_TO_GS_CHALLENGE_MINI_GAME_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id						= 1 [default = CHALLENGE_MINI_GAME_INFO];
}

// 챌린지 미니게임 플레이 시작 설정 요청
message PKT_CLI_TO_GS_CHALLENGE_MINI_GAME_START
{
    optional PROTOID.CLI_TO_GS.ID   id						= 1 [default = CHALLENGE_MINI_GAME_START];

    required int32                  var_mini_game_id        = 2; // 미니게임 ID
    required int32                  var_difficulty          = 3; // 난이도
}

// 챌린지 미니게임 플레이 결과 설정 요청
message PKT_CLI_TO_GS_CHALLENGE_MINI_GAME_RESULT
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = CHALLENGE_MINI_GAME_RESULT];

    required bytes                  var_verify_data         = 2; // 확인 데이터
    repeated int32                  var_result_values       = 3; // 미니게임 결과 값 목록 (항목 값: 0:실패, 0<:성공)
}

// 매니저 룩 변경 요청
message PKT_CLI_TO_GS_CHANGE_SECRETARY_LOOK
{
	optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = CHANGE_SECRETARY_LOOK];
	required int32					var_inapp_item_id		= 2 [default = -1]; // 룩 적용 할 매니저 인앱 상품 ID( 기본 정장룩일 경우 -1 입력. )
}

// 인스턴트 이벤트: 홈런 레이스 진행 요청
message PKT_CLI_TO_GS_INSTANT_HOMERUNRACE_EVENT_PROGRESS_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = INSTANT_HOMERUNRACE_EVENT_PROGRESS];
}

// 인스턴트 이벤트: 홈런 레이스 베팅 요청
message PKT_CLI_TO_GS_INSTANT_HOMERUNRACE_EVENT_BETTING
{
    optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = INSTANT_HOMERUNRACE_EVENT_BETTING];
    required int32                      var_event_id        = 2; // 이벤트 고유ID
    required int32                      var_try_step        = 3; // 도전 스탭
}

// 인스턴트 이벤트 : 위닝볼 마일리지 이벤트 - 진행 정보 요청
message PKT_CLI_TO_GS_INSTANT_WINNING_BALL_MILEAGE_EVENT_PROGRESS
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = INSTANT_WINNING_BALL_MILEAGE_EVENT_PROGRESS];
}

// 인스턴트 이벤트 : 위닝볼 마일리지 이벤트 - 상품 받기 요청
message PKT_CLI_TO_GS_INSTANT_WINNING_BALL_MILEAGE_EVENT_GET_GOODS
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = INSTANT_WINNING_BALL_MILEAGE_EVENT_GET_GOODS];
	required int32                      var_event_id        = 2; // 이벤트 고유ID
}

// 인스턴트 이벤트 : 위닝볼 마일리지 이벤트 - 랭킹 정보 요청
message PKT_CLI_TO_GS_INSTANT_WINNING_BALL_MILEAGE_EVENT_RANKING
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = INSTANT_WINNING_BALL_MILEAGE_EVENT_RANKING];
	required int32                      var_event_id        = 2; // 이벤트 고유ID
}

// 인스턴트 이벤트 : 전설의 삼진왕 이벤트 - 진행 정보 요청
message PKT_CLI_TO_GS_INSTANT_STRIKEOUT_EVENT_PROGRESS
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = INSTANT_STRIKEOUT_EVENT_PROGRESS];
}

// 인스턴트 이벤트 : 전설의 삼진왕 이벤트 - 상품 받기 요청
message PKT_CLI_TO_GS_INSTANT_STRIKEOUT_EVENT_GET_GOODS
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = INSTANT_STRIKEOUT_EVENT_GET_GOODS];
	required int32                      var_event_id        = 2; // 이벤트 고유ID
}

// 인스턴트 이벤트 : 전설의 삼진왕 이벤트 - 랭킹 정보 요청
message PKT_CLI_TO_GS_INSTANT_STRIKEOUT_EVENT_RANKING
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = INSTANT_STRIKEOUT_EVENT_RANKING];
	required int32                      var_event_id        = 2; // 이벤트 고유ID
}

// 인스턴트 이벤트 : 전설의 삼진왕 이벤트 - 삼진아웃 게임 참여요청
message PKT_CLI_TO_GS_INSTANT_STRIKEOUT_EVENT_GAME
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = INSTANT_STRIKEOUT_EVENT_GAME];
	required int32                      var_event_id        = 2; // 이벤트 고유ID
    required int32                      var_pitch_id        = 3; // 구종ID (1~4)
}

// 인스턴트 이벤트 : 전설의 홈런왕 이벤트 - 진행 정보 요청
message PKT_CLI_TO_GS_INSTANT_HOMERUNKING_EVENT_PROGRESS
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = INSTANT_HOMERUNKING_EVENT_PROGRESS];
}

// 인스턴트 이벤트 : 전설의 홈런왕 이벤트 - 상품 받기 요청
message PKT_CLI_TO_GS_INSTANT_HOMERUNKING_EVENT_GET_GOODS
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = INSTANT_HOMERUNKING_EVENT_GET_GOODS];
	required int32                      var_event_id        = 2; // 이벤트 고유ID
}

// 인스턴트 이벤트 : 전설의 홈런왕 이벤트 - 랭킹 정보 요청
message PKT_CLI_TO_GS_INSTANT_HOMERUNKING_EVENT_RANKING
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = INSTANT_HOMERUNKING_EVENT_RANKING];
	required int32                      var_event_id        = 2; // 이벤트 고유ID
}

// 인스턴트 이벤트 : 전설의 홈런왕 이벤트 - 홈런레이스 게임 참여요청
message PKT_CLI_TO_GS_INSTANT_HOMERUNKING_EVENT_GAME
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = INSTANT_HOMERUNKING_EVENT_GAME];
	required int32                      var_event_id        = 2; // 이벤트 고유ID
    optional int32                      var_game_try_count  = 3; // 게임 시도 횟수
}
// 이벤트샵 : 이벤트샵 정보 요청
message PKT_CLI_TO_GS_EVENT_SHOP_INFO
{
    optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = EVENT_SHOP_INFO];
}

// 유학 시스템 : 유학 전반적인 정보
message PKT_CLI_TO_GS_STUDY_ABROAD_OVERALL
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = STUDY_ABROAD_OVERALL];
}

// 유학 시스템 : 유학 대륙 정보
message PKT_CLI_TO_GS_SYNC_STUDY_ABROAD_CONTINENT
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = SYNC_STUDY_ABROAD_CONTINENT];
}

// 유학 시스템 : 유학 선수 정보
message PKT_CLI_TO_GS_SYNC_STUDY_ABROAD_PLAYER
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = SYNC_STUDY_ABROAD_PLAYER];
	required int32						var_slot_id			= 2; // 유학 슬롯 ID
}

// 유학 시스템 : 유학 슬롯 즉시 오픈
message PKT_CLI_TO_GS_UNLOCK_STUDY_ABROAD_SLOT
{
	optional PROTOID.CLI_TO_GS.ID       id                  = 1 [default = UNLOCK_STUDY_ABROAD_SLOT];
	required int32						var_slot_id			= 2; // 유학 슬롯 ID
}

// 유학 시스템 : 선수 유학 보내기
message PKT_CLI_TO_GS_SEND_STUDY_ABROAD_PLAYER
{
	optional PROTOID.CLI_TO_GS.ID       id								= 1 [default = SEND_STUDY_ABROAD_PLAYER];
	required int32						var_slot_id						= 2; // 유학 슬롯 ID
	required int32						var_center_id					= 3; // 유학지 ID
	required int32						var_player_card_id				= 4; // 선수카드 ID
	optional bool						var_is_use_first_string_ticket	= 5 [default = false]; // 1군 등록 가능 티켓 사용 여부
	optional bool						var_is_use_excellent_ticket		= 6 [default = false]; // 명인 등장 티켓 사용 여부
}

// 유학 시스템 : 선수 유학 종료
message PKT_CLI_TO_GS_COMPLETE_STUDY_ABROAD_PLAYER
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = COMPLETE_STUDY_ABROAD_PLAYER];
	required int32						var_slot_id				= 2; // 유학 슬롯 ID
}

// 유학 시스템 : 선수 유학 조기 종료
message PKT_CLI_TO_GS_EARLY_COMPLETE_STUDY_ABROAD_PLAYER
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = EARLY_COMPLETE_STUDY_ABROAD_PLAYER];
	required int32						var_slot_id				= 2; // 유학 슬롯 ID
}

// 유학 시스템 : 선수 유학 취소
message PKT_CLI_TO_GS_CANCEL_STUDY_ABROAD_PLAYER
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CANCEL_STUDY_ABROAD_PLAYER];
	required int32						var_slot_id				= 2; // 유학 슬롯 ID
}

// 유학 시스템 : 선수 유학 훈련 선택
message PKT_CLI_TO_GS_SELECT_STUDY_ABROAD_PLAYER_TRAINING
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SELECT_STUDY_ABROAD_PLAYER_TRAINING];
	required int32						var_slot_id				= 2; // 유학 슬롯 ID
	required int32						var_training_id			= 3; // 훈련 ID
}

// 유학 시스템 : 선수 피로도 회복
message PKT_CLI_TO_GS_RECOVERY_STUDY_ABROAD_PLAYER_FATIGUE
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = RECOVERY_STUDY_ABROAD_PLAYER_FATIGUE];
	required int32						var_slot_id				= 2; // 유학 슬롯 ID
}

// 유학 시스템 : 유학 완전 종료( 선수 능력치 선택 )
message PKT_CLI_TO_GS_SELECT_STUDY_ABROAD_PLAYER_ABILITY
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SELECT_STUDY_ABROAD_PLAYER_ABILITY];
	required int32						var_slot_id				= 2; // 유학 슬롯 ID
	required bool						var_is_refresh_ability	= 3; // 새로이 얻은 능력치를 선택할것인가
	optional int32						var_ability_id			= 4 [default = 0]; // 선택 할 능력치 ID
}

// 유학 시스템 : 선수 유학 즉시 종료
message PKT_CLI_TO_GS_IMMEDIATELY_COMPLETE_STUDY_ABROAD_PLAYER
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = IMMEDIATELY_COMPLETE_STUDY_ABROAD_PLAYER];
	required int32						var_slot_id				= 2; // 유학 슬롯 ID
}

// 위시 리스트 : 목록 받기
message PKT_CLI_TO_GS_SELECT_WISH_PLAYER_CARD_LIST
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SELECT_WISH_PLAYER_CARD_LIST];
}

// 위시 리스트 : 위시카드 등록/해제
message PKT_CLI_TO_GS_UPDATE_WISH_PLAYER_CARD_LIST
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = UPDATE_WISH_PLAYER_CARD_LIST];
	repeated int32                      var_player_card_id_list	= 2; //등록또는 해제하려고 했던 카드
	required bool						var_is_insert			= 3; // 위시카드 등록/해제
}

// 예측 : 승수 예측 설정
message PKT_CLI_TO_GS_BETTING_ROUND_SEASON_REWARD_GET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = BETTING_ROUND_SEASON_REWARD_GET];
}

// 은퇴 시스템 : 은퇴 신청 사전정보
message PKT_CLI_TO_GS_TEAM_CARD_RETIRE_INFO
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = TEAM_CARD_RETIRE_INFO];
	required int32						var_team_card_id		= 2; //은퇴대상 카드 id
}

// 은퇴 시스템 : 은퇴 신청
message PKT_CLI_TO_GS_TEAM_CARD_RETIRE
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = TEAM_CARD_RETIRE];
	required int32						var_team_card_id		= 2; //은퇴대상 카드 id
	required int32						var_retire_id			= 3; //크레마 테이블(player -> retire)상의 보상대상 id
}

// 랭킹전: 랭킹전 정보 조회 요청
message PKT_CLI_TO_GS_RANKING_MODE_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = RANKING_MODE_INFO];
}

// 랭킹전: 상대 찾기 요청
message PKT_CLI_TO_GS_RANKING_MODE_OPPENENT_FIND
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = RANKING_MODE_OPPENENT_FIND];

    required int32                  var_ranking_mode_season_id      = 2; // 랭킹전 시즌 ID
}

// 랭킹전: 사용한 방침 조회 요청
message PKT_CLI_TO_GS_RANKING_MODE_USED_TACTICS_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = RANKING_MODE_USED_TACTICS_LIST];
}

// 랭킹전: 경기 시작 요청
message PKT_CLI_TO_GS_RANKING_MODE_GAME_START
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = RANKING_MODE_GAME_START];

    required int32                  var_ranking_mode_season_id      = 2; // 랭킹전 시즌 ID
    required int32                  var_game_id                     = 3; // 게임 ID
    required int32                  var_friendly_tactics_id         = 4; // 작전 방침 ID
    repeated int32                  var_game_predict_id_list        = 5; // 선택한 경기 예측 ID 목록
}

// 랭킹전: 경기 결과 확인 설정 요청
message PKT_CLI_TO_GS_RANKING_MODE_GAME_RESULT_CHECK
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = RANKING_MODE_GAME_RESULT_CHECK];

    required int32                  var_ranking_mode_season_id      = 2; // 랭킹전 시즌 ID
    required int32                  var_game_id                     = 3; // 게임 ID
}

// 랭킹전: 시즌 종료 보상 요청
message PKT_CLI_TO_GS_RANKING_MODE_SEASON_END_REWARD
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = RANKING_MODE_SEASON_END_REWARD];

    required int32                  var_ranking_mode_season_id      = 2; // 랭킹전 시즌 ID
}

// 랭킹전: 순위 목록 조회 요청
message PKT_CLI_TO_GS_RANKING_MODE_RANK_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = RANKING_MODE_RANK_LIST];

    required int32                  var_ranking_mode_season_id      = 2; // 랭킹전 시즌 ID
    optional int32                  var_team_group                  = 3; // 구단 그룹 ID (Crema TeamInfo_Table::TeamGroup 값 설정) (0: 전체)
    optional int32                  var_top_count                   = 4 [default = 100]; // 순위 최대 개수 (최대 100 개)
}

// 랭킹전: 이전 기록 조회 요청
message PKT_CLI_TO_GS_RANKING_MODE_HISTORY
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = RANKING_MODE_HISTORY];

    required int32                  var_ranking_mode_season_id      = 2; // 랭킹전 시즌 ID
}

// 챌린지 정보 요청
message PKT_CLI_TO_GS_CHALLENGE_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = CHALLENGE_INFO];
}

// 팀 정보 변경 요청
message PKT_CLI_TO_GS_CHANGE_TEAM_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id						            = 1 [default = CHANGE_TEAM_INFO];
    required H3Enum.eChangeTeamInfoType     var_change_type             = 2;
    optional bytes                          var_change_value_team_name  = 3;
    optional int32                          var_change_value_fav_team_id = 4;
    optional int32                          var_change_value_emblem_id  = 5;
}

// 선수카드 : 컨디션 회복 요청
message PKT_CLI_TO_GS_PLAYER_CARD_CONDITION_RECOVERY_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = PLAYER_CARD_CONDITION_RECOVERY_SET];

    required int32                  var_team_card_id        = 2; // 선수카드 DB ID
    required int32                  var_inventory_item_id   = 3; // 인벤토리 아이템 ID
}

// 서버 타임 요청
message PKT_CLI_TO_GS_SERVER_TIME_GET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = SERVER_TIME_GET];
}

// 교정 : 교정훈련장 상태 전달
message PKT_CLI_TO_GS_CORRECT_INFO
{
	optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = CORRECT_INFO];
}

// 교정 : 교정훈련 시작
message PKT_CLI_TO_GS_CORRECT_BEGIN
{
	optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = CORRECT_BEGIN];
	optional int32					var_correct_id			= 2;	//교정하는 교정장 번호
	optional int32					var_team_card_id        = 3;	//교정 대상 id
	optional int32					var_instructor_id		= 4;	//인스트럭터 id
	optional int32					var_source_ability		= 5;	//교정할 능력치
	optional int32					var_destination_ability = 6;	//교정될 능력치
}

// 교정 : 교정훈련 종료
message PKT_CLI_TO_GS_CORRECT_END
{
	optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = CORRECT_END];
	optional int32					var_correct_id			= 2;	//교정하는 교정장 번호
	optional int32					var_end_type			= 3;	// 0 : 완료종료, 1 : 빠른종료
	optional int32					var_instructor_id		= 4;	//인스트럭터 id
}

// 교정 : 교정훈련 종료 후 스탯 선택
message PKT_CLI_TO_GS_CORRECT_END_SELECT_STAT
{
	optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = CORRECT_END_SELECT_STAT];
	required int32					var_correct_id			= 2;	// 교정장 번호
	required bool					var_is_select_exist_stat							= 3; // 기존 스탯을 선택할 것인가?
	optional bool					var_is_select_exist_stat_use_currency				= 4 [default = false]; // 기존 스탯 선택 시 재화를 사용할 것인가?
}

// 교정 : 교정훈련 취소
message PKT_CLI_TO_GS_CORRECT_CANCEL
{
	optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = CORRECT_CANCEL];
	optional int32					var_correct_id			= 2;	//교정하는 교정장 번호
}

// 교정 : 교정훈련 초기화
message PKT_CLI_TO_GS_CORRECT_RESET
{
	optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = CORRECT_RESET];
	optional int32					var_team_card_id        = 2;	//교정 대상 id
	optional int32					var_reset_type          = 3; // 0 : 전체리셋,  1 : 횟수만 리셋
}

// 기능성 카드 : 카드 판매
message PKT_CLI_TO_GS_FUNCTIONAL_CARD_SELL
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = FUNCTIONAL_CARD_SELL];
    optional int32                  var_functional_card_id  = 2; // 판매할 기능성 카드 ID
    optional int32                  var_count               = 3; // 판매 수량
}

// [이사회] : 팀 정보 내 이사회 정보 갱신
message PKT_CLI_TO_GS_SYNC_TEAM_GUILD_DATA
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SYNC_TEAM_GUILD_DATA];
}

// [이사회] : 이사회 전체 리스트 조회
message PKT_CLI_TO_GS_SHOW_GUILD_FULL_LIST
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SHOW_GUILD_FULL_LIST];
}

// [이사회] : 나의 이사회 정보 조회
message PKT_CLI_TO_GS_SHOW_GUILD_OWN
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SHOW_GUILD_OWN];
}

// [이사회] : 타 이사회 정보 조회
message PKT_CLI_TO_GS_SHOW_GUILD_OTHER
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SHOW_GUILD_OTHER];
	required int32						var_guild_id			= 2; // 타 이사회 ID
}

// [이사회] : 이사회 멤버 리스트 조회
message PKT_CLI_TO_GS_SHOW_GUILD_MEMBER_LIST
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SHOW_GUILD_MEMBER_LIST];
	required int32						var_guild_id			= 2; // 이사회 ID
}

// [이사회] : 이사회 이름 검색
message PKT_CLI_TO_GS_FIND_GUILD
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = FIND_GUILD];
	required bytes						var_guild_name			= 2; // 타 이사회 명
}

// [이사회] : 이사회 생성
message PKT_CLI_TO_GS_CREATE_GUILD
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CREATE_GUILD];
	required bytes						var_guild_name			= 2; // 이사회 명
	required int32						var_emblem_id			= 3; // 크레마 테이블의 엠블렘 ID
	required bool						var_is_auto_join		= 4; // 자동 가입 가부
}

// [이사회] : 이사회 해체
message PKT_CLI_TO_GS_DESTROY_GUILD
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = DESTROY_GUILD];
}

// [이사회] : 이사회 관련 설정 - 엠블렘
message PKT_CLI_TO_GS_CONFIGURE_GUILD_EMBLEM
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CONFIGURE_GUILD_EMBLEM];
	required int32						var_emblem_id			= 2; // 크레마 테이블의 엠블렘 ID
}

// [이사회] : 이사회 관련 설정 - 연고지
message PKT_CLI_TO_GS_CONFIGURE_GUILD_HOMETOWN
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CONFIGURE_GUILD_HOMETOWN];
	required int32						var_home_town_id		= 2; // 크레마 테이블의 연고지 ID
}

// [이사회] : 이사회 관련 설정 - 가입 방식
message PKT_CLI_TO_GS_CONFIGURE_GUILD_JOIN_SYSTEM
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CONFIGURE_GUILD_JOIN_SYSTEM];
	required bool						var_is_auto_join		= 2; // 자동 가입 가부
}

// [이사회] : 이사회 관련 설정 - 공지
message PKT_CLI_TO_GS_CONFIGURE_GUILD_NOTICE
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CONFIGURE_GUILD_NOTICE];
	required bytes						var_notice				= 2; // 공지 내용
}

// [이사회] : 이사회 관련 설정 - 소개
message PKT_CLI_TO_GS_CONFIGURE_GUILD_INTRODUCTION
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CONFIGURE_GUILD_INTRODUCTION];
	required bytes						var_introduction		= 2; // 소개 내용
}

// [이사회] : 이사회 멤버 관련 설정 - 승격
message PKT_CLI_TO_GS_CONFIGURE_GUILD_MEMBER_ELEVATE
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CONFIGURE_GUILD_MEMBER_ELEVATE];
	required int32						var_member_team_id		= 2; // 승격할 멤버의 팀 ID
}

// [이사회] : 이사회 멤버 관련 설정 - 강등
message PKT_CLI_TO_GS_CONFIGURE_GUILD_MEMBER_DEMOTE
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CONFIGURE_GUILD_MEMBER_DEMOTE];
	required int32						var_member_team_id		= 2; // 강등할 멤버의 팀 ID
}

// [이사회] : 이사회 멤버 관련 설정 - 추방
message PKT_CLI_TO_GS_CONFIGURE_GUILD_MEMBER_KICK
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CONFIGURE_GUILD_MEMBER_KICK];
	required int32						var_member_team_id		= 2; // 추방할 멤버의 팀 ID
}

// [이사회] : 이사회 멤버 관련 설정 - 가입 승인
message PKT_CLI_TO_GS_CONFIGURE_GUILD_MEMBER_JOIN_PERMIT
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CONFIGURE_GUILD_MEMBER_JOIN_PERMIT];
	required int32						var_reserve_member_team_id	= 2; // 가입을 승인할 멤버의 팀 ID
}

// [이사회] : 이사회 멤버 관련 설정 - 가입 거부
message PKT_CLI_TO_GS_CONFIGURE_GUILD_MEMBER_JOIN_REJECT
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CONFIGURE_GUILD_MEMBER_JOIN_REJECT];
	required int32						var_reserve_member_team_id	= 2; // 가입을 거부할 멤버의 팀 ID
}

// [이사회] : 이사회 가입
message PKT_CLI_TO_GS_JOIN_GUILD
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = JOIN_GUILD];
	required int32						var_guild_id			= 2; // 가입 신청 할 이사회 ID
}

// [이사회] : 이사회 가입 취소
message PKT_CLI_TO_GS_CANCEL_JOIN_GUILD
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CANCEL_JOIN_GUILD];
	required int32						var_guild_id			= 2; // 가입 취소 할 이사회 ID
}

// [이사회] : 이사회 탈퇴
message PKT_CLI_TO_GS_LEAVE_GUILD
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = LEAVE_GUILD];
}

// [이사회] : 이사회 출석 체크
message PKT_CLI_TO_GS_CHECK_GUILD_DAILY_LOGIN
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CHECK_GUILD_DAILY_LOGIN];
}

// [이사회] : 이사회 상점 정보
message PKT_CLI_TO_GS_SHOW_GUILD_SHOP
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SHOW_GUILD_SHOP];
}

// [이사회] : 이사회 상점 구매
message PKT_CLI_TO_GS_PURCHASE_GUILD_SHOP
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = PURCHASE_GUILD_SHOP];
	required int32						var_shop_index			= 2; // 서버에서 보내온 상점 인덱스
	required int32						var_shop_slot_id		= 3; // 구매할 상품의 슬롯 ID
	required int32						var_amount				= 4; // 구매 개수
}

// [이사회] : 이사회 이름 중복 체크
message PKT_CLI_TO_GS_CHECK_DUPLICATE_GUILD_NAME
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CHECK_DUPLICATE_GUILD_NAME];
	required bytes						var_guild_name			= 2; // 중복 체크 할 이사회 명
}

// [이사회] : 이사회 가입 승인 대기 유저 리스트 조회
message PKT_CLI_TO_GS_SHOW_GUILD_JOIN_RESERVE_MEMBER_LIST
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SHOW_GUILD_JOIN_RESERVE_MEMBER_LIST];
}

// KBO 예측: 예측 정보 조회 요청
message PKT_CLI_TO_GS_KBO_BETTING_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = KBO_BETTING_INFO];
}

// KBO 예측: 경기 일정 정보 조회 요청
message PKT_CLI_TO_GS_KBO_BETTING_GAME_SCHEDULE_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = KBO_BETTING_GAME_SCHEDULE_INFO];

    required Struct.TimeStamp       var_date                                = 2; // 조회 날짜
}

// KBO 예측: 경기 세부 정보 조회 요청
message PKT_CLI_TO_GS_KBO_BETTING_GAME_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = KBO_BETTING_GAME_INFO];

    required int32                  var_kbo_betting_season_id               = 2; // KBO 예측 시즌 ID
    required Struct.TimeStamp       var_date                                = 3; // 조회 날짜
    required bytes                  var_gmkey                               = 4; // GMKEY
}

// KBO 예측: 경기 예측 설정 요청
message PKT_CLI_TO_GS_KBO_BETTING_SETTING
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = KBO_BETTING_SETTING];

    required int32                          var_kbo_betting_season_id       = 2; // KBO 예측 시즌 ID
    required Struct.TimeStamp               var_date                        = 3; // 조회 날짜
    required bytes                          var_gmkey                       = 4; // GMKEY
    required Struct.KboBettingSettingInfo   var_betting_setting_info        = 5; // 예측 설정 정보
}

// KBO 예측: 경기 예측 결과 확인 설정 요청
message PKT_CLI_TO_GS_KBO_BETTING_RESULT_CHECK
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = KBO_BETTING_RESULT_CHECK];

    required int32                  var_kbo_betting_season_id               = 2; // KBO 예측 시즌 ID
    required Struct.TimeStamp       var_date                                = 3; // 조회 날짜
}

// KBO 예측: KBO 포인트 충전 요청
message PKT_CLI_TO_GS_KBO_BETTING_KBO_POINT_BUY
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = KBO_BETTING_KBO_POINT_BUY];

    required int32                  var_kbo_betting_season_id               = 2; // KBO 예측 시즌 ID
}

// KBO 예측: 순위 목록 조회 요청
message PKT_CLI_TO_GS_KBO_BETTING_RANK_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = KBO_BETTING_RANK_LIST];

    required int32                  var_kbo_betting_season_id               = 2; // 랭킹전 시즌 ID
    optional int32                  var_top_count                           = 3 [default = 100]; // 순위 최대 개수 (최대 100 개)
}

// KBO 예측: 상품 구매 요청
message PKT_CLI_TO_GS_KBO_BETTING_SHOP_BUY
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = KBO_BETTING_SHOP_BUY];

    required int32                  var_kbo_betting_season_id               = 2; // KBO 예측 시즌 ID
    required int32                  var_kbo_shop_id                         = 3; // 구매 상품 KBO Shop ID (크레마 테이블 KBOShop::ID)
    required int32                  var_count                               = 4; // 구매 상품 수량
}

// KBO 예측: KBO 예측 시즌 종료 보상 받기 요청
message PKT_CLI_TO_GS_KBO_BETTING_SEASON_END_REWARD
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = KBO_BETTING_SEASON_END_REWARD];

    required int32                  var_kbo_betting_season_id               = 2; // KBO 예측 시즌 ID
}

// KBO 예측: KBO 순위 목록 조회 요청
message PKT_CLI_TO_GS_KBO_BETTING_KBO_RANK_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = KBO_BETTING_KBO_RANK_LIST];
}

// KBO 예측: KBO 예상 라인업 정보 조회 요청
message PKT_CLI_TO_GS_KBO_BETTING_KBO_LINEUP_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = KBO_BETTING_KBO_LINEUP_INFO];

    required Struct.TimeStamp       var_date                                = 2; // 조회 날짜
    required bytes                  var_gmkey                               = 3; // GMKEY
}

// 랭킹전: 역대 1위 기록 조회 요청
message PKT_CLI_TO_GS_RANKING_MODE_RANK_TOP_HISTORY
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = RANKING_MODE_RANK_TOP_HISTORY];

    optional int32                  var_team_group                  = 2; // 구단 그룹 ID (Crema TeamInfo_Table::TeamGroup 값 설정) (0: 전체)
}

// EX 훈련 계승
message PKT_CLI_TO_GS_EX_TRAINING_TRANSFER
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = EX_TRAINING_TRANSFER];

    optional int32				    var_source_team_card_id		    = 2; // 부모 카드 id
    optional int32				    var_destination_team_card_id	= 3; // 자식 카드 id
    optional int32                  var_ex_training_count           = 4; // 훈련 계승시 넘어가는 ex의 갯수
    optional int32                  var_charge_type                 = 5; // 훈련 계승시 지불되는 재화의 종류 0: 훈련계승권, 1:gamemoney
}

// 유저캐어 이벤트 : 상세정보 요청하기
message PKT_CLI_TO_GS_USERCARE_DETAIL_INFO
{
	optional PROTOID.CLI_TO_GS.ID   id								= 1 [default = USERCARE_DETAIL_INFO];
}

// 유저캐어 이벤트 : 출석 보상 받기
message PKT_CLI_TO_GS_USERCARE_REWARD_ATTENDANCE
{
	optional PROTOID.CLI_TO_GS.ID   id								= 1 [default = USERCARE_REWARD_ATTENDANCE];
	required int32					var_event_id					= 2; // 이벤트 ID
	required int32					var_reward_attendance_day		= 3; // 보상 받을 출석일
}

// 유저캐어 이벤트 : 튜토리얼 보상 받기
message PKT_CLI_TO_GS_USERCARE_REWARD_TUTORIAL
{
	optional PROTOID.CLI_TO_GS.ID   id								= 1 [default = USERCARE_REWARD_TUTORIAL];
	required int32					var_event_id					= 2; // 이벤트 ID
}

// [이사회 연고지 쟁탈전] : 소속 이사회의 연고지 쟁탈전 전반적인 정보
message PKT_CLI_TO_GS_SHOW_GUILD_LEAGUE_OVERALL_DATA
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SHOW_GUILD_LEAGUE_OVERALL_DATA];
}

// [이사회 연고지 쟁탈전] : 소속 이사회의 연고지 쟁탈전 참가 신청
message PKT_CLI_TO_GS_REQUEST_GUILD_LEAGUE_PARTICIPATION
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = REQUEST_GUILD_LEAGUE_PARTICIPATION];
	required int32						var_area_id				= 2; // 참가할 지역 ID
}

// [이사회 연고지 쟁탈전] : 경기를 진행 할 상대 이사회 선택하여 경기 진행 준비
message PKT_CLI_TO_GS_RESERVE_PLAY_GUILD_LEAGUE_TEAM_MATCHUP
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = RESERVE_PLAY_GUILD_LEAGUE_TEAM_MATCHUP];
	required int32						var_matchup_guild_id	= 2; // 도전할 상대 이사회 ID
	required int32						var_hometown_id			= 3; // 도전할 연고지 ID
}

// [이사회 연고지 쟁탈전] : 상대 이사회 소속 구단을 선택하여 경기 진행
message PKT_CLI_TO_GS_PLAY_GUILD_LEAGUE_TEAM_MATCHUP
{
	optional PROTOID.CLI_TO_GS.ID       id							= 1 [default = PLAY_GUILD_LEAGUE_TEAM_MATCHUP];
	required int32						var_hometown_id				= 2; // 도전할 연고지 ID
	required int32						var_matchup_team_id			= 3; // 도전할 상대 구단 ID
	optional int32						var_tactics_card_item_guid	= 4 [default = 0]; // 작전방침을 사용한다면 해당 아이템의 GUID
}

// [이사회 연고지 쟁탈전] : 전체 이사회의 연고지 쟁탈전 시즌 기록
message PKT_CLI_TO_GS_SHOW_GUILD_LEAGUE_TOTAL_LEAGUE_RECORDS
{
	optional PROTOID.CLI_TO_GS.ID       	id						= 1 [default = SHOW_GUILD_LEAGUE_TOTAL_LEAGUE_RECORDS];
	required int32							var_area_id				= 2; // 지역 ID
	required H3Enum.eGuildLeagueRecordsType	var_records_type		= 3; // 전적 기록 타입
}

// [이사회 연고지 쟁탈전] : 연고지 쟁탈전 결과에 따른 보상 정보( 주단위 연고지 점령, 주단위 랭킹, 시즌단위 랭킹 )
message PKT_CLI_TO_GS_REWARD_GUILD_LEAGUE_CLOSING
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = REWARD_GUILD_LEAGUE_CLOSING];
}

// 레전드 영입: 레전드 영입 정보 조회 요청
message PKT_CLI_TO_GS_LEGEND_PLAYER_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = LEGEND_PLAYER_INFO];
}

// 레전드 영입: 대표 선수 설정 요청
//message PKT_CLI_TO_GS_LEGEND_PLAYER_FAVORITE_SET
//{
//    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = LEGEND_PLAYER_FAVORITE_SET];
//
//    required int32                  var_player_card_id                      = 2; // 레전드 선수카드 ID
//    required int32                  var_theme_slot                          = 3; // 테마 슬롯 번호 (1부터 시작)
//    required int32                  var_material_slot                       = 4; // 재료 슬롯 번호 (1부터 시작)
//    required int32                  var_favorite_player_card_id             = 5; // 대표 선수로 설정할 선수카드 ID
//}

// 레전드 영입: 재료 선수카드 등록 요청
message PKT_CLI_TO_GS_LEGEND_PLAYER_MATERIAL_SET
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = LEGEND_PLAYER_MATERIAL_SET];

    required int32                  var_player_card_id                      = 2; // 레전드 선수카드 ID
    required int32                  var_theme_slot                          = 3; // 테마 슬롯 번호 (1부터 시작)
    required int32                  var_material_slot                       = 4; // 재료 슬롯 번호 (1부터 시작)
    required int32                  var_material_team_card_id               = 5; // 재료로 등록할 구단 선수카드 ID
}

// 레전드 영입: 레전드 선수카드 획득 요청
message PKT_CLI_TO_GS_LEGEND_PLAYER_GET
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = LEGEND_PLAYER_GET];

    required int32                  var_player_card_id                      = 2; // 레전드 선수카드 ID
}

// 특수능력: 특수능력 카드 생성 요청
message PKT_CLI_TO_GS_SPECIAL_ABILITY_CARD_CREATE
{
    optional PROTOID.CLI_TO_GS.ID   id                                      = 1 [default = SPECIAL_ABILITY_CARD_CREATE];
    optional bool                   var_is_retry                            = 2 [default = false];  //true : 재시도, false : 일반 합성 
    repeated int32                  var_teamcard_id_list                    = 3 [packed=true]; //카드 guid 최대 10장
}

// 선수카드: 특수능력 장착 요청
message PKT_CLI_TO_GS_PLAYER_CARD_SPECIAL_ABILITY_EQUIP
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = PLAYER_CARD_SPECIAL_ABILITY_EQUIP];

    required int32                  var_teamcard_id                         = 2; // 장착할 teamCardId 
    required int32                  var_special_ability_slot_id             = 3; // 장착할 특수능력 SlotId
    required int32                  var_special_ability_card_id             = 4; // 장착할 특수능력 카드 ID
}

// 선수카드: 특수능력 교체 및 탈착 요청
message PKT_CLI_TO_GS_PLAYER_CARD_SPECIAL_ABILITY_CHANGE
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = PLAYER_CARD_SPECIAL_ABILITY_CHANGE];

    required int32                  var_teamcard_id                         = 2; // 변경할 teamCardId 
    required int32                  var_special_ability_slot_id             = 3; // 변경할 특수능력 SlotId
    required int32                  var_special_ability_card_id             = 4; // 변경할 특수능력 카드 ID (-1 이면 해제)
    required int32                  var_release_cost_id                     = 5; // 변경 비용 선택 ID
}

// 특수능력: 특수능력 카드 강화 요청
message PKT_CLI_TO_GS_SPECIAL_ABILITY_CARD_GRADE_UP
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = SPECIAL_ABILITY_CARD_GRADE_UP];

    required int32                  var_target_teamcard_id                  = 2; // 특수능력 강화할 teamCardId
    required int32                  var_target_special_ability_slot_id      = 3; // 강화할 특수능력 SlotId
    required int32                  var_target_special_ability_card_id      = 4; // 강화할 특수능력 카드 ID
    repeated int32                  var_material_special_ability_card_list  = 5; // 재료로 사용할 특수능력 카드 ID
}

// 특수능력: 특수능력 카드 합성 요청
message PKT_CLI_TO_GS_SPECIAL_ABILITY_CARD_COMPOSE
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = SPECIAL_ABILITY_CARD_COMPOSE];

    required int32                  var_compose_guid                        = 2; // 특수능력 합성 테이블 GUID(합성 단계)
    repeated int32                  var_material_special_ability_card_list  = 3; // 재료로 사용할 특수능력 카드 ID
}

// 평가전: 평가전 정보 조회 요청
message PKT_CLI_TO_GS_TRYOUT_MATCH_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = TRYOUT_MATCH_INFO];
}

// 평가전: 경기 진행 요청
message PKT_CLI_TO_GS_TRYOUT_MATCH_GAME_PLAY
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = TRYOUT_MATCH_GAME_PLAY];

    required int32                  var_tryout_match_season_id              = 2; // 평가전 시즌 ID
    required int32                  var_opp_team_guid                       = 3; // 상대 구단 ID
    required int64                  var_game_id_revenge                     = 4; // 리벤지할 게임 ID (공격/수비 경기 목록에서 해당 게임 ID 를 지정. 리벤지가 아니면 0 지정.)
    required int32                  var_starter_pitcher_rotation_num        = 5; // 선발투수 로테이션 번호 (0 ~ 4)
    required int32                  var_opp_starter_pitcher_rotation_num    = 6; // 상대 구단 선발투수 로테이션 번호 (0 ~ 4)
    required int32                  var_tactics_id                          = 7; // 작전 방침 ID
}

// 평가전: 경기 결과 조회 요청
message PKT_CLI_TO_GS_TRYOUT_MATCH_GAME_RESULT
{
    optional PROTOID.CLI_TO_GS.ID   id						                = 1 [default = TRYOUT_MATCH_GAME_RESULT];

    required int64                  var_game_id                             = 2; // 게임 ID
}

// [전지훈련 리뉴얼] : 보너스 타입 리프레쉬
message PKT_CLI_TO_GS_REFRESH_TRAINING_CAMP_BONUS_TYPE
{
	optional PROTOID.CLI_TO_GS.ID	id										= 1 [default = REFRESH_TRAINING_CAMP_BONUS_TYPE];
	
	required int32					var_slot_id								= 2; // 보너스 타입 리프레쉬 할 슬롯 ID
}

// [전지훈련 리뉴얼] : 보너스 보상 수령
message PKT_CLI_TO_GS_REWARD_TRAINING_CAMP_BONUS
{
	optional PROTOID.CLI_TO_GS.ID	id										= 1 [default = REWARD_TRAINING_CAMP_BONUS];
	
	required int32					var_slot_id								= 2; // 보너스 보상 수령 할 슬롯 ID
}

// 평가전: 순위 목록 조회 요청
message PKT_CLI_TO_GS_TRYOUT_MATCH_RANK_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id                              = 1 [default = TRYOUT_MATCH_RANK_LIST];

    required int32                  var_tryout_match_season_id      = 2; // 평가전 시즌 ID
    required int32                  var_team_group                  = 3; // 구단 그룹 ID (Crema TeamInfo_Table::TeamGroup 값 설정) (0: 전체)
    optional int32                  var_top_count                   = 4 [default = 100]; // 순위 최대 개수 (최대 100 개)
}

// 쪽지: 쪽지함 조회
message PKT_CLI_TO_GS_MEMO_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id                              = 1 [default = MEMO_LIST];
}

// 쪽지: 읽기
message PKT_CLI_TO_GS_MEMO_READ
{
    optional PROTOID.CLI_TO_GS.ID   id                              = 1 [default = MEMO_READ];

    required int32                  var_memo_id                     = 2; // 메모ID
}

// 쪽지: 보내기
message PKT_CLI_TO_GS_MEMO_SEND
{
    optional PROTOID.CLI_TO_GS.ID   id                              = 1 [default = MEMO_SEND];

    required int32                  var_opp_team_guid               = 2; // 대상 TEAM GUID
    required bytes                  var_message                     = 3; // 쪽지 내용
}

// 쪽지: 삭제
message PKT_CLI_TO_GS_MEMO_DELETE
{
    optional PROTOID.CLI_TO_GS.ID   id                              = 1 [default = MEMO_DELETE];
    
    required H3Enum.eMemoType       var_type                        = 2; // 메모 타입 (1:보낸 쪽지, 2: 받은 쪽지)
    repeated int32                  var_memo_id_list                = 3; // 삭제할 메모 id 목록
}

// 쪽지: 차단
message PKT_CLI_TO_GS_MEMO_BLOCK
{
    optional PROTOID.CLI_TO_GS.ID   id                              = 1 [default = MEMO_BLOCK];
    
    required H3Enum.eMemoBlockAction var_action                      = 2; // 차단 액션 타입 (0: 해제, 1: 등록)
    required int32                   var_opp_team_guid               = 3; // 대상 TEAM GUID
}

// [초청 경기] 초청 경기 전반적인 정보
message PKT_CLI_TO_GS_SHOW_INVITATION_MATCH_OVERALL_DATA
{
	optional PROTOID.CLI_TO_GS.ID       	id						= 1 [default = SHOW_INVITATION_MATCH_OVERALL_DATA];
}

// [초청 경기] 상대 구단 선택하여 경기 진행 준비
message PKT_CLI_TO_GS_RESERVE_PLAY_INVITATION_MATCH_TEAM_MATCHUP
{
	optional PROTOID.CLI_TO_GS.ID       	id						= 1 [default = RESERVE_PLAY_INVITATION_MATCH_TEAM_MATCHUP];
	required int32							var_round_id			= 2; // 라운드 ID
}

// [초청 경기] 선택한 구단과 경기 진행
message PKT_CLI_TO_GS_PLAY_INVITATION_MATCH_TEAM_MATCHUP
{
	optional PROTOID.CLI_TO_GS.ID       	id							= 1 [default = PLAY_INVITATION_MATCH_TEAM_MATCHUP];
	required H3Enum.eDifficultyLevel		var_difficulty_level		= 2; // 난이도
	optional int32							var_tactics_card_item_guid	= 3 [default = 0]; // 작전방침을 사용한다면 해당 아이템의 GUID
}

// 챌린지 내부 컨텐츠에 대한 기본적인 정보
message PKT_CLI_TO_GS_SHOW_CHALLENGE_CATEGORY_BASIC_DATA
{
	optional PROTOID.CLI_TO_GS.ID       	id							= 1 [default = SHOW_CHALLENGE_CATEGORY_BASIC_DATA];
}

// [선수 컬렉션] 선수카드 컬렉션 정보
message PKT_CLI_TO_GS_INSTANT_PLAYER_CARD_COLLECTION_INFO
{
    optional PROTOID.CLI_TO_GS.ID           id                      = 1 [default = INSTANT_PLAYER_CARD_COLLECTION_INFO];
  	required int32                          var_event_id            = 2; // 이벤트 고유ID
}

// [선수 컬렉션] 선수카드 등록 및 보상 지급
message PKT_CLI_TO_GS_INSTANT_PLAYER_CARD_COLLECTION_SET
{
	optional PROTOID.CLI_TO_GS.ID           id                      = 1 [default = INSTANT_PLAYER_CARD_COLLECTION_SET];
  	required int32                          var_event_id            = 2; // 이벤트 고유ID
    required int32                          var_mission_id          = 3; // 미션 ID
    required int32                          var_slot_id             = 4; // 슬롯 ID
    required int32                          var_teamcard_id         = 5; // 선수카드 ID
}

// 타구단 정보 멀티 검색 요청
message PKT_CLI_TO_GS_OPPENENT_TEAM_INFO_MULTI_FIND
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = OPPENENT_TEAM_INFO_MULTI_FIND];
    repeated int32                  var_team_guid_list  = 2; // 팀 guid 리스트
}

// [선수 카드] 선수 카드 변환( ex. 클래식 카드.. )
message PKT_CLI_TO_GS_TRANSFORM_PLAYER_CARD
{
	optional PROTOID.CLI_TO_GS.ID			id											= 1 [default = TRANSFORM_PLAYER_CARD];
	required int32							var_base_player_team_card_id				= 2; // 변환 대상 선수 팀 카드 ID
	repeated int32							var_material_player_team_card_id_list		= 3; // 변환 재료 선수 팀 카드 ID 리스트
}

// 앨범 선수의 혼 레벨 업 요청
message PKT_CLI_TO_GS_TEAM_CARD_ALBUM_LEVEL_UP_USE_SOUL
{
    optional PROTOID.CLI_TO_GS.ID   id					= 1 [default = TEAM_CARD_ALBUM_LEVEL_UP_USE_SOUL];

    required int32                  var_player_card_id	= 2; // 플레이어 카드 guid
}

// 앨범 선수의 혼 경험치 업 요청
message PKT_CLI_TO_GS_TEAM_CARD_ALBUM_EXP_UP_USE_SOUL
{
    optional PROTOID.CLI_TO_GS.ID   id					= 1 [default = TEAM_CARD_ALBUM_EXP_UP_USE_SOUL];

    required int32                  var_player_card_id	= 2; // 플레이어 카드 guid
}

// 개인전술 : 정보 요청
message PKT_CLI_TO_GS_ENTRY_STATEGY_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = ENTRY_STATEGY_INFO];
}

// 개인전술 : 개인별(슬롯별) 전술 정보 요청
message PKT_CLI_TO_GS_ENTRY_STATEGY_ROSTER_SLOT_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = ENTRY_STATEGY_ROSTER_SLOT_INFO];

    required int32                  var_slot_order  	= 2; // 정보 요청 슬롯 번호[1~25]
}

// 개인전술 : 개인별(슬롯별) 전술 설정 요청
message PKT_CLI_TO_GS_ENTRY_STATEGY_ROSTER_SLOT_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = ENTRY_STATEGY_ROSTER_SLOT_SET];

    required int32                  var_slot_order          = 2; // 정보 요청 슬롯 번호[1~25]
    repeated int32                  var_gauge_number_list   = 3; // 게이지 번호 리스트
}

// 뮤지엄 : 정보 요청
message PKT_CLI_TO_GS_MUSEUM_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = MUSEUM_INFO];
}

// 뮤지엄 : 사용자 액션 (장착, 제작, 레벨업, 업적 완료 등)
message PKT_CLI_TO_GS_MUSEUM_ACTION 
{
    optional PROTOID.CLI_TO_GS.ID               id                    = 1 [default = MUSEUM_ACTION];
    
    required H3Enum.eMuseumCategory             var_catetory          = 2; // [default = MuseumCategory_Notset];
    required H3Enum.eMuseumAction               var_action            = 3; // [default = MuseumAction_Notset];
    
    optional int32                              var_photo_guid        = 4; // 사진 ID가 필요한 경우
    optional int32                              var_slot_number       = 5; // 장착의 경우 슬롯 번호
    optional int32                              var_achieve_guid      = 6; // 과제 GUID                           :: 사진 제작에서 사용  (사진 렙업에서는 개별 미션 완료를 진행하지 않는다.)
    
}

// 훈련 이전(계승과는 다르게 모든 훈련을 이전함.)
message PKT_CLI_TO_GS_TRAINING_MOVE
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = TRAINING_MOVE];

    optional int32				    var_source_team_card_id		    = 2; // 부모 카드 id
    optional int32				    var_destination_team_card_id	= 3; // 자식 카드 id
}

// 잠재력 개방: 잠재력 개방 정보 조회 요청
message PKT_CLI_TO_GS_LATENT_ABILITY_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                              = 1 [default = LATENT_ABILITY_INFO];
}

// 잠재력 개방: 잠재력 장착 요청
message PKT_CLI_TO_GS_LATENT_ABILITY_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = LATENT_ABILITY_SET];

    required int32                  var_teamcard_id             = 2; // 구단 선수카드 ID
    required int32                  var_latent_ability_id       = 3; // 잠재력 ID (0 이면 장착 해제)
    optional int32                  var_slot_index              = 4 [default = 0]; // 슬롯 인덱스 (시작 값 0)
}

// 잠재력 개방: 잠재력 개발 요청
message PKT_CLI_TO_GS_LATENT_ABILITY_DEV
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = LATENT_ABILITY_DEV];

    required int32                  var_teamcard_id             = 2; // 구단 선수카드 ID
    required int32                  var_latent_ability_id       = 3; // 잠재력 ID
    required int32                  var_count                   = 4; // 시도 횟수 (1 ~ 50)
}

// 잠재력 개방: 잠재력 초기화 요청
message PKT_CLI_TO_GS_LATENT_ABILITY_RESET
{
    optional PROTOID.CLI_TO_GS.ID   id                          = 1 [default = LATENT_ABILITY_RESET];

    // 초기화 비용 종류
    enum eCostType
    {
        CostTypeCash    = 0; // 위닝볼
        CostTypeItem    = 1; // 훈련리셋권
    }

    required int32                  var_teamcard_id             = 2; // 구단 선수카드 ID
    required int32                  var_latent_ability_id       = 3; // 잠재력 ID (0 이면 전체 잠재력)
    optional eCostType              var_cost_type               = 4 [default = CostTypeCash]; // 초기화 비용 종류
}

// [힛 더 하이라이트 이벤트] 이벤트 기본 정보
message PKT_CLI_TO_GS_SHOW_HIT_THE_HIGHLIGHT_EVENT_OVERALL_DATA
{
	optional PROTOID.CLI_TO_GS.ID			id											= 1 [default = SHOW_HIT_THE_HIGHLIGHT_EVENT_OVERALL_DATA];
	required int32							var_event_id								= 2; // 이벤트 고유ID
}

// [힛 더 하이라이트 이벤트] 이벤트 사전 동의
message PKT_CLI_TO_GS_GO_THROUGH_HIT_THE_HIGHLIGHT_EVENT_PRIOR_CONSENT
{
	optional PROTOID.CLI_TO_GS.ID			id											= 1 [default = GO_THROUGH_HIT_THE_HIGHLIGHT_EVENT_PRIOR_CONSENT];
	required int32							var_event_id								= 2; // 이벤트 고유ID
	required Struct.HitTheHighlightEventPriorConsentData		var_prior_consent_data	= 3;
}

// [힛 더 하이라이트 이벤트] 인게임 보상
message PKT_CLI_TO_GS_REWARD_HIT_THE_HIGHLIGHT_EVENT_INGAME_GOODS
{
	optional PROTOID.CLI_TO_GS.ID			id											= 1 [default = REWARD_HIT_THE_HIGHLIGHT_EVENT_INGAME_GOODS];
	required int32							var_event_id								= 2; // 이벤트 고유ID
}

// [힛 더 하이라이트 이벤트] 경품 보상
message PKT_CLI_TO_GS_REWARD_HIT_THE_HIGHLIGHT_EVENT_GIVEAWAY
{
	optional PROTOID.CLI_TO_GS.ID			id											= 1 [default = REWARD_HIT_THE_HIGHLIGHT_EVENT_GIVEAWAY];
	required int32							var_event_id								= 2; // 이벤트 고유ID
	required int32							var_combo_streak							= 3;
}

// 구단 로스터 정보 요청
message PKT_CLI_TO_GS_MY_TEAM_ROSTER_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = MY_TEAM_ROSTER_INFO];
}

// [이사회 연고지 쟁탈전] : 진행 중인 쟁탈전의 전적 현황
message PKT_CLI_TO_GS_SHOW_GUILD_LEAGUE_SCOREBOARD
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SHOW_GUILD_LEAGUE_SCOREBOARD];
	optional int32						var_hometown_id			= 2 [default = 0]; // 연고지 ID( 0 : 통합 )
}

// 아이템 교환 센터 : 아이템 리스트 정보 요청
message PKT_CLI_TO_GS_ITEM_SWAP_CENTER_INFO
{
    optional PROTOID.CLI_TO_GS.ID	id					= 1 [default = ITEM_SWAP_CENTER_INFO];
}

// 아이템 교환 센터 : 아이템 교환 요청
message PKT_CLI_TO_GS_ITEM_SWAP_CENTER_ITEMEXCHANGE
{
    optional PROTOID.CLI_TO_GS.ID	id					= 1 [default = ITEM_SWAP_CENTER_ITEMEXCHANGE];
	required int32					var_item_id			= 2; // 교환하는 아이템 ID
}

// 컨텐츠 제어 정보
message PKT_CLI_TO_GS_CONTENT_CONTROL_OVERALL_DATA
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CONTENT_CONTROL_OVERALL_DATA];
}

// 벤치 팀컬러 장착 요청
message PKT_CLI_TO_GS_BENCH_TEAM_COLOR_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                              = 1 [default = BENCH_TEAM_COLOR_SET];

    required int32                  var_bench_team_color_id         = 2; // 벤치 팀컬러 ID (0이면 장착 해제)
    required int32                  var_slot                        = 3; // 벤치 팀컬러 슬롯 번호 (0부터 시작)
}

// [결전의 그라운드] 레드닷용..
message PKT_CLI_TO_GS_SYNC_WORLDWIDE_SUB_TOURNAMENT_RED_DOT
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SYNC_WORLDWIDE_SUB_TOURNAMENT_RED_DOT];
}

// [결전의 그라운드] 대회 정보
message PKT_CLI_TO_GS_SHOW_WORLDWIDE_SUB_TOURNAMENT_SCHEDULE_DATA
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SHOW_WORLDWIDE_SUB_TOURNAMENT_SCHEDULE_DATA];
}

// [결전의 그라운드] 경기 일정
message PKT_CLI_TO_GS_SHOW_WORLDWIDE_SUB_TOURNAMENT_MATCHUP_DATA
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SHOW_WORLDWIDE_SUB_TOURNAMENT_MATCHUP_DATA];
}

// [결전의 그라운드] 참가 신청( 로스터 제출 )
message PKT_CLI_TO_GS_PARTICIPATE_WORLDWIDE_SUB_TOURNAMENT
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = PARTICIPATE_WORLDWIDE_SUB_TOURNAMENT];
	required int32						var_tournament_game_id	= 2;
}

// [결전의 그라운드] 작전방침 설정
message PKT_CLI_TO_GS_SETUP_WORLDWIDE_SUB_TOURNAMENT_TACTICS
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SETUP_WORLDWIDE_SUB_TOURNAMENT_TACTICS];
	required int32						var_round				= 2;
	required int32						var_tactics_card_item_guid	= 3;
}

// [결전의 그라운드] 다음 라운드 진출 여부 결정( GO and STOP )
message PKT_CLI_TO_GS_DECIDE_WORLDWIDE_SUB_TOURNAMENT_NEXT_ROUND
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = DECIDE_WORLDWIDE_SUB_TOURNAMENT_NEXT_ROUND];
	required int32						var_round				= 2;
	required bool						var_go_next_round		= 3;
}

// [결전의 그라운드] 개별 경기 결과 확인
message PKT_CLI_TO_GS_CONFIRM_WORLDWIDE_SUB_TOURNAMENT_MATCHUP
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CONFIRM_WORLDWIDE_SUB_TOURNAMENT_MATCHUP];
	required int32						var_round				= 2;
}

// [결전의 그라운드] 전체 경기 결과 확인
message PKT_CLI_TO_GS_CONFIRM_WORLDWIDE_SUB_TOURNAMENT_WHOLE_MATCHUP
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = CONFIRM_WORLDWIDE_SUB_TOURNAMENT_WHOLE_MATCHUP];
}

// [결전의 그라운드] 보상 수령
message PKT_CLI_TO_GS_REWARD_WORLDWIDE_SUB_TOURNAMENT
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = REWARD_WORLDWIDE_SUB_TOURNAMENT];
}

// [결전의 그라운드] 라인업 확인
message PKT_CLI_TO_GS_SHOW_WORLDWIDE_SUB_TOURNAMENT_LINEUP
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SHOW_WORLDWIDE_SUB_TOURNAMENT_LINEUP];
}

// [결전의 그라운드] 타 구단 라인업 확인
message PKT_CLI_TO_GS_SHOW_WORLDWIDE_SUB_TOURNAMENT_OPP_TEAM_LINEUP
{
	optional PROTOID.CLI_TO_GS.ID       id						= 1 [default = SHOW_WORLDWIDE_SUB_TOURNAMENT_OPP_TEAM_LINEUP];
	required int32						var_team_guid			= 2; // 구단 ID
	required int32						var_world_id			= 3; // 서버 ID
	required int32						var_game_id				= 4; // 토너먼트 Game ID
}

// 특수능력 레시피 정보 요청
message PKT_CLI_TO_GS_SPECIAL_ABILITY_RECIPE_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                              = 1 [default = SPECIAL_ABILITY_RECIPE_INFO];
}

// 특수능력 레시피 재료 등록 요청
message PKT_CLI_TO_GS_SPECIAL_ABILITY_RECIPE_MATERIAL_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                                = 1 [default = SPECIAL_ABILITY_RECIPE_MATERIAL_SET];

    required int32                                  var_special_ability_card_id = 2; // 특수능력 카드 ID (재로 등록할)
    required H3Enum.eSpecialAbilityRecipeMaterial   var_material_type           = 3; // 재료타입 1: 선수카드 2: 특수능력 카드
    required int32                                  var_slot_id                 = 4; // 슬롯 ID
    required int32                                  var_material_id             = 5; // TeamCardId / Functional Card Id
}

// 특수능력 레시피 특수능력 카드 생성 요청
message PKT_CLI_TO_GS_SPECIAL_ABILITY_RECIPE_CREATE
{
    optional PROTOID.CLI_TO_GS.ID   id                              = 1 [default = SPECIAL_ABILITY_RECIPE_CREATE];

    optional int32                  var_special_ability_card_id     = 2; // 특수능력 카드 ID (제작할)
}

// 마스터리 부분 초기화 
message PKT_CLI_TO_GS_TEAM_MASTERY_PARTIAL_RESET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = TEAM_MASTERY_PARTIAL_RESET];

    required int32    var_category							= 2; // 마스터리 카테고리 번호
}

// 스페셜 엠블럼: 보유 스페셜 엠블럼 조회 요청
message PKT_CLI_TO_GS_SPECIAL_EMBLEM_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id                              = 1 [default = SPECIAL_EMBLEM_LIST];
}

// 스페셜 엠블럼: 스페셜 엠블럼 장착 요청
message PKT_CLI_TO_GS_SPECIAL_EMBLEM_SET
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = SPECIAL_EMBLEM_SET];

    required int32                  var_special_emblem_id           = 2; // 스페셜 엠블럼 ID (0 이면 장착 해제)
}

// [코치] 코치 전체 정보
message PKT_CLI_TO_GS_SHOW_COACH_OVERALL_DATA
{
	optional PROTOID.CLI_TO_GS.ID       id										= 1 [default = SHOW_COACH_OVERALL_DATA];
}

// [코치] 코치 슬롯 정보
message PKT_CLI_TO_GS_SHOW_COACH_SLOT_DATA
{
	optional PROTOID.CLI_TO_GS.ID       id										= 1 [default = SHOW_COACH_SLOT_DATA];
}

// [코치] 코치 승급
message PKT_CLI_TO_GS_UPGRADE_COACH
{
	optional PROTOID.CLI_TO_GS.ID       id										= 1 [default = UPGRADE_COACH];
	required int32						var_team_coach_id						= 2;
	required int32						var_material_team_coach_id				= 3;
}

// [코치] 코치 강화
message PKT_CLI_TO_GS_ENCHANT_COACH
{
	optional PROTOID.CLI_TO_GS.ID       id										= 1 [default = ENCHANT_COACH];
	required int32						var_team_coach_id						= 2;
	repeated int32						var_material_team_coach_id_list			= 3;
}

// [코치] 코치 육성 효과 부여
message PKT_CLI_TO_GS_ASSIGN_COACH_TRAINING_ABILITY
{
	optional PROTOID.CLI_TO_GS.ID       id										= 1 [default = ASSIGN_COACH_TRAINING_ABILITY];
	required int32						var_team_coach_id						= 2;
	required H3Enum.eCoachFilterType	var_filter_type							= 3;
	repeated int32						var_material_team_coach_id_list			= 4;
}

// [코치] 코치 특능 효과 부여
message PKT_CLI_TO_GS_ASSIGN_COACH_SPECIAL_ABILITY
{
	optional PROTOID.CLI_TO_GS.ID       id										= 1 [default = ASSIGN_COACH_SPECIAL_ABILITY];
	required int32						var_team_coach_id						= 2;
}

// [코치] 코치 등록
message PKT_CLI_TO_GS_REGISTER_COACH
{
	optional PROTOID.CLI_TO_GS.ID       id										= 1 [default = REGISTER_COACH];
	required int32						var_slot_id								= 2;
	required int32						var_team_coach_id						= 3;
}

// [코치] 코치 해제
message PKT_CLI_TO_GS_DEREGISTER_COACH
{
	optional PROTOID.CLI_TO_GS.ID       id										= 1 [default = DEREGISTER_COACH];
	required int32						var_slot_id								= 2;
}

// [코치] 코치 교체
message PKT_CLI_TO_GS_SWAP_COACH
{
	optional PROTOID.CLI_TO_GS.ID       id										= 1 [default = SWAP_COACH];
	required int32						var_slot_id								= 2;
	required int32						var_register_team_coach_id				= 3;
}

// [코치] 코치 방출
message PKT_CLI_TO_GS_REMOVE_COACH
{
	optional PROTOID.CLI_TO_GS.ID       id										= 1 [default = REMOVE_COACH];
	repeated int32						var_team_coach_id_list					= 2;
}

// [코치] 코치 잠금 및 해제
message PKT_CLI_TO_GS_TOGGLE_COACH_LOCK
{
	optional PROTOID.CLI_TO_GS.ID       id										= 1 [default = TOGGLE_COACH_LOCK];
	required int32						var_team_coach_id						= 2;
}

// [코치] 코치 특능 효과 부여 재료 등록
message PKT_CLI_TO_GS_REGISTER_MATERIAL_COACH_SPECIAL_ABILITY
{
	optional PROTOID.CLI_TO_GS.ID       id										= 1 [default = REGISTER_MATERIAL_COACH_SPECIAL_ABILITY];
	required int32						var_team_coach_id						= 2;
	required int32						var_material_slot_id					= 3;
	required int32						var_material_team_card_id				= 4;
}

// [코치] 특능 효과 결과 선택
message PKT_CLI_TO_GS_SELECT_RESULT_ASSIGN_COACH_SPECIAL_ABILITY
{
	optional PROTOID.CLI_TO_GS.ID       id										= 1 [default = SELECT_RESULT_ASSIGN_COACH_SPECIAL_ABILITY];
	required int32						var_team_coach_id						= 2;
	required bool						var_is_select_exist_result				= 3;
}

// 최강자전: 대회 정보 조회 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_INFO];
}

// 최강자전: 대회 참가 신청 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_JOIN
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_JOIN];

    required int32                  var_game_id         = 2; // 대회 ID
}

// 최강자전: 경기 일정 조회 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_SCHEDULE
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_SCHEDULE];

    required int32                  var_join_game_id    = 2; // 참가 대회 ID
}

// 최강자전: 대진표 조회 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_MATCH_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_MATCH_LIST];

    required int32                  var_game_id         = 2; // 대회 ID
}

// 최강자전: 경기 결과 조회 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_MATCH_RESULT
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_MATCH_RESULT];

    required int32                  var_game_id         = 2; // 대회 ID
    required int32                  var_round_id        = 3;
    required int32                  var_match_group     = 4;
}

// 최강자전: 경기 결과 확인 설정 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_MATCH_RESULT_CHECK
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_MATCH_RESULT_CHECK];

    required int32                  var_game_id         = 2; // 대회 ID
    required int32                  var_round_id        = 3; // (확인 마지막 ROUND_ID 를 지정하면, 이전 미확인 경기도 확인 처리됨.)
}

// 최강자전: 참가 팀 엔트리 조회 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_TEAM_ENTRY
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_TEAM_ENTRY];

    required int32                  var_game_id         = 2; // 대회 ID
    optional int32                  var_team_guid       = 3 [default = 0];
    optional int32                  var_world_id        = 4 [default = 0];
}

// 최강자전: 작전방침 설정 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_TACTICS_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_TACTICS_SET];

    required int32                  var_game_id         = 2; // 대회 ID
    required int32                  var_round_id        = 3;
    required int32                  var_slot            = 4; // 작전방침 설정 슬롯(0~2: 1~3차전에 대응)
    required int32                  var_tactics_id      = 5; // 작전방침 ID
}

// 최강자전: 예측 팀 목록 조회 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_BETTING_TEAM_LIST
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_BETTING_TEAM_LIST];

    required int32                  var_game_id         = 2; // 대회 ID
}

// 최강자전: 예측 참가 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_BETTING_SET
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_BETTING_SET];

    required int32                  var_betting_game_id     = 2; // 예측 대회 ID
    required int32                  var_betting_team_guid   = 3; // 예측 팀 ID
    required int32                  var_betting_point       = 4; // 예측 포인트 (배팅할 포인트)
}

// 최강자전: 예측 결과 조회 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_BETTING_RESULT
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_BETTING_RESULT];

    required int32                  var_game_id             = 2; // 예측 대회 ID
}

// 최강자전: 예측 결과 확인 설정 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_BETTING_RESULT_CHECK
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_BETTING_RESULT_CHECK];

    required int32                  var_game_id             = 2; // 예측 대회 ID
}

// 최강자전: 역대 우승 팀 조회 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_WIN_HISTORY
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_WIN_HISTORY];

    required int32                  var_seq_id              = 2; // 대회 회차 (0: 최근 회차 조회)
}

// 최강자전: 상태알림 표시용 정보 조회 요청
message PKT_CLI_TO_GS_WORLDWIDE_MAIN_TOURNAMENT_NOTICE
{
    optional PROTOID.CLI_TO_GS.ID   id                      = 1 [default = WORLDWIDE_MAIN_TOURNAMENT_NOTICE];
}

// 앨범 선수 EXP 전수
message PKT_CLI_TO_GS_TEAM_CARD_ALBUM_EXP_TRANSFER
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = TEAM_CARD_ALBUM_EXP_TRANSFER];

    optional int32				    var_source_team_card_id		    = 2; // 부모 카드 id
    optional int32				    var_destination_team_card_id	= 3; // 자식 카드 id
}

// 앨범 특별 훈련
message PKT_CLI_TO_GS_EXTREME_TRAINING
{
    optional PROTOID.CLI_TO_GS.ID   id						        = 1 [default = EXTREME_TRAINING];

	required int32				    var_team_card_id				= 2; // 카드 id
    required int32                  var_extreme_training_id			= 3; // 훈련 guid
}

// 마스터 카드 정보 요청
message PKT_CLI_TO_GS_MASTER_PLAYER_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                              = 1 [default = MASTER_PLAYER_INFO];
}

// 마스터 카드 재료 등록 요청
message PKT_CLI_TO_GS_MASTER_PLAYER_MATERIAL_SET
{
    optional PROTOID.CLI_TO_GS.ID   id											= 1 [default = MASTER_PLAYER_MATERIAL_SET];

    required int32                                  var_master_player_group_id	= 2; // 마스터 카드 그룹 ID
    required H3Enum.eMasterPlayerMaterial			var_material_type           = 3; // 재료타입 1: 선수카드 2: 특수능력 카드
    required int32									var_theme_slot				= 4; // 테마 슬롯 번호 (1부터 시작)
    required int32									var_material_slot			= 5; // 재료 슬롯 번호 (1부터 시작)
    required int32                                  var_material_id             = 6; // TeamCardId / Functional Card Id
}

// 마스터 카드 생성 요청
message PKT_CLI_TO_GS_MASTER_PLAYER_GET
{
    optional PROTOID.CLI_TO_GS.ID		id										= 1 [default = MASTER_PLAYER_GET];

    required int32						var_master_player_group_id				= 2; // 마스터 카드 ID.
	required int32						var_master_player_GUID					= 3; // 선택 마스터 카드 GUID.
}

// 페넌트레이스 KPI 정보 조회 요청
message PKT_CLI_TO_GS_PENNANT_KPI_INFO
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_KPI_INFO];

    required int32                  var_season_id       = 2; // 시즌ID
}

// 페넌트레이스 KPI 순위 예상 변경 요청
message PKT_CLI_TO_GS_PENNANT_KPI_FORECAST_CHANGE
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = PENNANT_KPI_FORECAST_CHANGE];

    required int32                  var_season_id       = 2; // 시즌ID
    required int32                  var_kpi_forecast_1  = 3; // KPI 순위 예상 1 변경
    required int32                  var_kpi_forecast_2  = 4; // KPI 순위 예상 2 변경
    required int32                  var_kpi_forecast_3  = 5; // KPI 순위 예상 3 변경
}

// (더미)페넌트레이스 경기 결과 요청
message PKT_CLI_TO_GS_DUMMY_PENNANT_GAME_RESULT
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = DUMMY_PENNANT_GAME_RESULT];
}

// 서버 테스트용 패킷 1
message PKT_CLI_TO_GS_SERVER_TEST_PACKET_1
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = SERVER_TEST_PACKET_1];
    repeated bytes                  var_param           = 2;
}

// 서버 테스트용 패킷 1
message PKT_CLI_TO_GS_SERVER_TEST_PACKET_2
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = SERVER_TEST_PACKET_2];
    repeated bytes                  var_param           = 2;
}

// 테스트 봇, 계정 찾기 패킷
message PKT_CLI_TO_GS_FIND_ACCOUNT
{
    optional PROTOID.CLI_TO_GS.ID   id                  = 1 [default = BOT_FIND_ACCOUNT];
    required bytes var_team_name                        = 2;
}

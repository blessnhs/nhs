// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CLI.GS.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from CLI.GS.proto</summary>
public static partial class CLIGSReflection {

  #region Descriptor
  /// <summary>File descriptor for CLI.GS.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CLIGSReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxDTEkuR1MucHJvdG8aCkVudW0ucHJvdG8aD1N0cnVjdHVyZS5wcm90byI4",
          "CgtWRVJTSU9OX1JFURIpCgJpZBgBIAEoDjIJLlBST1RPQ09MOhJJRF9QS1Rf",
          "VkVSU0lPTl9SRVEilgEKCUxPR0lOX1JFURInCgJpZBgBIAEoDjIJLlBST1RP",
          "Q09MOhBJRF9QS1RfTE9HSU5fUkVREg8KB3Zhcl91aWQYAiACKAkSEQoJdmFy",
          "X3Rva2VuGAMgAigJEhQKDHZhcl9jYW1fbmFtZRgEIAIoCRIWCg52YXJfbWFj",
          "aGluZV9pZBgFIAIoCRIOCgZ2YXJfaXAYBiACKAkiUgoPQ1JFQVRFX1JPT01f",
          "UkVREi0KAmlkGAEgASgOMgkuUFJPVE9DT0w6FklEX1BLVF9DUkVBVEVfUk9P",
          "TV9SRVESEAoIdmFyX25hbWUYAiACKAkiVwoORU5URVJfUk9PTV9SRVESLAoC",
          "aWQYASABKA4yCS5QUk9UT0NPTDoVSURfUEtUX0VOVEVSX1JPT01fUkVREhcK",
          "D3Zhcl9yb29tX251bWJlchgCIAIoBSJnCg5MRUFWRV9ST09NX1JFURIsCgJp",
          "ZBgBIAEoDjIJLlBST1RPQ09MOhVJRF9QS1RfTEVBVkVfUk9PTV9SRVESDgoG",
          "dmFyX2lkGAIgAigFEhcKD3Zhcl9yb29tX251bWJlchgDIAIoBSI8Cg1ST09N",
          "X0xJU1RfUkVREisKAmlkGAEgASgOMgkuUFJPVE9DT0w6FElEX1BLVF9ST09N",
          "X0xJU1RfUkVRIqUBChVST09NX1BBU1NfVEhST1VHSF9SRVESMwoCaWQYASAB",
          "KA4yCS5QUk9UT0NPTDocSURfUEtUX1JPT01fUEFTU19USFJPVUdIX1JFURIT",
          "Cgt2YXJfbWVzc2FnZRgCIAIoCRIXCg92YXJfbWVzc2FnZV9pbnQYAyACKAUS",
          "FwoPdmFyX3Jvb21fbnVtYmVyGAQgAigFEhAKCHZhcl90aW1lGAUgAigJIjYK",
          "Ck5PVElDRV9SRVESKAoCaWQYASABKA4yCS5QUk9UT0NPTDoRSURfUEtUX05P",
          "VElDRV9SRVEixwEKEkJJVE1BUF9NRVNTQUdFX1JFURIwCgJpZBgBIAEoDjIJ",
          "LlBST1RPQ09MOhlJRF9QS1RfQklUTUFQX01FU1NBR0VfUkVREhMKC3Zhcl9t",
          "ZXNzYWdlGAIgAygMEhcKD3Zhcl9yb29tX251bWJlchgDIAIoBRIQCgh2YXJf",
          "dHlwZRgEIAIoBRIYChB2YXJfdG9fcGxheWVyX2lkGAUgAygDEhEKCXZhcl93",
          "aWR0aBgGIAIoBRISCgp2YXJfaGVpZ2h0GAcgAigFIowBChFBVURJT19NRVNT",
          "QUdFX1JFURIvCgJpZBgBIAEoDjIJLlBST1RPQ09MOhhJRF9QS1RfQVVESU9f",
          "TUVTU0FHRV9SRVESEwoLdmFyX21lc3NhZ2UYAiADKAwSFwoPdmFyX3Jvb21f",
          "bnVtYmVyGAMgAigFEhgKEHZhcl90b19wbGF5ZXJfaWQYBCADKAMiWgoPU1RP",
          "UF9TVFJFQU1fUkVREi0KAmlkGAEgASgOMgkuUFJPVE9DT0w6FklEX1BLVF9T",
          "VE9QX1NUUkVBTV9SRVESGAoQdmFyX3RvX3BsYXllcl9pZBgCIAIoAyKjAQoS",
          "Q0FNRVJBX1dBS0VfVVBfUkVREjAKAmlkGAEgASgOMgkuUFJPVE9DT0w6GUlE",
          "X1BLVF9DQU1FUkFfV0FLRV9VUF9SRVESEAoIdmFyX3R5cGUYAiACKAUSFwoP",
          "dmFyX3Jvb21fbnVtYmVyGAMgAigFEhgKEHZhcl90b19wbGF5ZXJfaWQYBCAC",
          "KAMSFgoOdmFyX21hY2hpbmVfaWQYBSACKAkiQgoQUFJBWV9NRVNTQUdFX1JF",
          "URIuCgJpZBgBIAEoDjIJLlBST1RPQ09MOhdJRF9QS1RfUFJBWV9NRVNTQUdF",
          "X1JFUSJfChRQUkFZX01FU1NBR0VfUkVHX1JFURIyCgJpZBgBIAEoDjIJLlBS",
          "T1RPQ09MOhtJRF9QS1RfUFJBWV9NRVNTQUdFX1JFR19SRVESEwoLdmFyX21l",
          "c3NhZ2UYAiABKAkiRQoHUU5BX1JFURIlCgJpZBgBIAEoDjIJLlBST1RPQ09M",
          "Og5JRF9QS1RfUU5BX1JFURITCgt2YXJfbWVzc2FnZRgCIAEoCSI8Cg1NQUlM",
          "X0xJU1RfUkVREisKAmlkGAEgASgOMgkuUFJPVE9DT0w6FElEX1BLVF9NQUlM",
          "X0xJU1RfUkVRIkAKB1JFR19SRVESJQoCaWQYASABKA4yCS5QUk9UT0NPTDoO",
          "SURfUEtUX1JFR19SRVESDgoGdmFyX2lkGAIgAigFIkQKEUNMSUVOVF9MT0dP",
          "VVRfUkVREi8KAmlkGAEgASgOMgkuUFJPVE9DT0w6GElEX1BLVF9DTElFTlRf",
          "TE9HT1VUX1JFUSKbAQoSQ0FNRVJBX0NPTlRST0xfUkVREjAKAmlkGAEgASgO",
          "MgkuUFJPVE9DT0w6GUlEX1BLVF9DQU1FUkFfQ09OVFJPTF9SRVESJAoIdmFy",
          "X3R5cGUYAiACKA4yEi5DYW1lcmFDb250cm9sVHlwZRIWCg52YXJfbWFjaGlu",
          "ZV9pZBgDIAIoCRIVCg12YXJfcGxheWVyX2lkGAQgAigDIogBChNNUEVHMlRT",
          "X01FU1NBR0VfUkVREjEKAmlkGAEgASgOMgkuUFJPVE9DT0w6GklEX1BLVF9N",
          "UEVHMlRTX01FU1NBR0VfUkVREhMKC3Zhcl9tZXNzYWdlGAIgAygMEhcKD3Zh",
          "cl9yb29tX251bWJlchgDIAIoBRIQCgh2YXJfdHlwZRgEIAIoBSJsCg5SRUdf",
          "Q0FNRVJBX1JFURIsCgJpZBgBIAEoDjIJLlBST1RPQ09MOhVJRF9QS1RfUkVH",
          "X0NBTUVSQV9SRVESFAoMdmFyX2NhbV9uYW1lGAIgAigJEhYKDnZhcl9tYWNo",
          "aW5lX2lkGAMgAigJIkAKD0NBTUVSQV9MSVNUX1JFURItCgJpZBgBIAEoDjIJ",
          "LlBST1RPQ09MOhZJRF9QS1RfQ0FNRVJBX0xJU1RfUkVRInUKEk1BQ0hJTkVf",
          "U1RBVFVTX1JFURIwCgJpZBgBIAEoDjIJLlBST1RPQ09MOhlJRF9QS1RfTUFD",
          "SElORV9TVEFUVVNfUkVREhgKEHZhcl90b19wbGF5ZXJfaWQYBSADKAMSEwoL",
          "dmFyX2JhdHRlcnkYBCACKAUijgEKE1ZFUklGWV9QVVJDSEFTRV9SRVESMQoC",
          "aWQYASABKA4yCS5QUk9UT0NPTDoaSURfUEtUX1ZFUklGWV9QVVJDSEFTRV9S",
          "RVESGAoQdmFyX3BhY2thZ2VfbmFtZRgCIAIoCRIXCg92YXJfcHVyY2hhc2Vf",
          "aWQYAyACKAkSEQoJdmFyX3Rva2VuGAQgAigJIlYKDkRFTF9DQU1FUkFfUkVR",
          "EiwKAmlkGAEgASgOMgkuUFJPVE9DT0w6FUlEX1BLVF9ERUxfQ0FNRVJBX1JF",
          "URIWCg52YXJfbWFjaGluZV9pZBgCIAIoCSK5AQoNUkVDT05ORUNUX1JFURIr",
          "CgJpZBgBIAEoDjIJLlBST1RPQ09MOhRJRF9QS1RfUkVDT05ORUNUX1JFURIW",
          "Cg52YXJfbWFjaGluZV9pZBgCIAIoCRIYChB2YXJfbWFjaGluZV9uYW1lGAMg",
          "AigJEhEKCXZhcl90b2tlbhgEIAIoCRIRCgl2YXJfaW5kZXgYBSACKAMSEQoJ",
          "dmFyX2VtYWlsGAYgAigJEhAKCHZhcl9uYW1lGAcgAigJQgJIAQ=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::EnumReflection.Descriptor, global::StructureReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::VERSION_REQ), global::VERSION_REQ.Parser, new[]{ "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LOGIN_REQ), global::LOGIN_REQ.Parser, new[]{ "Id", "VarUid", "VarToken", "VarCamName", "VarMachineId", "VarIp" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CREATE_ROOM_REQ), global::CREATE_ROOM_REQ.Parser, new[]{ "Id", "VarName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ENTER_ROOM_REQ), global::ENTER_ROOM_REQ.Parser, new[]{ "Id", "VarRoomNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LEAVE_ROOM_REQ), global::LEAVE_ROOM_REQ.Parser, new[]{ "Id", "VarId", "VarRoomNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ROOM_LIST_REQ), global::ROOM_LIST_REQ.Parser, new[]{ "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ROOM_PASS_THROUGH_REQ), global::ROOM_PASS_THROUGH_REQ.Parser, new[]{ "Id", "VarMessage", "VarMessageInt", "VarRoomNumber", "VarTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NOTICE_REQ), global::NOTICE_REQ.Parser, new[]{ "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BITMAP_MESSAGE_REQ), global::BITMAP_MESSAGE_REQ.Parser, new[]{ "Id", "VarMessage", "VarRoomNumber", "VarType", "VarToPlayerId", "VarWidth", "VarHeight" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AUDIO_MESSAGE_REQ), global::AUDIO_MESSAGE_REQ.Parser, new[]{ "Id", "VarMessage", "VarRoomNumber", "VarToPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::STOP_STREAM_REQ), global::STOP_STREAM_REQ.Parser, new[]{ "Id", "VarToPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CAMERA_WAKE_UP_REQ), global::CAMERA_WAKE_UP_REQ.Parser, new[]{ "Id", "VarType", "VarRoomNumber", "VarToPlayerId", "VarMachineId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PRAY_MESSAGE_REQ), global::PRAY_MESSAGE_REQ.Parser, new[]{ "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PRAY_MESSAGE_REG_REQ), global::PRAY_MESSAGE_REG_REQ.Parser, new[]{ "Id", "VarMessage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QNA_REQ), global::QNA_REQ.Parser, new[]{ "Id", "VarMessage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MAIL_LIST_REQ), global::MAIL_LIST_REQ.Parser, new[]{ "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::REG_REQ), global::REG_REQ.Parser, new[]{ "Id", "VarId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CLIENT_LOGOUT_REQ), global::CLIENT_LOGOUT_REQ.Parser, new[]{ "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CAMERA_CONTROL_REQ), global::CAMERA_CONTROL_REQ.Parser, new[]{ "Id", "VarType", "VarMachineId", "VarPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MPEG2TS_MESSAGE_REQ), global::MPEG2TS_MESSAGE_REQ.Parser, new[]{ "Id", "VarMessage", "VarRoomNumber", "VarType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::REG_CAMERA_REQ), global::REG_CAMERA_REQ.Parser, new[]{ "Id", "VarCamName", "VarMachineId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CAMERA_LIST_REQ), global::CAMERA_LIST_REQ.Parser, new[]{ "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MACHINE_STATUS_REQ), global::MACHINE_STATUS_REQ.Parser, new[]{ "Id", "VarToPlayerId", "VarBattery" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VERIFY_PURCHASE_REQ), global::VERIFY_PURCHASE_REQ.Parser, new[]{ "Id", "VarPackageName", "VarPurchaseId", "VarToken" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DEL_CAMERA_REQ), global::DEL_CAMERA_REQ.Parser, new[]{ "Id", "VarMachineId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RECONNECT_REQ), global::RECONNECT_REQ.Parser, new[]{ "Id", "VarMachineId", "VarMachineName", "VarToken", "VarIndex", "VarEmail", "VarName" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class VERSION_REQ : pb::IMessage<VERSION_REQ> {
  private static readonly pb::MessageParser<VERSION_REQ> _parser = new pb::MessageParser<VERSION_REQ>(() => new VERSION_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VERSION_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_REQ(VERSION_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_REQ Clone() {
    return new VERSION_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktVersionReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VERSION_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VERSION_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VERSION_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class LOGIN_REQ : pb::IMessage<LOGIN_REQ> {
  private static readonly pb::MessageParser<LOGIN_REQ> _parser = new pb::MessageParser<LOGIN_REQ>(() => new LOGIN_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LOGIN_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_REQ(LOGIN_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varUid_ = other.varUid_;
    varToken_ = other.varToken_;
    varCamName_ = other.varCamName_;
    varMachineId_ = other.varMachineId_;
    varIp_ = other.varIp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_REQ Clone() {
    return new LOGIN_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktLoginReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_uid" field.</summary>
  public const int VarUidFieldNumber = 2;
  private readonly static string VarUidDefaultValue = "";

  private string varUid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarUid {
    get { return varUid_ ?? VarUidDefaultValue; }
    set {
      varUid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_uid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarUid {
    get { return varUid_ != null; }
  }
  /// <summary>Clears the value of the "var_uid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarUid() {
    varUid_ = null;
  }

  /// <summary>Field number for the "var_token" field.</summary>
  public const int VarTokenFieldNumber = 3;
  private readonly static string VarTokenDefaultValue = "";

  private string varToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarToken {
    get { return varToken_ ?? VarTokenDefaultValue; }
    set {
      varToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarToken {
    get { return varToken_ != null; }
  }
  /// <summary>Clears the value of the "var_token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarToken() {
    varToken_ = null;
  }

  /// <summary>Field number for the "var_cam_name" field.</summary>
  public const int VarCamNameFieldNumber = 4;
  private readonly static string VarCamNameDefaultValue = "";

  private string varCamName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarCamName {
    get { return varCamName_ ?? VarCamNameDefaultValue; }
    set {
      varCamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_cam_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCamName {
    get { return varCamName_ != null; }
  }
  /// <summary>Clears the value of the "var_cam_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCamName() {
    varCamName_ = null;
  }

  /// <summary>Field number for the "var_machine_id" field.</summary>
  public const int VarMachineIdFieldNumber = 5;
  private readonly static string VarMachineIdDefaultValue = "";

  private string varMachineId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMachineId {
    get { return varMachineId_ ?? VarMachineIdDefaultValue; }
    set {
      varMachineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_machine_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMachineId {
    get { return varMachineId_ != null; }
  }
  /// <summary>Clears the value of the "var_machine_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMachineId() {
    varMachineId_ = null;
  }

  /// <summary>Field number for the "var_ip" field.</summary>
  public const int VarIpFieldNumber = 6;
  private readonly static string VarIpDefaultValue = "";

  private string varIp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarIp {
    get { return varIp_ ?? VarIpDefaultValue; }
    set {
      varIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIp {
    get { return varIp_ != null; }
  }
  /// <summary>Clears the value of the "var_ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIp() {
    varIp_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LOGIN_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LOGIN_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarUid != other.VarUid) return false;
    if (VarToken != other.VarToken) return false;
    if (VarCamName != other.VarCamName) return false;
    if (VarMachineId != other.VarMachineId) return false;
    if (VarIp != other.VarIp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarUid) hash ^= VarUid.GetHashCode();
    if (HasVarToken) hash ^= VarToken.GetHashCode();
    if (HasVarCamName) hash ^= VarCamName.GetHashCode();
    if (HasVarMachineId) hash ^= VarMachineId.GetHashCode();
    if (HasVarIp) hash ^= VarIp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarUid) {
      output.WriteRawTag(18);
      output.WriteString(VarUid);
    }
    if (HasVarToken) {
      output.WriteRawTag(26);
      output.WriteString(VarToken);
    }
    if (HasVarCamName) {
      output.WriteRawTag(34);
      output.WriteString(VarCamName);
    }
    if (HasVarMachineId) {
      output.WriteRawTag(42);
      output.WriteString(VarMachineId);
    }
    if (HasVarIp) {
      output.WriteRawTag(50);
      output.WriteString(VarIp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarUid) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarUid);
    }
    if (HasVarToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarToken);
    }
    if (HasVarCamName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarCamName);
    }
    if (HasVarMachineId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMachineId);
    }
    if (HasVarIp) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarIp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LOGIN_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarUid) {
      VarUid = other.VarUid;
    }
    if (other.HasVarToken) {
      VarToken = other.VarToken;
    }
    if (other.HasVarCamName) {
      VarCamName = other.VarCamName;
    }
    if (other.HasVarMachineId) {
      VarMachineId = other.VarMachineId;
    }
    if (other.HasVarIp) {
      VarIp = other.VarIp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarUid = input.ReadString();
          break;
        }
        case 26: {
          VarToken = input.ReadString();
          break;
        }
        case 34: {
          VarCamName = input.ReadString();
          break;
        }
        case 42: {
          VarMachineId = input.ReadString();
          break;
        }
        case 50: {
          VarIp = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CREATE_ROOM_REQ : pb::IMessage<CREATE_ROOM_REQ> {
  private static readonly pb::MessageParser<CREATE_ROOM_REQ> _parser = new pb::MessageParser<CREATE_ROOM_REQ>(() => new CREATE_ROOM_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CREATE_ROOM_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_REQ(CREATE_ROOM_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varName_ = other.varName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_REQ Clone() {
    return new CREATE_ROOM_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktCreateRoomReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 2;
  private readonly static string VarNameDefaultValue = "";

  private string varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CREATE_ROOM_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CREATE_ROOM_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarName != other.VarName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarName) {
      output.WriteRawTag(18);
      output.WriteString(VarName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CREATE_ROOM_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ENTER_ROOM_REQ : pb::IMessage<ENTER_ROOM_REQ> {
  private static readonly pb::MessageParser<ENTER_ROOM_REQ> _parser = new pb::MessageParser<ENTER_ROOM_REQ>(() => new ENTER_ROOM_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ENTER_ROOM_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_REQ(ENTER_ROOM_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varRoomNumber_ = other.varRoomNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_REQ Clone() {
    return new ENTER_ROOM_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktEnterRoomReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 2;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 2) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ENTER_ROOM_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ENTER_ROOM_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarRoomNumber) {
      output.WriteRawTag(16);
      output.WriteInt32(VarRoomNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ENTER_ROOM_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LEAVE_ROOM_REQ : pb::IMessage<LEAVE_ROOM_REQ> {
  private static readonly pb::MessageParser<LEAVE_ROOM_REQ> _parser = new pb::MessageParser<LEAVE_ROOM_REQ>(() => new LEAVE_ROOM_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LEAVE_ROOM_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_REQ(LEAVE_ROOM_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varId_ = other.varId_;
    varRoomNumber_ = other.varRoomNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_REQ Clone() {
    return new LEAVE_ROOM_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktLeaveRoomReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_id" field.</summary>
  public const int VarIdFieldNumber = 2;
  private readonly static int VarIdDefaultValue = 0;

  private int varId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarId {
    get { if ((_hasBits0 & 2) != 0) { return varId_; } else { return VarIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varId_ = value;
    }
  }
  /// <summary>Gets whether the "var_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 3;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 4) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LEAVE_ROOM_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LEAVE_ROOM_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarId != other.VarId) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarId) hash ^= VarId.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarId) {
      output.WriteRawTag(16);
      output.WriteInt32(VarId);
    }
    if (HasVarRoomNumber) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarId);
    }
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LEAVE_ROOM_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarId) {
      VarId = other.VarId;
    }
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarId = input.ReadInt32();
          break;
        }
        case 24: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ROOM_LIST_REQ : pb::IMessage<ROOM_LIST_REQ> {
  private static readonly pb::MessageParser<ROOM_LIST_REQ> _parser = new pb::MessageParser<ROOM_LIST_REQ>(() => new ROOM_LIST_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ROOM_LIST_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_REQ(ROOM_LIST_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_REQ Clone() {
    return new ROOM_LIST_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRoomListReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ROOM_LIST_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ROOM_LIST_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ROOM_LIST_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class ROOM_PASS_THROUGH_REQ : pb::IMessage<ROOM_PASS_THROUGH_REQ> {
  private static readonly pb::MessageParser<ROOM_PASS_THROUGH_REQ> _parser = new pb::MessageParser<ROOM_PASS_THROUGH_REQ>(() => new ROOM_PASS_THROUGH_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ROOM_PASS_THROUGH_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_REQ(ROOM_PASS_THROUGH_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMessage_ = other.varMessage_;
    varMessageInt_ = other.varMessageInt_;
    varRoomNumber_ = other.varRoomNumber_;
    varTime_ = other.varTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_REQ Clone() {
    return new ROOM_PASS_THROUGH_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRoomPassThroughReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private readonly static string VarMessageDefaultValue = "";

  private string varMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMessage {
    get { return varMessage_ ?? VarMessageDefaultValue; }
    set {
      varMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessage {
    get { return varMessage_ != null; }
  }
  /// <summary>Clears the value of the "var_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessage() {
    varMessage_ = null;
  }

  /// <summary>Field number for the "var_message_int" field.</summary>
  public const int VarMessageIntFieldNumber = 3;
  private readonly static int VarMessageIntDefaultValue = 0;

  private int varMessageInt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarMessageInt {
    get { if ((_hasBits0 & 2) != 0) { return varMessageInt_; } else { return VarMessageIntDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varMessageInt_ = value;
    }
  }
  /// <summary>Gets whether the "var_message_int" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessageInt {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_message_int" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessageInt() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 4;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 4) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_time" field.</summary>
  public const int VarTimeFieldNumber = 5;
  private readonly static string VarTimeDefaultValue = "";

  private string varTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarTime {
    get { return varTime_ ?? VarTimeDefaultValue; }
    set {
      varTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarTime {
    get { return varTime_ != null; }
  }
  /// <summary>Clears the value of the "var_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarTime() {
    varTime_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ROOM_PASS_THROUGH_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ROOM_PASS_THROUGH_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarMessage != other.VarMessage) return false;
    if (VarMessageInt != other.VarMessageInt) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    if (VarTime != other.VarTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarMessage) hash ^= VarMessage.GetHashCode();
    if (HasVarMessageInt) hash ^= VarMessageInt.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (HasVarTime) hash ^= VarTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarMessage) {
      output.WriteRawTag(18);
      output.WriteString(VarMessage);
    }
    if (HasVarMessageInt) {
      output.WriteRawTag(24);
      output.WriteInt32(VarMessageInt);
    }
    if (HasVarRoomNumber) {
      output.WriteRawTag(32);
      output.WriteInt32(VarRoomNumber);
    }
    if (HasVarTime) {
      output.WriteRawTag(42);
      output.WriteString(VarTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMessage);
    }
    if (HasVarMessageInt) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarMessageInt);
    }
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (HasVarTime) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ROOM_PASS_THROUGH_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarMessage) {
      VarMessage = other.VarMessage;
    }
    if (other.HasVarMessageInt) {
      VarMessageInt = other.VarMessageInt;
    }
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    if (other.HasVarTime) {
      VarTime = other.VarTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarMessage = input.ReadString();
          break;
        }
        case 24: {
          VarMessageInt = input.ReadInt32();
          break;
        }
        case 32: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
        case 42: {
          VarTime = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class NOTICE_REQ : pb::IMessage<NOTICE_REQ> {
  private static readonly pb::MessageParser<NOTICE_REQ> _parser = new pb::MessageParser<NOTICE_REQ>(() => new NOTICE_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NOTICE_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_REQ(NOTICE_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_REQ Clone() {
    return new NOTICE_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktNoticeReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NOTICE_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NOTICE_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NOTICE_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///등록된 카메라가 전송요청한 유저에게 전송
/// </summary>
public sealed partial class BITMAP_MESSAGE_REQ : pb::IMessage<BITMAP_MESSAGE_REQ> {
  private static readonly pb::MessageParser<BITMAP_MESSAGE_REQ> _parser = new pb::MessageParser<BITMAP_MESSAGE_REQ>(() => new BITMAP_MESSAGE_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BITMAP_MESSAGE_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_REQ(BITMAP_MESSAGE_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMessage_ = other.varMessage_.Clone();
    varRoomNumber_ = other.varRoomNumber_;
    varType_ = other.varType_;
    varToPlayerId_ = other.varToPlayerId_.Clone();
    varWidth_ = other.varWidth_;
    varHeight_ = other.varHeight_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_REQ Clone() {
    return new BITMAP_MESSAGE_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktBitmapMessageReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_varMessage_codec
      = pb::FieldCodec.ForBytes(18);
  private readonly pbc::RepeatedField<pb::ByteString> varMessage_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> VarMessage {
    get { return varMessage_; }
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 3;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 2) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_type" field.</summary>
  public const int VarTypeFieldNumber = 4;
  private readonly static int VarTypeDefaultValue = 0;

  private int varType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarType {
    get { if ((_hasBits0 & 4) != 0) { return varType_; } else { return VarTypeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varType_ = value;
    }
  }
  /// <summary>Gets whether the "var_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarType {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarType() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_to_player_id" field.</summary>
  public const int VarToPlayerIdFieldNumber = 5;
  private static readonly pb::FieldCodec<long> _repeated_varToPlayerId_codec
      = pb::FieldCodec.ForInt64(40);
  private readonly pbc::RepeatedField<long> varToPlayerId_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> VarToPlayerId {
    get { return varToPlayerId_; }
  }

  /// <summary>Field number for the "var_width" field.</summary>
  public const int VarWidthFieldNumber = 6;
  private readonly static int VarWidthDefaultValue = 0;

  private int varWidth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarWidth {
    get { if ((_hasBits0 & 8) != 0) { return varWidth_; } else { return VarWidthDefaultValue; } }
    set {
      _hasBits0 |= 8;
      varWidth_ = value;
    }
  }
  /// <summary>Gets whether the "var_width" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarWidth {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "var_width" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarWidth() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "var_height" field.</summary>
  public const int VarHeightFieldNumber = 7;
  private readonly static int VarHeightDefaultValue = 0;

  private int varHeight_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarHeight {
    get { if ((_hasBits0 & 16) != 0) { return varHeight_; } else { return VarHeightDefaultValue; } }
    set {
      _hasBits0 |= 16;
      varHeight_ = value;
    }
  }
  /// <summary>Gets whether the "var_height" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarHeight {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "var_height" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarHeight() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BITMAP_MESSAGE_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BITMAP_MESSAGE_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!varMessage_.Equals(other.varMessage_)) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    if (VarType != other.VarType) return false;
    if(!varToPlayerId_.Equals(other.varToPlayerId_)) return false;
    if (VarWidth != other.VarWidth) return false;
    if (VarHeight != other.VarHeight) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    hash ^= varMessage_.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (HasVarType) hash ^= VarType.GetHashCode();
    hash ^= varToPlayerId_.GetHashCode();
    if (HasVarWidth) hash ^= VarWidth.GetHashCode();
    if (HasVarHeight) hash ^= VarHeight.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    varMessage_.WriteTo(output, _repeated_varMessage_codec);
    if (HasVarRoomNumber) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomNumber);
    }
    if (HasVarType) {
      output.WriteRawTag(32);
      output.WriteInt32(VarType);
    }
    varToPlayerId_.WriteTo(output, _repeated_varToPlayerId_codec);
    if (HasVarWidth) {
      output.WriteRawTag(48);
      output.WriteInt32(VarWidth);
    }
    if (HasVarHeight) {
      output.WriteRawTag(56);
      output.WriteInt32(VarHeight);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    size += varMessage_.CalculateSize(_repeated_varMessage_codec);
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (HasVarType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarType);
    }
    size += varToPlayerId_.CalculateSize(_repeated_varToPlayerId_codec);
    if (HasVarWidth) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarWidth);
    }
    if (HasVarHeight) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarHeight);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BITMAP_MESSAGE_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    varMessage_.Add(other.varMessage_);
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    if (other.HasVarType) {
      VarType = other.VarType;
    }
    varToPlayerId_.Add(other.varToPlayerId_);
    if (other.HasVarWidth) {
      VarWidth = other.VarWidth;
    }
    if (other.HasVarHeight) {
      VarHeight = other.VarHeight;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          varMessage_.AddEntriesFrom(input, _repeated_varMessage_codec);
          break;
        }
        case 24: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
        case 32: {
          VarType = input.ReadInt32();
          break;
        }
        case 42:
        case 40: {
          varToPlayerId_.AddEntriesFrom(input, _repeated_varToPlayerId_codec);
          break;
        }
        case 48: {
          VarWidth = input.ReadInt32();
          break;
        }
        case 56: {
          VarHeight = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///등록된 카메라가 전송요청한 유저에게 전송
/// </summary>
public sealed partial class AUDIO_MESSAGE_REQ : pb::IMessage<AUDIO_MESSAGE_REQ> {
  private static readonly pb::MessageParser<AUDIO_MESSAGE_REQ> _parser = new pb::MessageParser<AUDIO_MESSAGE_REQ>(() => new AUDIO_MESSAGE_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AUDIO_MESSAGE_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_REQ(AUDIO_MESSAGE_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMessage_ = other.varMessage_.Clone();
    varRoomNumber_ = other.varRoomNumber_;
    varToPlayerId_ = other.varToPlayerId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_REQ Clone() {
    return new AUDIO_MESSAGE_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktAudioMessageReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_varMessage_codec
      = pb::FieldCodec.ForBytes(18);
  private readonly pbc::RepeatedField<pb::ByteString> varMessage_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> VarMessage {
    get { return varMessage_; }
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 3;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 2) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_to_player_id" field.</summary>
  public const int VarToPlayerIdFieldNumber = 4;
  private static readonly pb::FieldCodec<long> _repeated_varToPlayerId_codec
      = pb::FieldCodec.ForInt64(32);
  private readonly pbc::RepeatedField<long> varToPlayerId_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> VarToPlayerId {
    get { return varToPlayerId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AUDIO_MESSAGE_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AUDIO_MESSAGE_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!varMessage_.Equals(other.varMessage_)) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    if(!varToPlayerId_.Equals(other.varToPlayerId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    hash ^= varMessage_.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    hash ^= varToPlayerId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    varMessage_.WriteTo(output, _repeated_varMessage_codec);
    if (HasVarRoomNumber) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomNumber);
    }
    varToPlayerId_.WriteTo(output, _repeated_varToPlayerId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    size += varMessage_.CalculateSize(_repeated_varMessage_codec);
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    size += varToPlayerId_.CalculateSize(_repeated_varToPlayerId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AUDIO_MESSAGE_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    varMessage_.Add(other.varMessage_);
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    varToPlayerId_.Add(other.varToPlayerId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          varMessage_.AddEntriesFrom(input, _repeated_varMessage_codec);
          break;
        }
        case 24: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          varToPlayerId_.AddEntriesFrom(input, _repeated_varToPlayerId_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///등록된 카메라에게 해당유저에게 전송 중지를 보낸다. 
/// </summary>
public sealed partial class STOP_STREAM_REQ : pb::IMessage<STOP_STREAM_REQ> {
  private static readonly pb::MessageParser<STOP_STREAM_REQ> _parser = new pb::MessageParser<STOP_STREAM_REQ>(() => new STOP_STREAM_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<STOP_STREAM_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public STOP_STREAM_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public STOP_STREAM_REQ(STOP_STREAM_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varToPlayerId_ = other.varToPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public STOP_STREAM_REQ Clone() {
    return new STOP_STREAM_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktStopStreamReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_to_player_id" field.</summary>
  public const int VarToPlayerIdFieldNumber = 2;
  private readonly static long VarToPlayerIdDefaultValue = 0L;

  private long varToPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarToPlayerId {
    get { if ((_hasBits0 & 2) != 0) { return varToPlayerId_; } else { return VarToPlayerIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varToPlayerId_ = value;
    }
  }
  /// <summary>Gets whether the "var_to_player_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarToPlayerId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_to_player_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarToPlayerId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as STOP_STREAM_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(STOP_STREAM_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarToPlayerId != other.VarToPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarToPlayerId) hash ^= VarToPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarToPlayerId) {
      output.WriteRawTag(16);
      output.WriteInt64(VarToPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarToPlayerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarToPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(STOP_STREAM_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarToPlayerId) {
      VarToPlayerId = other.VarToPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarToPlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///뷰어가 등록된 카메라에게 스트림 전송을 요청한다.
/// </summary>
public sealed partial class CAMERA_WAKE_UP_REQ : pb::IMessage<CAMERA_WAKE_UP_REQ> {
  private static readonly pb::MessageParser<CAMERA_WAKE_UP_REQ> _parser = new pb::MessageParser<CAMERA_WAKE_UP_REQ>(() => new CAMERA_WAKE_UP_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CAMERA_WAKE_UP_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_WAKE_UP_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_WAKE_UP_REQ(CAMERA_WAKE_UP_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varType_ = other.varType_;
    varRoomNumber_ = other.varRoomNumber_;
    varToPlayerId_ = other.varToPlayerId_;
    varMachineId_ = other.varMachineId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_WAKE_UP_REQ Clone() {
    return new CAMERA_WAKE_UP_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktCameraWakeUpReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_type" field.</summary>
  public const int VarTypeFieldNumber = 2;
  private readonly static int VarTypeDefaultValue = 0;

  private int varType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarType {
    get { if ((_hasBits0 & 2) != 0) { return varType_; } else { return VarTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varType_ = value;
    }
  }
  /// <summary>Gets whether the "var_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 3;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 4) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_to_player_id" field.</summary>
  public const int VarToPlayerIdFieldNumber = 4;
  private readonly static long VarToPlayerIdDefaultValue = 0L;

  private long varToPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarToPlayerId {
    get { if ((_hasBits0 & 8) != 0) { return varToPlayerId_; } else { return VarToPlayerIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      varToPlayerId_ = value;
    }
  }
  /// <summary>Gets whether the "var_to_player_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarToPlayerId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "var_to_player_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarToPlayerId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "var_machine_id" field.</summary>
  public const int VarMachineIdFieldNumber = 5;
  private readonly static string VarMachineIdDefaultValue = "";

  private string varMachineId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMachineId {
    get { return varMachineId_ ?? VarMachineIdDefaultValue; }
    set {
      varMachineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_machine_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMachineId {
    get { return varMachineId_ != null; }
  }
  /// <summary>Clears the value of the "var_machine_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMachineId() {
    varMachineId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CAMERA_WAKE_UP_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CAMERA_WAKE_UP_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarType != other.VarType) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    if (VarToPlayerId != other.VarToPlayerId) return false;
    if (VarMachineId != other.VarMachineId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarType) hash ^= VarType.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (HasVarToPlayerId) hash ^= VarToPlayerId.GetHashCode();
    if (HasVarMachineId) hash ^= VarMachineId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarType) {
      output.WriteRawTag(16);
      output.WriteInt32(VarType);
    }
    if (HasVarRoomNumber) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomNumber);
    }
    if (HasVarToPlayerId) {
      output.WriteRawTag(32);
      output.WriteInt64(VarToPlayerId);
    }
    if (HasVarMachineId) {
      output.WriteRawTag(42);
      output.WriteString(VarMachineId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarType);
    }
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (HasVarToPlayerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarToPlayerId);
    }
    if (HasVarMachineId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMachineId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CAMERA_WAKE_UP_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarType) {
      VarType = other.VarType;
    }
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    if (other.HasVarToPlayerId) {
      VarToPlayerId = other.VarToPlayerId;
    }
    if (other.HasVarMachineId) {
      VarMachineId = other.VarMachineId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarType = input.ReadInt32();
          break;
        }
        case 24: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
        case 32: {
          VarToPlayerId = input.ReadInt64();
          break;
        }
        case 42: {
          VarMachineId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PRAY_MESSAGE_REQ : pb::IMessage<PRAY_MESSAGE_REQ> {
  private static readonly pb::MessageParser<PRAY_MESSAGE_REQ> _parser = new pb::MessageParser<PRAY_MESSAGE_REQ>(() => new PRAY_MESSAGE_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PRAY_MESSAGE_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REQ(PRAY_MESSAGE_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REQ Clone() {
    return new PRAY_MESSAGE_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktPrayMessageReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PRAY_MESSAGE_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PRAY_MESSAGE_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PRAY_MESSAGE_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class PRAY_MESSAGE_REG_REQ : pb::IMessage<PRAY_MESSAGE_REG_REQ> {
  private static readonly pb::MessageParser<PRAY_MESSAGE_REG_REQ> _parser = new pb::MessageParser<PRAY_MESSAGE_REG_REQ>(() => new PRAY_MESSAGE_REG_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PRAY_MESSAGE_REG_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REG_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REG_REQ(PRAY_MESSAGE_REG_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMessage_ = other.varMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REG_REQ Clone() {
    return new PRAY_MESSAGE_REG_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktPrayMessageRegReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private readonly static string VarMessageDefaultValue = "";

  private string varMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMessage {
    get { return varMessage_ ?? VarMessageDefaultValue; }
    set {
      varMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessage {
    get { return varMessage_ != null; }
  }
  /// <summary>Clears the value of the "var_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessage() {
    varMessage_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PRAY_MESSAGE_REG_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PRAY_MESSAGE_REG_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarMessage != other.VarMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarMessage) hash ^= VarMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarMessage) {
      output.WriteRawTag(18);
      output.WriteString(VarMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PRAY_MESSAGE_REG_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarMessage) {
      VarMessage = other.VarMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarMessage = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class QNA_REQ : pb::IMessage<QNA_REQ> {
  private static readonly pb::MessageParser<QNA_REQ> _parser = new pb::MessageParser<QNA_REQ>(() => new QNA_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QNA_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QNA_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QNA_REQ(QNA_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMessage_ = other.varMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QNA_REQ Clone() {
    return new QNA_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktQnaReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private readonly static string VarMessageDefaultValue = "";

  private string varMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMessage {
    get { return varMessage_ ?? VarMessageDefaultValue; }
    set {
      varMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessage {
    get { return varMessage_ != null; }
  }
  /// <summary>Clears the value of the "var_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessage() {
    varMessage_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QNA_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QNA_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarMessage != other.VarMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarMessage) hash ^= VarMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarMessage) {
      output.WriteRawTag(18);
      output.WriteString(VarMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QNA_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarMessage) {
      VarMessage = other.VarMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarMessage = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class MAIL_LIST_REQ : pb::IMessage<MAIL_LIST_REQ> {
  private static readonly pb::MessageParser<MAIL_LIST_REQ> _parser = new pb::MessageParser<MAIL_LIST_REQ>(() => new MAIL_LIST_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MAIL_LIST_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MAIL_LIST_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MAIL_LIST_REQ(MAIL_LIST_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MAIL_LIST_REQ Clone() {
    return new MAIL_LIST_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktMailListReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MAIL_LIST_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MAIL_LIST_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MAIL_LIST_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class REG_REQ : pb::IMessage<REG_REQ> {
  private static readonly pb::MessageParser<REG_REQ> _parser = new pb::MessageParser<REG_REQ>(() => new REG_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<REG_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public REG_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public REG_REQ(REG_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varId_ = other.varId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public REG_REQ Clone() {
    return new REG_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRegReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_id" field.</summary>
  public const int VarIdFieldNumber = 2;
  private readonly static int VarIdDefaultValue = 0;

  private int varId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarId {
    get { if ((_hasBits0 & 2) != 0) { return varId_; } else { return VarIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varId_ = value;
    }
  }
  /// <summary>Gets whether the "var_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as REG_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(REG_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarId != other.VarId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarId) hash ^= VarId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarId) {
      output.WriteRawTag(16);
      output.WriteInt32(VarId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(REG_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarId) {
      VarId = other.VarId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CLIENT_LOGOUT_REQ : pb::IMessage<CLIENT_LOGOUT_REQ> {
  private static readonly pb::MessageParser<CLIENT_LOGOUT_REQ> _parser = new pb::MessageParser<CLIENT_LOGOUT_REQ>(() => new CLIENT_LOGOUT_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CLIENT_LOGOUT_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLIENT_LOGOUT_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLIENT_LOGOUT_REQ(CLIENT_LOGOUT_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLIENT_LOGOUT_REQ Clone() {
    return new CLIENT_LOGOUT_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktClientLogoutReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CLIENT_LOGOUT_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CLIENT_LOGOUT_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CLIENT_LOGOUT_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class CAMERA_CONTROL_REQ : pb::IMessage<CAMERA_CONTROL_REQ> {
  private static readonly pb::MessageParser<CAMERA_CONTROL_REQ> _parser = new pb::MessageParser<CAMERA_CONTROL_REQ>(() => new CAMERA_CONTROL_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CAMERA_CONTROL_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_CONTROL_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_CONTROL_REQ(CAMERA_CONTROL_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varType_ = other.varType_;
    varMachineId_ = other.varMachineId_;
    varPlayerId_ = other.varPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_CONTROL_REQ Clone() {
    return new CAMERA_CONTROL_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktCameraControlReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_type" field.</summary>
  public const int VarTypeFieldNumber = 2;
  private readonly static global::CameraControlType VarTypeDefaultValue = global::CameraControlType.SwitchCamera;

  private global::CameraControlType varType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CameraControlType VarType {
    get { if ((_hasBits0 & 2) != 0) { return varType_; } else { return VarTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varType_ = value;
    }
  }
  /// <summary>Gets whether the "var_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_machine_id" field.</summary>
  public const int VarMachineIdFieldNumber = 3;
  private readonly static string VarMachineIdDefaultValue = "";

  private string varMachineId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMachineId {
    get { return varMachineId_ ?? VarMachineIdDefaultValue; }
    set {
      varMachineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_machine_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMachineId {
    get { return varMachineId_ != null; }
  }
  /// <summary>Clears the value of the "var_machine_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMachineId() {
    varMachineId_ = null;
  }

  /// <summary>Field number for the "var_player_id" field.</summary>
  public const int VarPlayerIdFieldNumber = 4;
  private readonly static long VarPlayerIdDefaultValue = 0L;

  private long varPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarPlayerId {
    get { if ((_hasBits0 & 4) != 0) { return varPlayerId_; } else { return VarPlayerIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varPlayerId_ = value;
    }
  }
  /// <summary>Gets whether the "var_player_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarPlayerId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_player_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarPlayerId() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CAMERA_CONTROL_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CAMERA_CONTROL_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarType != other.VarType) return false;
    if (VarMachineId != other.VarMachineId) return false;
    if (VarPlayerId != other.VarPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarType) hash ^= VarType.GetHashCode();
    if (HasVarMachineId) hash ^= VarMachineId.GetHashCode();
    if (HasVarPlayerId) hash ^= VarPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarType);
    }
    if (HasVarMachineId) {
      output.WriteRawTag(26);
      output.WriteString(VarMachineId);
    }
    if (HasVarPlayerId) {
      output.WriteRawTag(32);
      output.WriteInt64(VarPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarType);
    }
    if (HasVarMachineId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMachineId);
    }
    if (HasVarPlayerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CAMERA_CONTROL_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarType) {
      VarType = other.VarType;
    }
    if (other.HasVarMachineId) {
      VarMachineId = other.VarMachineId;
    }
    if (other.HasVarPlayerId) {
      VarPlayerId = other.VarPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarType = (global::CameraControlType) input.ReadEnum();
          break;
        }
        case 26: {
          VarMachineId = input.ReadString();
          break;
        }
        case 32: {
          VarPlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class MPEG2TS_MESSAGE_REQ : pb::IMessage<MPEG2TS_MESSAGE_REQ> {
  private static readonly pb::MessageParser<MPEG2TS_MESSAGE_REQ> _parser = new pb::MessageParser<MPEG2TS_MESSAGE_REQ>(() => new MPEG2TS_MESSAGE_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MPEG2TS_MESSAGE_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MPEG2TS_MESSAGE_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MPEG2TS_MESSAGE_REQ(MPEG2TS_MESSAGE_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMessage_ = other.varMessage_.Clone();
    varRoomNumber_ = other.varRoomNumber_;
    varType_ = other.varType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MPEG2TS_MESSAGE_REQ Clone() {
    return new MPEG2TS_MESSAGE_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktMpeg2TsMessageReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_varMessage_codec
      = pb::FieldCodec.ForBytes(18);
  private readonly pbc::RepeatedField<pb::ByteString> varMessage_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> VarMessage {
    get { return varMessage_; }
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 3;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 2) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_type" field.</summary>
  public const int VarTypeFieldNumber = 4;
  private readonly static int VarTypeDefaultValue = 0;

  private int varType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarType {
    get { if ((_hasBits0 & 4) != 0) { return varType_; } else { return VarTypeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varType_ = value;
    }
  }
  /// <summary>Gets whether the "var_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarType {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarType() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MPEG2TS_MESSAGE_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MPEG2TS_MESSAGE_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!varMessage_.Equals(other.varMessage_)) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    if (VarType != other.VarType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    hash ^= varMessage_.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (HasVarType) hash ^= VarType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    varMessage_.WriteTo(output, _repeated_varMessage_codec);
    if (HasVarRoomNumber) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomNumber);
    }
    if (HasVarType) {
      output.WriteRawTag(32);
      output.WriteInt32(VarType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    size += varMessage_.CalculateSize(_repeated_varMessage_codec);
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (HasVarType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MPEG2TS_MESSAGE_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    varMessage_.Add(other.varMessage_);
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    if (other.HasVarType) {
      VarType = other.VarType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          varMessage_.AddEntriesFrom(input, _repeated_varMessage_codec);
          break;
        }
        case 24: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
        case 32: {
          VarType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class REG_CAMERA_REQ : pb::IMessage<REG_CAMERA_REQ> {
  private static readonly pb::MessageParser<REG_CAMERA_REQ> _parser = new pb::MessageParser<REG_CAMERA_REQ>(() => new REG_CAMERA_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<REG_CAMERA_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public REG_CAMERA_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public REG_CAMERA_REQ(REG_CAMERA_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCamName_ = other.varCamName_;
    varMachineId_ = other.varMachineId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public REG_CAMERA_REQ Clone() {
    return new REG_CAMERA_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRegCameraReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_cam_name" field.</summary>
  public const int VarCamNameFieldNumber = 2;
  private readonly static string VarCamNameDefaultValue = "";

  private string varCamName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarCamName {
    get { return varCamName_ ?? VarCamNameDefaultValue; }
    set {
      varCamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_cam_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCamName {
    get { return varCamName_ != null; }
  }
  /// <summary>Clears the value of the "var_cam_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCamName() {
    varCamName_ = null;
  }

  /// <summary>Field number for the "var_machine_id" field.</summary>
  public const int VarMachineIdFieldNumber = 3;
  private readonly static string VarMachineIdDefaultValue = "";

  private string varMachineId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMachineId {
    get { return varMachineId_ ?? VarMachineIdDefaultValue; }
    set {
      varMachineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_machine_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMachineId {
    get { return varMachineId_ != null; }
  }
  /// <summary>Clears the value of the "var_machine_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMachineId() {
    varMachineId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as REG_CAMERA_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(REG_CAMERA_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCamName != other.VarCamName) return false;
    if (VarMachineId != other.VarMachineId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCamName) hash ^= VarCamName.GetHashCode();
    if (HasVarMachineId) hash ^= VarMachineId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCamName) {
      output.WriteRawTag(18);
      output.WriteString(VarCamName);
    }
    if (HasVarMachineId) {
      output.WriteRawTag(26);
      output.WriteString(VarMachineId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCamName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarCamName);
    }
    if (HasVarMachineId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMachineId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(REG_CAMERA_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCamName) {
      VarCamName = other.VarCamName;
    }
    if (other.HasVarMachineId) {
      VarMachineId = other.VarMachineId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarCamName = input.ReadString();
          break;
        }
        case 26: {
          VarMachineId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CAMERA_LIST_REQ : pb::IMessage<CAMERA_LIST_REQ> {
  private static readonly pb::MessageParser<CAMERA_LIST_REQ> _parser = new pb::MessageParser<CAMERA_LIST_REQ>(() => new CAMERA_LIST_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CAMERA_LIST_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_LIST_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_LIST_REQ(CAMERA_LIST_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_LIST_REQ Clone() {
    return new CAMERA_LIST_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktCameraListReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CAMERA_LIST_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CAMERA_LIST_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CAMERA_LIST_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class MACHINE_STATUS_REQ : pb::IMessage<MACHINE_STATUS_REQ> {
  private static readonly pb::MessageParser<MACHINE_STATUS_REQ> _parser = new pb::MessageParser<MACHINE_STATUS_REQ>(() => new MACHINE_STATUS_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MACHINE_STATUS_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MACHINE_STATUS_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MACHINE_STATUS_REQ(MACHINE_STATUS_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varToPlayerId_ = other.varToPlayerId_.Clone();
    varBattery_ = other.varBattery_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MACHINE_STATUS_REQ Clone() {
    return new MACHINE_STATUS_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktMachineStatusReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_to_player_id" field.</summary>
  public const int VarToPlayerIdFieldNumber = 5;
  private static readonly pb::FieldCodec<long> _repeated_varToPlayerId_codec
      = pb::FieldCodec.ForInt64(40);
  private readonly pbc::RepeatedField<long> varToPlayerId_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> VarToPlayerId {
    get { return varToPlayerId_; }
  }

  /// <summary>Field number for the "var_battery" field.</summary>
  public const int VarBatteryFieldNumber = 4;
  private readonly static int VarBatteryDefaultValue = 0;

  private int varBattery_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarBattery {
    get { if ((_hasBits0 & 2) != 0) { return varBattery_; } else { return VarBatteryDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varBattery_ = value;
    }
  }
  /// <summary>Gets whether the "var_battery" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarBattery {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_battery" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarBattery() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MACHINE_STATUS_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MACHINE_STATUS_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!varToPlayerId_.Equals(other.varToPlayerId_)) return false;
    if (VarBattery != other.VarBattery) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    hash ^= varToPlayerId_.GetHashCode();
    if (HasVarBattery) hash ^= VarBattery.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarBattery) {
      output.WriteRawTag(32);
      output.WriteInt32(VarBattery);
    }
    varToPlayerId_.WriteTo(output, _repeated_varToPlayerId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    size += varToPlayerId_.CalculateSize(_repeated_varToPlayerId_codec);
    if (HasVarBattery) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarBattery);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MACHINE_STATUS_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    varToPlayerId_.Add(other.varToPlayerId_);
    if (other.HasVarBattery) {
      VarBattery = other.VarBattery;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 32: {
          VarBattery = input.ReadInt32();
          break;
        }
        case 42:
        case 40: {
          varToPlayerId_.AddEntriesFrom(input, _repeated_varToPlayerId_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class VERIFY_PURCHASE_REQ : pb::IMessage<VERIFY_PURCHASE_REQ> {
  private static readonly pb::MessageParser<VERIFY_PURCHASE_REQ> _parser = new pb::MessageParser<VERIFY_PURCHASE_REQ>(() => new VERIFY_PURCHASE_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VERIFY_PURCHASE_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERIFY_PURCHASE_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERIFY_PURCHASE_REQ(VERIFY_PURCHASE_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varPackageName_ = other.varPackageName_;
    varPurchaseId_ = other.varPurchaseId_;
    varToken_ = other.varToken_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERIFY_PURCHASE_REQ Clone() {
    return new VERIFY_PURCHASE_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktVerifyPurchaseReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_package_name" field.</summary>
  public const int VarPackageNameFieldNumber = 2;
  private readonly static string VarPackageNameDefaultValue = "";

  private string varPackageName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarPackageName {
    get { return varPackageName_ ?? VarPackageNameDefaultValue; }
    set {
      varPackageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_package_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarPackageName {
    get { return varPackageName_ != null; }
  }
  /// <summary>Clears the value of the "var_package_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarPackageName() {
    varPackageName_ = null;
  }

  /// <summary>Field number for the "var_purchase_id" field.</summary>
  public const int VarPurchaseIdFieldNumber = 3;
  private readonly static string VarPurchaseIdDefaultValue = "";

  private string varPurchaseId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarPurchaseId {
    get { return varPurchaseId_ ?? VarPurchaseIdDefaultValue; }
    set {
      varPurchaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_purchase_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarPurchaseId {
    get { return varPurchaseId_ != null; }
  }
  /// <summary>Clears the value of the "var_purchase_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarPurchaseId() {
    varPurchaseId_ = null;
  }

  /// <summary>Field number for the "var_token" field.</summary>
  public const int VarTokenFieldNumber = 4;
  private readonly static string VarTokenDefaultValue = "";

  private string varToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarToken {
    get { return varToken_ ?? VarTokenDefaultValue; }
    set {
      varToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarToken {
    get { return varToken_ != null; }
  }
  /// <summary>Clears the value of the "var_token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarToken() {
    varToken_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VERIFY_PURCHASE_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VERIFY_PURCHASE_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarPackageName != other.VarPackageName) return false;
    if (VarPurchaseId != other.VarPurchaseId) return false;
    if (VarToken != other.VarToken) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarPackageName) hash ^= VarPackageName.GetHashCode();
    if (HasVarPurchaseId) hash ^= VarPurchaseId.GetHashCode();
    if (HasVarToken) hash ^= VarToken.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarPackageName) {
      output.WriteRawTag(18);
      output.WriteString(VarPackageName);
    }
    if (HasVarPurchaseId) {
      output.WriteRawTag(26);
      output.WriteString(VarPurchaseId);
    }
    if (HasVarToken) {
      output.WriteRawTag(34);
      output.WriteString(VarToken);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarPackageName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarPackageName);
    }
    if (HasVarPurchaseId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarPurchaseId);
    }
    if (HasVarToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarToken);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VERIFY_PURCHASE_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarPackageName) {
      VarPackageName = other.VarPackageName;
    }
    if (other.HasVarPurchaseId) {
      VarPurchaseId = other.VarPurchaseId;
    }
    if (other.HasVarToken) {
      VarToken = other.VarToken;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarPackageName = input.ReadString();
          break;
        }
        case 26: {
          VarPurchaseId = input.ReadString();
          break;
        }
        case 34: {
          VarToken = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class DEL_CAMERA_REQ : pb::IMessage<DEL_CAMERA_REQ> {
  private static readonly pb::MessageParser<DEL_CAMERA_REQ> _parser = new pb::MessageParser<DEL_CAMERA_REQ>(() => new DEL_CAMERA_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DEL_CAMERA_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DEL_CAMERA_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DEL_CAMERA_REQ(DEL_CAMERA_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMachineId_ = other.varMachineId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DEL_CAMERA_REQ Clone() {
    return new DEL_CAMERA_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktDelCameraReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_machine_id" field.</summary>
  public const int VarMachineIdFieldNumber = 2;
  private readonly static string VarMachineIdDefaultValue = "";

  private string varMachineId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMachineId {
    get { return varMachineId_ ?? VarMachineIdDefaultValue; }
    set {
      varMachineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_machine_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMachineId {
    get { return varMachineId_ != null; }
  }
  /// <summary>Clears the value of the "var_machine_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMachineId() {
    varMachineId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DEL_CAMERA_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DEL_CAMERA_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarMachineId != other.VarMachineId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarMachineId) hash ^= VarMachineId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarMachineId) {
      output.WriteRawTag(18);
      output.WriteString(VarMachineId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarMachineId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMachineId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DEL_CAMERA_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarMachineId) {
      VarMachineId = other.VarMachineId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarMachineId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class RECONNECT_REQ : pb::IMessage<RECONNECT_REQ> {
  private static readonly pb::MessageParser<RECONNECT_REQ> _parser = new pb::MessageParser<RECONNECT_REQ>(() => new RECONNECT_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RECONNECT_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RECONNECT_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RECONNECT_REQ(RECONNECT_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMachineId_ = other.varMachineId_;
    varMachineName_ = other.varMachineName_;
    varToken_ = other.varToken_;
    varIndex_ = other.varIndex_;
    varEmail_ = other.varEmail_;
    varName_ = other.varName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RECONNECT_REQ Clone() {
    return new RECONNECT_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktReconnectReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_machine_id" field.</summary>
  public const int VarMachineIdFieldNumber = 2;
  private readonly static string VarMachineIdDefaultValue = "";

  private string varMachineId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMachineId {
    get { return varMachineId_ ?? VarMachineIdDefaultValue; }
    set {
      varMachineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_machine_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMachineId {
    get { return varMachineId_ != null; }
  }
  /// <summary>Clears the value of the "var_machine_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMachineId() {
    varMachineId_ = null;
  }

  /// <summary>Field number for the "var_machine_name" field.</summary>
  public const int VarMachineNameFieldNumber = 3;
  private readonly static string VarMachineNameDefaultValue = "";

  private string varMachineName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMachineName {
    get { return varMachineName_ ?? VarMachineNameDefaultValue; }
    set {
      varMachineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_machine_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMachineName {
    get { return varMachineName_ != null; }
  }
  /// <summary>Clears the value of the "var_machine_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMachineName() {
    varMachineName_ = null;
  }

  /// <summary>Field number for the "var_token" field.</summary>
  public const int VarTokenFieldNumber = 4;
  private readonly static string VarTokenDefaultValue = "";

  private string varToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarToken {
    get { return varToken_ ?? VarTokenDefaultValue; }
    set {
      varToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarToken {
    get { return varToken_ != null; }
  }
  /// <summary>Clears the value of the "var_token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarToken() {
    varToken_ = null;
  }

  /// <summary>Field number for the "var_index" field.</summary>
  public const int VarIndexFieldNumber = 5;
  private readonly static long VarIndexDefaultValue = 0L;

  private long varIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarIndex {
    get { if ((_hasBits0 & 2) != 0) { return varIndex_; } else { return VarIndexDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varIndex_ = value;
    }
  }
  /// <summary>Gets whether the "var_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIndex {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIndex() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_email" field.</summary>
  public const int VarEmailFieldNumber = 6;
  private readonly static string VarEmailDefaultValue = "";

  private string varEmail_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarEmail {
    get { return varEmail_ ?? VarEmailDefaultValue; }
    set {
      varEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_email" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarEmail {
    get { return varEmail_ != null; }
  }
  /// <summary>Clears the value of the "var_email" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarEmail() {
    varEmail_ = null;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 7;
  private readonly static string VarNameDefaultValue = "";

  private string varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RECONNECT_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RECONNECT_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarMachineId != other.VarMachineId) return false;
    if (VarMachineName != other.VarMachineName) return false;
    if (VarToken != other.VarToken) return false;
    if (VarIndex != other.VarIndex) return false;
    if (VarEmail != other.VarEmail) return false;
    if (VarName != other.VarName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarMachineId) hash ^= VarMachineId.GetHashCode();
    if (HasVarMachineName) hash ^= VarMachineName.GetHashCode();
    if (HasVarToken) hash ^= VarToken.GetHashCode();
    if (HasVarIndex) hash ^= VarIndex.GetHashCode();
    if (HasVarEmail) hash ^= VarEmail.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarMachineId) {
      output.WriteRawTag(18);
      output.WriteString(VarMachineId);
    }
    if (HasVarMachineName) {
      output.WriteRawTag(26);
      output.WriteString(VarMachineName);
    }
    if (HasVarToken) {
      output.WriteRawTag(34);
      output.WriteString(VarToken);
    }
    if (HasVarIndex) {
      output.WriteRawTag(40);
      output.WriteInt64(VarIndex);
    }
    if (HasVarEmail) {
      output.WriteRawTag(50);
      output.WriteString(VarEmail);
    }
    if (HasVarName) {
      output.WriteRawTag(58);
      output.WriteString(VarName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarMachineId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMachineId);
    }
    if (HasVarMachineName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMachineName);
    }
    if (HasVarToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarToken);
    }
    if (HasVarIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarIndex);
    }
    if (HasVarEmail) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarEmail);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RECONNECT_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarMachineId) {
      VarMachineId = other.VarMachineId;
    }
    if (other.HasVarMachineName) {
      VarMachineName = other.VarMachineName;
    }
    if (other.HasVarToken) {
      VarToken = other.VarToken;
    }
    if (other.HasVarIndex) {
      VarIndex = other.VarIndex;
    }
    if (other.HasVarEmail) {
      VarEmail = other.VarEmail;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarMachineId = input.ReadString();
          break;
        }
        case 26: {
          VarMachineName = input.ReadString();
          break;
        }
        case 34: {
          VarToken = input.ReadString();
          break;
        }
        case 40: {
          VarIndex = input.ReadInt64();
          break;
        }
        case 50: {
          VarEmail = input.ReadString();
          break;
        }
        case 58: {
          VarName = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code

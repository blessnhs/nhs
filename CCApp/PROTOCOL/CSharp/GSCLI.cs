// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GS.CLI.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from GS.CLI.proto</summary>
public static partial class GSCLIReflection {

  #region Descriptor
  /// <summary>File descriptor for GS.CLI.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GSCLIReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxHUy5DTEkucHJvdG8aCkVudW0ucHJvdG8aD1N0cnVjdHVyZS5wcm90byJr",
          "CgtWRVJTSU9OX1JFUxIpCgJpZBgBIAEoDjIJLlBST1RPQ09MOhJJRF9QS1Rf",
          "VkVSU0lPTl9SRVMSEwoLdmFyX3ZlcnNpb24YAiABKAISHAoIdmFyX2NvZGUY",
          "AyABKA4yCi5FcnJvckNvZGUi4QEKCUxPR0lOX1JFUxInCgJpZBgBIAEoDjIJ",
          "LlBST1RPQ09MOhBJRF9QS1RfTE9HSU5fUkVTEhwKCHZhcl9jb2RlGAIgASgO",
          "MgouRXJyb3JDb2RlEhEKCXZhcl9pbmRleBgDIAEoAxISCgp2YXJfbG9jYWxl",
          "GAQgASgJEhAKCHZhcl9uYW1lGAUgASgJEhUKDXZhcl9tYWNoaW5lSWQYBiAB",
          "KAkSFwoPdmFyX21hY2hpbmVOYW1lGAcgASgJEhEKCXZhcl9lbWFpbBgIIAEo",
          "CRIRCgl2YXJfdG9rZW4YCSABKAkihQEKD0NSRUFURV9ST09NX1JFUxItCgJp",
          "ZBgBIAEoDjIJLlBST1RPQ09MOhZJRF9QS1RfQ1JFQVRFX1JPT01fUkVTEhAK",
          "CHZhcl9uYW1lGAIgASgJEhMKC3Zhcl9yb29tX2lkGAMgASgFEhwKCHZhcl9j",
          "b2RlGAQgASgOMgouRXJyb3JDb2RlIqcBCg5FTlRFUl9ST09NX1JFUxIsCgJp",
          "ZBgBIAEoDjIJLlBST1RPQ09MOhVJRF9QS1RfRU5URVJfUk9PTV9SRVMSEAoI",
          "dmFyX25hbWUYAiABKAkSEwoLdmFyX3Jvb21faWQYAyABKAUSHAoIdmFyX2Nv",
          "ZGUYBCABKA4yCi5FcnJvckNvZGUSIgoMdmFyX21lc3NhZ2VzGAUgAygLMgwu",
          "Um9vbU1lc3NhZ2UioAEKFE5FV19VU0VSX0lOX1JPT01fTlRZEjIKAmlkGAEg",
          "ASgOMgkuUFJPVE9DT0w6G0lEX1BLVF9ORVdfVVNFUl9JTl9ST09NX05UWRIk",
          "Cg12YXJfcm9vbV91c2VyGAIgASgLMg0uUm9vbVVzZXJJbmZvEhwKCHZhcl9j",
          "b2RlGAMgASgOMgouRXJyb3JDb2RlEhAKCHZhcl90eXBlGAQgASgFIpoBCg5M",
          "RUFWRV9ST09NX1JFUxIsCgJpZBgBIAEoDjIJLlBST1RPQ09MOhVJRF9QS1Rf",
          "TEVBVkVfUk9PTV9SRVMSEAoIdmFyX25hbWUYAiABKAkSHAoIdmFyX2NvZGUY",
          "AyABKA4yCi5FcnJvckNvZGUSEQoJdmFyX2luZGV4GAQgASgDEhcKD3Zhcl9y",
          "b29tX251bWJlchgFIAEoBSJ9Cg1ST09NX0xJU1RfUkVTEisKAmlkGAEgASgO",
          "MgkuUFJPVE9DT0w6FElEX1BLVF9ST09NX0xJU1RfUkVTEhwKCHZhcl9jb2Rl",
          "GAIgASgOMgouRXJyb3JDb2RlEiEKDXZhcl9yb29tX2xpc3QYAyADKAsyCi5S",
          "b29tSW5mbzIipwEKFVJPT01fUEFTU19USFJPVUdIX1JFUxIzCgJpZBgBIAEo",
          "DjIJLlBST1RPQ09MOhxJRF9QS1RfUk9PTV9QQVNTX1RIUk9VR0hfUkVTEhwK",
          "CHZhcl9jb2RlGAIgASgOMgouRXJyb3JDb2RlEiIKDHZhcl9tZXNzYWdlcxgD",
          "IAMoCzIMLlJvb21NZXNzYWdlEhcKD3Zhcl9yb29tX251bWJlchgEIAEoBSJV",
          "CgpOT1RJQ0VfUkVTEigKAmlkGAEgASgOMgkuUFJPVE9DT0w6EUlEX1BLVF9O",
          "T1RJQ0VfUkVTEh0KCHZhcl9saXN0GAIgAygLMgsuTm90aWZ5SW5mbyKyAQoS",
          "QklUTUFQX01FU1NBR0VfUkVTEjAKAmlkGAEgASgOMgkuUFJPVE9DT0w6GUlE",
          "X1BLVF9CSVRNQVBfTUVTU0FHRV9SRVMSHAoIdmFyX2NvZGUYAiABKA4yCi5F",
          "cnJvckNvZGUSEwoLdmFyX21lc3NhZ2UYAyADKAwSEAoIdmFyX25hbWUYBCAB",
          "KAwSEQoJdmFyX3dpZHRoGAUgASgFEhIKCnZhcl9oZWlnaHQYBiABKAUimgEK",
          "EUFVRElPX01FU1NBR0VfUkVTEi8KAmlkGAEgASgOMgkuUFJPVE9DT0w6GElE",
          "X1BLVF9BVURJT19NRVNTQUdFX1JFUxIcCgh2YXJfY29kZRgCIAEoDjIKLkVy",
          "cm9yQ29kZRITCgt2YXJfbWVzc2FnZRgDIAMoDBIQCgh2YXJfbmFtZRgEIAEo",
          "DBIPCgd2YXJfcG9zGAUgASgFIn0KEFBSQVlfTUVTU0FHRV9SRVMSLgoCaWQY",
          "ASABKA4yCS5QUk9UT0NPTDoXSURfUEtUX1BSQVlfTUVTU0FHRV9SRVMSHAoI",
          "dmFyX2NvZGUYAiABKA4yCi5FcnJvckNvZGUSGwoIdmFyX2xpc3QYAyADKAsy",
          "CS5QcmF5SW5mbyKPAQoUUFJBWV9NRVNTQUdFX1JFR19SRVMSMgoCaWQYASAB",
          "KA4yCS5QUk9UT0NPTDobSURfUEtUX1BSQVlfTUVTU0FHRV9SRUdfUkVTEhwK",
          "CHZhcl9jb2RlGAIgASgOMgouRXJyb3JDb2RlEhMKC3Zhcl9tZXNzYWdlGAMg",
          "ASgJEhAKCHZhcl90aW1lGAQgASgJIk4KB1FOQV9SRVMSJQoCaWQYASABKA4y",
          "CS5QUk9UT0NPTDoOSURfUEtUX1FOQV9SRVMSHAoIdmFyX2NvZGUYAiABKA4y",
          "Ci5FcnJvckNvZGUidwoNTUFJTF9MSVNUX1JFUxIrCgJpZBgBIAEoDjIJLlBS",
          "T1RPQ09MOhRJRF9QS1RfTUFJTF9MSVNUX1JFUxIcCgh2YXJfY29kZRgCIAEo",
          "DjIKLkVycm9yQ29kZRIbCgh2YXJfbGlzdBgDIAMoCzIJLk1haWxJbmZvIk4K",
          "B1JFR19SRVMSJQoCaWQYASABKA4yCS5QUk9UT0NPTDoOSURfUEtUX1JFR19S",
          "RVMSHAoIdmFyX2NvZGUYAiABKA4yCi5FcnJvckNvZGUiYgoRQ0xJRU5UX0xP",
          "R09VVF9SRVMSLwoCaWQYASABKA4yCS5QUk9UT0NPTDoYSURfUEtUX0NMSUVO",
          "VF9MT0dPVVRfUkVTEhwKCHZhcl9jb2RlGAIgASgOMgouRXJyb3JDb2RlIkUK",
          "C0NMSUVOVF9LSUNLEikKAmlkGAEgASgOMgkuUFJPVE9DT0w6EklEX1BLVF9D",
          "TElFTlRfS0lDSxILCgNzaWQYAiABKAUiuQEKEkNBTUVSQV9DT05UUk9MX1JF",
          "UxIwCgJpZBgBIAEoDjIJLlBST1RPQ09MOhlJRF9QS1RfQ0FNRVJBX0NPTlRS",
          "T0xfUkVTEhwKCHZhcl9jb2RlGAIgASgOMgouRXJyb3JDb2RlEiQKCHZhcl90",
          "eXBlGAMgASgOMhIuQ2FtZXJhQ29udHJvbFR5cGUSFgoOdmFyX21hY2hpbmVf",
          "aWQYBCABKAkSFQoNdmFyX3BsYXllcl9pZBgFIAEoAyKjAQoSQ0FNRVJBX1dB",
          "S0VfVVBfUkVTEjAKAmlkGAEgASgOMgkuUFJPVE9DT0w6GUlEX1BLVF9DQU1F",
          "UkFfV0FLRV9VUF9SRVMSEAoIdmFyX3R5cGUYAiABKAUSFwoPdmFyX3Jvb21f",
          "bnVtYmVyGAMgASgFEhgKEHZhcl90b19wbGF5ZXJfaWQYBCABKAUSFgoOdmFy",
          "X21hY2hpbmVfaWQYBSABKAkijQEKE01QRUcyVFNfTUVTU0FHRV9SRVMSMQoC",
          "aWQYASABKA4yCS5QUk9UT0NPTDoaSURfUEtUX01QRUcyVFNfTUVTU0FHRV9S",
          "RVMSHAoIdmFyX2NvZGUYAiABKA4yCi5FcnJvckNvZGUSEwoLdmFyX21lc3Nh",
          "Z2UYAyADKAwSEAoIdmFyX3R5cGUYBCABKAUiigEKDlJFR19DQU1FUkFfUkVT",
          "EiwKAmlkGAEgASgOMgkuUFJPVE9DT0w6FUlEX1BLVF9SRUdfQ0FNRVJBX1JF",
          "UxIcCgh2YXJfY29kZRgCIAEoDjIKLkVycm9yQ29kZRIUCgx2YXJfY2FtX25h",
          "bWUYAyABKAkSFgoOdmFyX21hY2hpbmVfaWQYBCABKAkieAoPU1RPUF9TVFJF",
          "QU1fUkVTEi0KAmlkGAEgASgOMgkuUFJPVE9DT0w6FklEX1BLVF9TVE9QX1NU",
          "UkVBTV9SRVMSHAoIdmFyX2NvZGUYAiABKA4yCi5FcnJvckNvZGUSGAoQdmFy",
          "X3RvX3BsYXllcl9pZBgDIAEoAyKWAQoPQ0FNRVJBX0xJU1RfUkVTEi0KAmlk",
          "GAEgASgOMgkuUFJPVE9DT0w6FklEX1BLVF9DQU1FUkFfTElTVF9SRVMSHAoI",
          "dmFyX2NvZGUYAiABKA4yCi5FcnJvckNvZGUSHwoKdmFyX2NhbWVyYRgDIAMo",
          "CzILLkNhbWVyYUluZm8SFQoNdmFyX3BsYXllcl9pZBgEIAEoAyJ5ChJNQUNI",
          "SU5FX1NUQVRVU19SRVMSMAoCaWQYASABKA4yCS5QUk9UT0NPTDoZSURfUEtU",
          "X01BQ0hJTkVfU1RBVFVTX1JFUxIcCgh2YXJfY29kZRgCIAEoDjIKLkVycm9y",
          "Q29kZRITCgt2YXJfYmF0dGVyeRgDIAEoBSKZAQoTVkVSSUZZX1BVUkNIQVNF",
          "X1JFUxIxCgJpZBgBIAEoDjIJLlBST1RPQ09MOhpJRF9QS1RfVkVSSUZZX1BV",
          "UkNIQVNFX1JFUxIYChB2YXJfcGFja2FnZV9uYW1lGAIgASgJEhcKD3Zhcl9w",
          "dXJjaGFzZV9pZBgDIAEoCRIcCgh2YXJfY29kZRgEIAEoDjIKLkVycm9yQ29k",
          "ZSJ0Cg5ERUxfQ0FNRVJBX1JFUxIsCgJpZBgBIAEoDjIJLlBST1RPQ09MOhVJ",
          "RF9QS1RfREVMX0NBTUVSQV9SRVMSHAoIdmFyX2NvZGUYAiABKA4yCi5FcnJv",
          "ckNvZGUSFgoOdmFyX21hY2hpbmVfaWQYAyABKAkibQoNUkVDT05ORUNUX1JF",
          "UxIrCgJpZBgBIAEoDjIJLlBST1RPQ09MOhRJRF9QS1RfUkVDT05ORUNUX1JF",
          "UxIcCgh2YXJfY29kZRgCIAEoDjIKLkVycm9yQ29kZRIRCgl2YXJfaW5kZXgY",
          "AyABKANCAkgB"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::EnumReflection.Descriptor, global::StructureReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::VERSION_RES), global::VERSION_RES.Parser, new[]{ "Id", "VarVersion", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LOGIN_RES), global::LOGIN_RES.Parser, new[]{ "Id", "VarCode", "VarIndex", "VarLocale", "VarName", "VarMachineId", "VarMachineName", "VarEmail", "VarToken" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CREATE_ROOM_RES), global::CREATE_ROOM_RES.Parser, new[]{ "Id", "VarName", "VarRoomId", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ENTER_ROOM_RES), global::ENTER_ROOM_RES.Parser, new[]{ "Id", "VarName", "VarRoomId", "VarCode", "VarMessages" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NEW_USER_IN_ROOM_NTY), global::NEW_USER_IN_ROOM_NTY.Parser, new[]{ "Id", "VarRoomUser", "VarCode", "VarType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LEAVE_ROOM_RES), global::LEAVE_ROOM_RES.Parser, new[]{ "Id", "VarName", "VarCode", "VarIndex", "VarRoomNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ROOM_LIST_RES), global::ROOM_LIST_RES.Parser, new[]{ "Id", "VarCode", "VarRoomList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ROOM_PASS_THROUGH_RES), global::ROOM_PASS_THROUGH_RES.Parser, new[]{ "Id", "VarCode", "VarMessages", "VarRoomNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NOTICE_RES), global::NOTICE_RES.Parser, new[]{ "Id", "VarList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BITMAP_MESSAGE_RES), global::BITMAP_MESSAGE_RES.Parser, new[]{ "Id", "VarCode", "VarMessage", "VarName", "VarWidth", "VarHeight" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AUDIO_MESSAGE_RES), global::AUDIO_MESSAGE_RES.Parser, new[]{ "Id", "VarCode", "VarMessage", "VarName", "VarPos" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PRAY_MESSAGE_RES), global::PRAY_MESSAGE_RES.Parser, new[]{ "Id", "VarCode", "VarList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PRAY_MESSAGE_REG_RES), global::PRAY_MESSAGE_REG_RES.Parser, new[]{ "Id", "VarCode", "VarMessage", "VarTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QNA_RES), global::QNA_RES.Parser, new[]{ "Id", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MAIL_LIST_RES), global::MAIL_LIST_RES.Parser, new[]{ "Id", "VarCode", "VarList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::REG_RES), global::REG_RES.Parser, new[]{ "Id", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CLIENT_LOGOUT_RES), global::CLIENT_LOGOUT_RES.Parser, new[]{ "Id", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CLIENT_KICK), global::CLIENT_KICK.Parser, new[]{ "Id", "Sid" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CAMERA_CONTROL_RES), global::CAMERA_CONTROL_RES.Parser, new[]{ "Id", "VarCode", "VarType", "VarMachineId", "VarPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CAMERA_WAKE_UP_RES), global::CAMERA_WAKE_UP_RES.Parser, new[]{ "Id", "VarType", "VarRoomNumber", "VarToPlayerId", "VarMachineId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MPEG2TS_MESSAGE_RES), global::MPEG2TS_MESSAGE_RES.Parser, new[]{ "Id", "VarCode", "VarMessage", "VarType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::REG_CAMERA_RES), global::REG_CAMERA_RES.Parser, new[]{ "Id", "VarCode", "VarCamName", "VarMachineId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::STOP_STREAM_RES), global::STOP_STREAM_RES.Parser, new[]{ "Id", "VarCode", "VarToPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CAMERA_LIST_RES), global::CAMERA_LIST_RES.Parser, new[]{ "Id", "VarCode", "VarCamera", "VarPlayerId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MACHINE_STATUS_RES), global::MACHINE_STATUS_RES.Parser, new[]{ "Id", "VarCode", "VarBattery" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::VERIFY_PURCHASE_RES), global::VERIFY_PURCHASE_RES.Parser, new[]{ "Id", "VarPackageName", "VarPurchaseId", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DEL_CAMERA_RES), global::DEL_CAMERA_RES.Parser, new[]{ "Id", "VarCode", "VarMachineId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RECONNECT_RES), global::RECONNECT_RES.Parser, new[]{ "Id", "VarCode", "VarIndex" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class VERSION_RES : pb::IMessage<VERSION_RES> {
  private static readonly pb::MessageParser<VERSION_RES> _parser = new pb::MessageParser<VERSION_RES>(() => new VERSION_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VERSION_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_RES(VERSION_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varVersion_ = other.varVersion_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_RES Clone() {
    return new VERSION_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktVersionRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_version" field.</summary>
  public const int VarVersionFieldNumber = 2;
  private readonly static float VarVersionDefaultValue = 0F;

  private float varVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float VarVersion {
    get { if ((_hasBits0 & 2) != 0) { return varVersion_; } else { return VarVersionDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varVersion_ = value;
    }
  }
  /// <summary>Gets whether the "var_version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarVersion {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarVersion() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 3;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 4) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VERSION_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VERSION_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VarVersion, other.VarVersion)) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarVersion) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VarVersion);
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarVersion) {
      output.WriteRawTag(21);
      output.WriteFloat(VarVersion);
    }
    if (HasVarCode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarVersion) {
      size += 1 + 4;
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VERSION_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarVersion) {
      VarVersion = other.VarVersion;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 21: {
          VarVersion = input.ReadFloat();
          break;
        }
        case 24: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class LOGIN_RES : pb::IMessage<LOGIN_RES> {
  private static readonly pb::MessageParser<LOGIN_RES> _parser = new pb::MessageParser<LOGIN_RES>(() => new LOGIN_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LOGIN_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_RES(LOGIN_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varIndex_ = other.varIndex_;
    varLocale_ = other.varLocale_;
    varName_ = other.varName_;
    varMachineId_ = other.varMachineId_;
    varMachineName_ = other.varMachineName_;
    varEmail_ = other.varEmail_;
    varToken_ = other.varToken_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_RES Clone() {
    return new LOGIN_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktLoginRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_index" field.</summary>
  public const int VarIndexFieldNumber = 3;
  private readonly static long VarIndexDefaultValue = 0L;

  private long varIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarIndex {
    get { if ((_hasBits0 & 4) != 0) { return varIndex_; } else { return VarIndexDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varIndex_ = value;
    }
  }
  /// <summary>Gets whether the "var_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIndex {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIndex() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_locale" field.</summary>
  public const int VarLocaleFieldNumber = 4;
  private readonly static string VarLocaleDefaultValue = "";

  private string varLocale_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarLocale {
    get { return varLocale_ ?? VarLocaleDefaultValue; }
    set {
      varLocale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_locale" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarLocale {
    get { return varLocale_ != null; }
  }
  /// <summary>Clears the value of the "var_locale" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarLocale() {
    varLocale_ = null;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 5;
  private readonly static string VarNameDefaultValue = "";

  private string varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_machineId" field.</summary>
  public const int VarMachineIdFieldNumber = 6;
  private readonly static string VarMachineIdDefaultValue = "";

  private string varMachineId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMachineId {
    get { return varMachineId_ ?? VarMachineIdDefaultValue; }
    set {
      varMachineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_machineId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMachineId {
    get { return varMachineId_ != null; }
  }
  /// <summary>Clears the value of the "var_machineId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMachineId() {
    varMachineId_ = null;
  }

  /// <summary>Field number for the "var_machineName" field.</summary>
  public const int VarMachineNameFieldNumber = 7;
  private readonly static string VarMachineNameDefaultValue = "";

  private string varMachineName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMachineName {
    get { return varMachineName_ ?? VarMachineNameDefaultValue; }
    set {
      varMachineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_machineName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMachineName {
    get { return varMachineName_ != null; }
  }
  /// <summary>Clears the value of the "var_machineName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMachineName() {
    varMachineName_ = null;
  }

  /// <summary>Field number for the "var_email" field.</summary>
  public const int VarEmailFieldNumber = 8;
  private readonly static string VarEmailDefaultValue = "";

  private string varEmail_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarEmail {
    get { return varEmail_ ?? VarEmailDefaultValue; }
    set {
      varEmail_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_email" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarEmail {
    get { return varEmail_ != null; }
  }
  /// <summary>Clears the value of the "var_email" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarEmail() {
    varEmail_ = null;
  }

  /// <summary>Field number for the "var_token" field.</summary>
  public const int VarTokenFieldNumber = 9;
  private readonly static string VarTokenDefaultValue = "";

  private string varToken_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarToken {
    get { return varToken_ ?? VarTokenDefaultValue; }
    set {
      varToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_token" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarToken {
    get { return varToken_ != null; }
  }
  /// <summary>Clears the value of the "var_token" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarToken() {
    varToken_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LOGIN_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LOGIN_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarIndex != other.VarIndex) return false;
    if (VarLocale != other.VarLocale) return false;
    if (VarName != other.VarName) return false;
    if (VarMachineId != other.VarMachineId) return false;
    if (VarMachineName != other.VarMachineName) return false;
    if (VarEmail != other.VarEmail) return false;
    if (VarToken != other.VarToken) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarIndex) hash ^= VarIndex.GetHashCode();
    if (HasVarLocale) hash ^= VarLocale.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarMachineId) hash ^= VarMachineId.GetHashCode();
    if (HasVarMachineName) hash ^= VarMachineName.GetHashCode();
    if (HasVarEmail) hash ^= VarEmail.GetHashCode();
    if (HasVarToken) hash ^= VarToken.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarIndex) {
      output.WriteRawTag(24);
      output.WriteInt64(VarIndex);
    }
    if (HasVarLocale) {
      output.WriteRawTag(34);
      output.WriteString(VarLocale);
    }
    if (HasVarName) {
      output.WriteRawTag(42);
      output.WriteString(VarName);
    }
    if (HasVarMachineId) {
      output.WriteRawTag(50);
      output.WriteString(VarMachineId);
    }
    if (HasVarMachineName) {
      output.WriteRawTag(58);
      output.WriteString(VarMachineName);
    }
    if (HasVarEmail) {
      output.WriteRawTag(66);
      output.WriteString(VarEmail);
    }
    if (HasVarToken) {
      output.WriteRawTag(74);
      output.WriteString(VarToken);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarIndex);
    }
    if (HasVarLocale) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarLocale);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarName);
    }
    if (HasVarMachineId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMachineId);
    }
    if (HasVarMachineName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMachineName);
    }
    if (HasVarEmail) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarEmail);
    }
    if (HasVarToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarToken);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LOGIN_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarIndex) {
      VarIndex = other.VarIndex;
    }
    if (other.HasVarLocale) {
      VarLocale = other.VarLocale;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarMachineId) {
      VarMachineId = other.VarMachineId;
    }
    if (other.HasVarMachineName) {
      VarMachineName = other.VarMachineName;
    }
    if (other.HasVarEmail) {
      VarEmail = other.VarEmail;
    }
    if (other.HasVarToken) {
      VarToken = other.VarToken;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 24: {
          VarIndex = input.ReadInt64();
          break;
        }
        case 34: {
          VarLocale = input.ReadString();
          break;
        }
        case 42: {
          VarName = input.ReadString();
          break;
        }
        case 50: {
          VarMachineId = input.ReadString();
          break;
        }
        case 58: {
          VarMachineName = input.ReadString();
          break;
        }
        case 66: {
          VarEmail = input.ReadString();
          break;
        }
        case 74: {
          VarToken = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CREATE_ROOM_RES : pb::IMessage<CREATE_ROOM_RES> {
  private static readonly pb::MessageParser<CREATE_ROOM_RES> _parser = new pb::MessageParser<CREATE_ROOM_RES>(() => new CREATE_ROOM_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CREATE_ROOM_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_RES(CREATE_ROOM_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varName_ = other.varName_;
    varRoomId_ = other.varRoomId_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_RES Clone() {
    return new CREATE_ROOM_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktCreateRoomRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 2;
  private readonly static string VarNameDefaultValue = "";

  private string varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_room_id" field.</summary>
  public const int VarRoomIdFieldNumber = 3;
  private readonly static int VarRoomIdDefaultValue = 0;

  private int varRoomId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomId {
    get { if ((_hasBits0 & 2) != 0) { return varRoomId_; } else { return VarRoomIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varRoomId_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_room_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 4;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 4) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CREATE_ROOM_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CREATE_ROOM_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarName != other.VarName) return false;
    if (VarRoomId != other.VarRoomId) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarRoomId) hash ^= VarRoomId.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarName) {
      output.WriteRawTag(18);
      output.WriteString(VarName);
    }
    if (HasVarRoomId) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomId);
    }
    if (HasVarCode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarName);
    }
    if (HasVarRoomId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomId);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CREATE_ROOM_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarRoomId) {
      VarRoomId = other.VarRoomId;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarName = input.ReadString();
          break;
        }
        case 24: {
          VarRoomId = input.ReadInt32();
          break;
        }
        case 32: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class ENTER_ROOM_RES : pb::IMessage<ENTER_ROOM_RES> {
  private static readonly pb::MessageParser<ENTER_ROOM_RES> _parser = new pb::MessageParser<ENTER_ROOM_RES>(() => new ENTER_ROOM_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ENTER_ROOM_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_RES(ENTER_ROOM_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varName_ = other.varName_;
    varRoomId_ = other.varRoomId_;
    varCode_ = other.varCode_;
    varMessages_ = other.varMessages_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_RES Clone() {
    return new ENTER_ROOM_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktEnterRoomRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 2;
  private readonly static string VarNameDefaultValue = "";

  private string varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_room_id" field.</summary>
  public const int VarRoomIdFieldNumber = 3;
  private readonly static int VarRoomIdDefaultValue = 0;

  private int varRoomId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomId {
    get { if ((_hasBits0 & 2) != 0) { return varRoomId_; } else { return VarRoomIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varRoomId_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_room_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 4;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 4) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_messages" field.</summary>
  public const int VarMessagesFieldNumber = 5;
  private static readonly pb::FieldCodec<global::RoomMessage> _repeated_varMessages_codec
      = pb::FieldCodec.ForMessage(42, global::RoomMessage.Parser);
  private readonly pbc::RepeatedField<global::RoomMessage> varMessages_ = new pbc::RepeatedField<global::RoomMessage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RoomMessage> VarMessages {
    get { return varMessages_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ENTER_ROOM_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ENTER_ROOM_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarName != other.VarName) return false;
    if (VarRoomId != other.VarRoomId) return false;
    if (VarCode != other.VarCode) return false;
    if(!varMessages_.Equals(other.varMessages_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarRoomId) hash ^= VarRoomId.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varMessages_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarName) {
      output.WriteRawTag(18);
      output.WriteString(VarName);
    }
    if (HasVarRoomId) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomId);
    }
    if (HasVarCode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) VarCode);
    }
    varMessages_.WriteTo(output, _repeated_varMessages_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarName);
    }
    if (HasVarRoomId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomId);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varMessages_.CalculateSize(_repeated_varMessages_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ENTER_ROOM_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarRoomId) {
      VarRoomId = other.VarRoomId;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varMessages_.Add(other.varMessages_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarName = input.ReadString();
          break;
        }
        case 24: {
          VarRoomId = input.ReadInt32();
          break;
        }
        case 32: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 42: {
          varMessages_.AddEntriesFrom(input, _repeated_varMessages_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class NEW_USER_IN_ROOM_NTY : pb::IMessage<NEW_USER_IN_ROOM_NTY> {
  private static readonly pb::MessageParser<NEW_USER_IN_ROOM_NTY> _parser = new pb::MessageParser<NEW_USER_IN_ROOM_NTY>(() => new NEW_USER_IN_ROOM_NTY());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NEW_USER_IN_ROOM_NTY> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NEW_USER_IN_ROOM_NTY() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NEW_USER_IN_ROOM_NTY(NEW_USER_IN_ROOM_NTY other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varRoomUser_ = other.HasVarRoomUser ? other.varRoomUser_.Clone() : null;
    varCode_ = other.varCode_;
    varType_ = other.varType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NEW_USER_IN_ROOM_NTY Clone() {
    return new NEW_USER_IN_ROOM_NTY(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktNewUserInRoomNty;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_room_user" field.</summary>
  public const int VarRoomUserFieldNumber = 2;
  private global::RoomUserInfo varRoomUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomUserInfo VarRoomUser {
    get { return varRoomUser_; }
    set {
      varRoomUser_ = value;
    }
  }
  /// <summary>Gets whether the var_room_user field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomUser {
    get { return varRoomUser_ != null; }
  }
  /// <summary>Clears the value of the var_room_user field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomUser() {
    varRoomUser_ = null;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 3;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_type" field.</summary>
  public const int VarTypeFieldNumber = 4;
  private readonly static int VarTypeDefaultValue = 0;

  private int varType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarType {
    get { if ((_hasBits0 & 4) != 0) { return varType_; } else { return VarTypeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varType_ = value;
    }
  }
  /// <summary>Gets whether the "var_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarType {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarType() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NEW_USER_IN_ROOM_NTY);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NEW_USER_IN_ROOM_NTY other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!object.Equals(VarRoomUser, other.VarRoomUser)) return false;
    if (VarCode != other.VarCode) return false;
    if (VarType != other.VarType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarRoomUser) hash ^= VarRoomUser.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarType) hash ^= VarType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarRoomUser) {
      output.WriteRawTag(18);
      output.WriteMessage(VarRoomUser);
    }
    if (HasVarCode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarType) {
      output.WriteRawTag(32);
      output.WriteInt32(VarType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarRoomUser) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(VarRoomUser);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NEW_USER_IN_ROOM_NTY other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarRoomUser) {
      if (!HasVarRoomUser) {
        VarRoomUser = new global::RoomUserInfo();
      }
      VarRoomUser.MergeFrom(other.VarRoomUser);
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarType) {
      VarType = other.VarType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          if (!HasVarRoomUser) {
            VarRoomUser = new global::RoomUserInfo();
          }
          input.ReadMessage(VarRoomUser);
          break;
        }
        case 24: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 32: {
          VarType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LEAVE_ROOM_RES : pb::IMessage<LEAVE_ROOM_RES> {
  private static readonly pb::MessageParser<LEAVE_ROOM_RES> _parser = new pb::MessageParser<LEAVE_ROOM_RES>(() => new LEAVE_ROOM_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LEAVE_ROOM_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_RES(LEAVE_ROOM_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varName_ = other.varName_;
    varCode_ = other.varCode_;
    varIndex_ = other.varIndex_;
    varRoomNumber_ = other.varRoomNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_RES Clone() {
    return new LEAVE_ROOM_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktLeaveRoomRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 2;
  private readonly static string VarNameDefaultValue = "";

  private string varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 3;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_index" field.</summary>
  public const int VarIndexFieldNumber = 4;
  private readonly static long VarIndexDefaultValue = 0L;

  private long varIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarIndex {
    get { if ((_hasBits0 & 4) != 0) { return varIndex_; } else { return VarIndexDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varIndex_ = value;
    }
  }
  /// <summary>Gets whether the "var_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIndex {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIndex() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 5;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 8) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 8;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LEAVE_ROOM_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LEAVE_ROOM_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarName != other.VarName) return false;
    if (VarCode != other.VarCode) return false;
    if (VarIndex != other.VarIndex) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarIndex) hash ^= VarIndex.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarName) {
      output.WriteRawTag(18);
      output.WriteString(VarName);
    }
    if (HasVarCode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarIndex) {
      output.WriteRawTag(32);
      output.WriteInt64(VarIndex);
    }
    if (HasVarRoomNumber) {
      output.WriteRawTag(40);
      output.WriteInt32(VarRoomNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarName);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarIndex);
    }
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LEAVE_ROOM_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarIndex) {
      VarIndex = other.VarIndex;
    }
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarName = input.ReadString();
          break;
        }
        case 24: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 32: {
          VarIndex = input.ReadInt64();
          break;
        }
        case 40: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ROOM_LIST_RES : pb::IMessage<ROOM_LIST_RES> {
  private static readonly pb::MessageParser<ROOM_LIST_RES> _parser = new pb::MessageParser<ROOM_LIST_RES>(() => new ROOM_LIST_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ROOM_LIST_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_RES(ROOM_LIST_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varRoomList_ = other.varRoomList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_RES Clone() {
    return new ROOM_LIST_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRoomListRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_room_list" field.</summary>
  public const int VarRoomListFieldNumber = 3;
  private static readonly pb::FieldCodec<global::RoomInfo2> _repeated_varRoomList_codec
      = pb::FieldCodec.ForMessage(26, global::RoomInfo2.Parser);
  private readonly pbc::RepeatedField<global::RoomInfo2> varRoomList_ = new pbc::RepeatedField<global::RoomInfo2>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RoomInfo2> VarRoomList {
    get { return varRoomList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ROOM_LIST_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ROOM_LIST_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varRoomList_.Equals(other.varRoomList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varRoomList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varRoomList_.WriteTo(output, _repeated_varRoomList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varRoomList_.CalculateSize(_repeated_varRoomList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ROOM_LIST_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varRoomList_.Add(other.varRoomList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varRoomList_.AddEntriesFrom(input, _repeated_varRoomList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ROOM_PASS_THROUGH_RES : pb::IMessage<ROOM_PASS_THROUGH_RES> {
  private static readonly pb::MessageParser<ROOM_PASS_THROUGH_RES> _parser = new pb::MessageParser<ROOM_PASS_THROUGH_RES>(() => new ROOM_PASS_THROUGH_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ROOM_PASS_THROUGH_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_RES(ROOM_PASS_THROUGH_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varMessages_ = other.varMessages_.Clone();
    varRoomNumber_ = other.varRoomNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_RES Clone() {
    return new ROOM_PASS_THROUGH_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRoomPassThroughRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_messages" field.</summary>
  public const int VarMessagesFieldNumber = 3;
  private static readonly pb::FieldCodec<global::RoomMessage> _repeated_varMessages_codec
      = pb::FieldCodec.ForMessage(26, global::RoomMessage.Parser);
  private readonly pbc::RepeatedField<global::RoomMessage> varMessages_ = new pbc::RepeatedField<global::RoomMessage>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RoomMessage> VarMessages {
    get { return varMessages_; }
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 4;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 4) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ROOM_PASS_THROUGH_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ROOM_PASS_THROUGH_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varMessages_.Equals(other.varMessages_)) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varMessages_.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varMessages_.WriteTo(output, _repeated_varMessages_codec);
    if (HasVarRoomNumber) {
      output.WriteRawTag(32);
      output.WriteInt32(VarRoomNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varMessages_.CalculateSize(_repeated_varMessages_codec);
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ROOM_PASS_THROUGH_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varMessages_.Add(other.varMessages_);
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varMessages_.AddEntriesFrom(input, _repeated_varMessages_codec);
          break;
        }
        case 32: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class NOTICE_RES : pb::IMessage<NOTICE_RES> {
  private static readonly pb::MessageParser<NOTICE_RES> _parser = new pb::MessageParser<NOTICE_RES>(() => new NOTICE_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NOTICE_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_RES(NOTICE_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varList_ = other.varList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_RES Clone() {
    return new NOTICE_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktNoticeRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_list" field.</summary>
  public const int VarListFieldNumber = 2;
  private static readonly pb::FieldCodec<global::NotifyInfo> _repeated_varList_codec
      = pb::FieldCodec.ForMessage(18, global::NotifyInfo.Parser);
  private readonly pbc::RepeatedField<global::NotifyInfo> varList_ = new pbc::RepeatedField<global::NotifyInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::NotifyInfo> VarList {
    get { return varList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NOTICE_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NOTICE_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!varList_.Equals(other.varList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    hash ^= varList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    varList_.WriteTo(output, _repeated_varList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    size += varList_.CalculateSize(_repeated_varList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NOTICE_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    varList_.Add(other.varList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          varList_.AddEntriesFrom(input, _repeated_varList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class BITMAP_MESSAGE_RES : pb::IMessage<BITMAP_MESSAGE_RES> {
  private static readonly pb::MessageParser<BITMAP_MESSAGE_RES> _parser = new pb::MessageParser<BITMAP_MESSAGE_RES>(() => new BITMAP_MESSAGE_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BITMAP_MESSAGE_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_RES(BITMAP_MESSAGE_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varMessage_ = other.varMessage_.Clone();
    varName_ = other.varName_;
    varWidth_ = other.varWidth_;
    varHeight_ = other.varHeight_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_RES Clone() {
    return new BITMAP_MESSAGE_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktBitmapMessageRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 3;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_varMessage_codec
      = pb::FieldCodec.ForBytes(26);
  private readonly pbc::RepeatedField<pb::ByteString> varMessage_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> VarMessage {
    get { return varMessage_; }
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 4;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_width" field.</summary>
  public const int VarWidthFieldNumber = 5;
  private readonly static int VarWidthDefaultValue = 0;

  private int varWidth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarWidth {
    get { if ((_hasBits0 & 4) != 0) { return varWidth_; } else { return VarWidthDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varWidth_ = value;
    }
  }
  /// <summary>Gets whether the "var_width" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarWidth {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_width" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarWidth() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_height" field.</summary>
  public const int VarHeightFieldNumber = 6;
  private readonly static int VarHeightDefaultValue = 0;

  private int varHeight_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarHeight {
    get { if ((_hasBits0 & 8) != 0) { return varHeight_; } else { return VarHeightDefaultValue; } }
    set {
      _hasBits0 |= 8;
      varHeight_ = value;
    }
  }
  /// <summary>Gets whether the "var_height" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarHeight {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "var_height" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarHeight() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BITMAP_MESSAGE_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BITMAP_MESSAGE_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varMessage_.Equals(other.varMessage_)) return false;
    if (VarName != other.VarName) return false;
    if (VarWidth != other.VarWidth) return false;
    if (VarHeight != other.VarHeight) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varMessage_.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarWidth) hash ^= VarWidth.GetHashCode();
    if (HasVarHeight) hash ^= VarHeight.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varMessage_.WriteTo(output, _repeated_varMessage_codec);
    if (HasVarName) {
      output.WriteRawTag(34);
      output.WriteBytes(VarName);
    }
    if (HasVarWidth) {
      output.WriteRawTag(40);
      output.WriteInt32(VarWidth);
    }
    if (HasVarHeight) {
      output.WriteRawTag(48);
      output.WriteInt32(VarHeight);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varMessage_.CalculateSize(_repeated_varMessage_codec);
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarWidth) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarWidth);
    }
    if (HasVarHeight) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarHeight);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BITMAP_MESSAGE_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varMessage_.Add(other.varMessage_);
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarWidth) {
      VarWidth = other.VarWidth;
    }
    if (other.HasVarHeight) {
      VarHeight = other.VarHeight;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varMessage_.AddEntriesFrom(input, _repeated_varMessage_codec);
          break;
        }
        case 34: {
          VarName = input.ReadBytes();
          break;
        }
        case 40: {
          VarWidth = input.ReadInt32();
          break;
        }
        case 48: {
          VarHeight = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AUDIO_MESSAGE_RES : pb::IMessage<AUDIO_MESSAGE_RES> {
  private static readonly pb::MessageParser<AUDIO_MESSAGE_RES> _parser = new pb::MessageParser<AUDIO_MESSAGE_RES>(() => new AUDIO_MESSAGE_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AUDIO_MESSAGE_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_RES(AUDIO_MESSAGE_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varMessage_ = other.varMessage_.Clone();
    varName_ = other.varName_;
    varPos_ = other.varPos_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_RES Clone() {
    return new AUDIO_MESSAGE_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktAudioMessageRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 3;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_varMessage_codec
      = pb::FieldCodec.ForBytes(26);
  private readonly pbc::RepeatedField<pb::ByteString> varMessage_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> VarMessage {
    get { return varMessage_; }
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 4;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_pos" field.</summary>
  public const int VarPosFieldNumber = 5;
  private readonly static int VarPosDefaultValue = 0;

  private int varPos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarPos {
    get { if ((_hasBits0 & 4) != 0) { return varPos_; } else { return VarPosDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varPos_ = value;
    }
  }
  /// <summary>Gets whether the "var_pos" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarPos {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_pos" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarPos() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AUDIO_MESSAGE_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AUDIO_MESSAGE_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varMessage_.Equals(other.varMessage_)) return false;
    if (VarName != other.VarName) return false;
    if (VarPos != other.VarPos) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varMessage_.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarPos) hash ^= VarPos.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varMessage_.WriteTo(output, _repeated_varMessage_codec);
    if (HasVarName) {
      output.WriteRawTag(34);
      output.WriteBytes(VarName);
    }
    if (HasVarPos) {
      output.WriteRawTag(40);
      output.WriteInt32(VarPos);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varMessage_.CalculateSize(_repeated_varMessage_codec);
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarPos) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarPos);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AUDIO_MESSAGE_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varMessage_.Add(other.varMessage_);
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarPos) {
      VarPos = other.VarPos;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varMessage_.AddEntriesFrom(input, _repeated_varMessage_codec);
          break;
        }
        case 34: {
          VarName = input.ReadBytes();
          break;
        }
        case 40: {
          VarPos = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PRAY_MESSAGE_RES : pb::IMessage<PRAY_MESSAGE_RES> {
  private static readonly pb::MessageParser<PRAY_MESSAGE_RES> _parser = new pb::MessageParser<PRAY_MESSAGE_RES>(() => new PRAY_MESSAGE_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PRAY_MESSAGE_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_RES(PRAY_MESSAGE_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varList_ = other.varList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_RES Clone() {
    return new PRAY_MESSAGE_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktPrayMessageRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_list" field.</summary>
  public const int VarListFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PrayInfo> _repeated_varList_codec
      = pb::FieldCodec.ForMessage(26, global::PrayInfo.Parser);
  private readonly pbc::RepeatedField<global::PrayInfo> varList_ = new pbc::RepeatedField<global::PrayInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PrayInfo> VarList {
    get { return varList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PRAY_MESSAGE_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PRAY_MESSAGE_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varList_.Equals(other.varList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varList_.WriteTo(output, _repeated_varList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varList_.CalculateSize(_repeated_varList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PRAY_MESSAGE_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varList_.Add(other.varList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varList_.AddEntriesFrom(input, _repeated_varList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PRAY_MESSAGE_REG_RES : pb::IMessage<PRAY_MESSAGE_REG_RES> {
  private static readonly pb::MessageParser<PRAY_MESSAGE_REG_RES> _parser = new pb::MessageParser<PRAY_MESSAGE_REG_RES>(() => new PRAY_MESSAGE_REG_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PRAY_MESSAGE_REG_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REG_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REG_RES(PRAY_MESSAGE_REG_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varMessage_ = other.varMessage_;
    varTime_ = other.varTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REG_RES Clone() {
    return new PRAY_MESSAGE_REG_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktPrayMessageRegRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 3;
  private readonly static string VarMessageDefaultValue = "";

  private string varMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMessage {
    get { return varMessage_ ?? VarMessageDefaultValue; }
    set {
      varMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessage {
    get { return varMessage_ != null; }
  }
  /// <summary>Clears the value of the "var_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessage() {
    varMessage_ = null;
  }

  /// <summary>Field number for the "var_time" field.</summary>
  public const int VarTimeFieldNumber = 4;
  private readonly static string VarTimeDefaultValue = "";

  private string varTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarTime {
    get { return varTime_ ?? VarTimeDefaultValue; }
    set {
      varTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarTime {
    get { return varTime_ != null; }
  }
  /// <summary>Clears the value of the "var_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarTime() {
    varTime_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PRAY_MESSAGE_REG_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PRAY_MESSAGE_REG_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarMessage != other.VarMessage) return false;
    if (VarTime != other.VarTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarMessage) hash ^= VarMessage.GetHashCode();
    if (HasVarTime) hash ^= VarTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarMessage) {
      output.WriteRawTag(26);
      output.WriteString(VarMessage);
    }
    if (HasVarTime) {
      output.WriteRawTag(34);
      output.WriteString(VarTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMessage);
    }
    if (HasVarTime) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PRAY_MESSAGE_REG_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarMessage) {
      VarMessage = other.VarMessage;
    }
    if (other.HasVarTime) {
      VarTime = other.VarTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          VarMessage = input.ReadString();
          break;
        }
        case 34: {
          VarTime = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class QNA_RES : pb::IMessage<QNA_RES> {
  private static readonly pb::MessageParser<QNA_RES> _parser = new pb::MessageParser<QNA_RES>(() => new QNA_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QNA_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QNA_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QNA_RES(QNA_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QNA_RES Clone() {
    return new QNA_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktQnaRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QNA_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QNA_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QNA_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class MAIL_LIST_RES : pb::IMessage<MAIL_LIST_RES> {
  private static readonly pb::MessageParser<MAIL_LIST_RES> _parser = new pb::MessageParser<MAIL_LIST_RES>(() => new MAIL_LIST_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MAIL_LIST_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MAIL_LIST_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MAIL_LIST_RES(MAIL_LIST_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varList_ = other.varList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MAIL_LIST_RES Clone() {
    return new MAIL_LIST_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktMailListRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_list" field.</summary>
  public const int VarListFieldNumber = 3;
  private static readonly pb::FieldCodec<global::MailInfo> _repeated_varList_codec
      = pb::FieldCodec.ForMessage(26, global::MailInfo.Parser);
  private readonly pbc::RepeatedField<global::MailInfo> varList_ = new pbc::RepeatedField<global::MailInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MailInfo> VarList {
    get { return varList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MAIL_LIST_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MAIL_LIST_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varList_.Equals(other.varList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varList_.WriteTo(output, _repeated_varList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varList_.CalculateSize(_repeated_varList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MAIL_LIST_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varList_.Add(other.varList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varList_.AddEntriesFrom(input, _repeated_varList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class REG_RES : pb::IMessage<REG_RES> {
  private static readonly pb::MessageParser<REG_RES> _parser = new pb::MessageParser<REG_RES>(() => new REG_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<REG_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public REG_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public REG_RES(REG_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public REG_RES Clone() {
    return new REG_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRegRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as REG_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(REG_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(REG_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class CLIENT_LOGOUT_RES : pb::IMessage<CLIENT_LOGOUT_RES> {
  private static readonly pb::MessageParser<CLIENT_LOGOUT_RES> _parser = new pb::MessageParser<CLIENT_LOGOUT_RES>(() => new CLIENT_LOGOUT_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CLIENT_LOGOUT_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLIENT_LOGOUT_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLIENT_LOGOUT_RES(CLIENT_LOGOUT_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLIENT_LOGOUT_RES Clone() {
    return new CLIENT_LOGOUT_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktClientLogoutRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CLIENT_LOGOUT_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CLIENT_LOGOUT_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CLIENT_LOGOUT_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class CLIENT_KICK : pb::IMessage<CLIENT_KICK> {
  private static readonly pb::MessageParser<CLIENT_KICK> _parser = new pb::MessageParser<CLIENT_KICK>(() => new CLIENT_KICK());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CLIENT_KICK> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLIENT_KICK() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLIENT_KICK(CLIENT_KICK other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    sid_ = other.sid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CLIENT_KICK Clone() {
    return new CLIENT_KICK(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktClientKick;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "sid" field.</summary>
  public const int SidFieldNumber = 2;
  private readonly static int SidDefaultValue = 0;

  private int sid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sid {
    get { if ((_hasBits0 & 2) != 0) { return sid_; } else { return SidDefaultValue; } }
    set {
      _hasBits0 |= 2;
      sid_ = value;
    }
  }
  /// <summary>Gets whether the "sid" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSid {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "sid" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSid() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CLIENT_KICK);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CLIENT_KICK other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Sid != other.Sid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasSid) hash ^= Sid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasSid) {
      output.WriteRawTag(16);
      output.WriteInt32(Sid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasSid) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CLIENT_KICK other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasSid) {
      Sid = other.Sid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          Sid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CAMERA_CONTROL_RES : pb::IMessage<CAMERA_CONTROL_RES> {
  private static readonly pb::MessageParser<CAMERA_CONTROL_RES> _parser = new pb::MessageParser<CAMERA_CONTROL_RES>(() => new CAMERA_CONTROL_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CAMERA_CONTROL_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_CONTROL_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_CONTROL_RES(CAMERA_CONTROL_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varType_ = other.varType_;
    varMachineId_ = other.varMachineId_;
    varPlayerId_ = other.varPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_CONTROL_RES Clone() {
    return new CAMERA_CONTROL_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktCameraControlRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_type" field.</summary>
  public const int VarTypeFieldNumber = 3;
  private readonly static global::CameraControlType VarTypeDefaultValue = global::CameraControlType.SwitchCamera;

  private global::CameraControlType varType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CameraControlType VarType {
    get { if ((_hasBits0 & 4) != 0) { return varType_; } else { return VarTypeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varType_ = value;
    }
  }
  /// <summary>Gets whether the "var_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarType {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarType() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_machine_id" field.</summary>
  public const int VarMachineIdFieldNumber = 4;
  private readonly static string VarMachineIdDefaultValue = "";

  private string varMachineId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMachineId {
    get { return varMachineId_ ?? VarMachineIdDefaultValue; }
    set {
      varMachineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_machine_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMachineId {
    get { return varMachineId_ != null; }
  }
  /// <summary>Clears the value of the "var_machine_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMachineId() {
    varMachineId_ = null;
  }

  /// <summary>Field number for the "var_player_id" field.</summary>
  public const int VarPlayerIdFieldNumber = 5;
  private readonly static long VarPlayerIdDefaultValue = 0L;

  private long varPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarPlayerId {
    get { if ((_hasBits0 & 8) != 0) { return varPlayerId_; } else { return VarPlayerIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      varPlayerId_ = value;
    }
  }
  /// <summary>Gets whether the "var_player_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarPlayerId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "var_player_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarPlayerId() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CAMERA_CONTROL_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CAMERA_CONTROL_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarType != other.VarType) return false;
    if (VarMachineId != other.VarMachineId) return false;
    if (VarPlayerId != other.VarPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarType) hash ^= VarType.GetHashCode();
    if (HasVarMachineId) hash ^= VarMachineId.GetHashCode();
    if (HasVarPlayerId) hash ^= VarPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarType) {
      output.WriteRawTag(24);
      output.WriteEnum((int) VarType);
    }
    if (HasVarMachineId) {
      output.WriteRawTag(34);
      output.WriteString(VarMachineId);
    }
    if (HasVarPlayerId) {
      output.WriteRawTag(40);
      output.WriteInt64(VarPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarType);
    }
    if (HasVarMachineId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMachineId);
    }
    if (HasVarPlayerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CAMERA_CONTROL_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarType) {
      VarType = other.VarType;
    }
    if (other.HasVarMachineId) {
      VarMachineId = other.VarMachineId;
    }
    if (other.HasVarPlayerId) {
      VarPlayerId = other.VarPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 24: {
          VarType = (global::CameraControlType) input.ReadEnum();
          break;
        }
        case 34: {
          VarMachineId = input.ReadString();
          break;
        }
        case 40: {
          VarPlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class CAMERA_WAKE_UP_RES : pb::IMessage<CAMERA_WAKE_UP_RES> {
  private static readonly pb::MessageParser<CAMERA_WAKE_UP_RES> _parser = new pb::MessageParser<CAMERA_WAKE_UP_RES>(() => new CAMERA_WAKE_UP_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CAMERA_WAKE_UP_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_WAKE_UP_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_WAKE_UP_RES(CAMERA_WAKE_UP_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varType_ = other.varType_;
    varRoomNumber_ = other.varRoomNumber_;
    varToPlayerId_ = other.varToPlayerId_;
    varMachineId_ = other.varMachineId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_WAKE_UP_RES Clone() {
    return new CAMERA_WAKE_UP_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktCameraWakeUpRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_type" field.</summary>
  public const int VarTypeFieldNumber = 2;
  private readonly static int VarTypeDefaultValue = 0;

  private int varType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarType {
    get { if ((_hasBits0 & 2) != 0) { return varType_; } else { return VarTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varType_ = value;
    }
  }
  /// <summary>Gets whether the "var_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 3;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 4) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_to_player_id" field.</summary>
  public const int VarToPlayerIdFieldNumber = 4;
  private readonly static int VarToPlayerIdDefaultValue = 0;

  private int varToPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarToPlayerId {
    get { if ((_hasBits0 & 8) != 0) { return varToPlayerId_; } else { return VarToPlayerIdDefaultValue; } }
    set {
      _hasBits0 |= 8;
      varToPlayerId_ = value;
    }
  }
  /// <summary>Gets whether the "var_to_player_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarToPlayerId {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "var_to_player_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarToPlayerId() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "var_machine_id" field.</summary>
  public const int VarMachineIdFieldNumber = 5;
  private readonly static string VarMachineIdDefaultValue = "";

  private string varMachineId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMachineId {
    get { return varMachineId_ ?? VarMachineIdDefaultValue; }
    set {
      varMachineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_machine_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMachineId {
    get { return varMachineId_ != null; }
  }
  /// <summary>Clears the value of the "var_machine_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMachineId() {
    varMachineId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CAMERA_WAKE_UP_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CAMERA_WAKE_UP_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarType != other.VarType) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    if (VarToPlayerId != other.VarToPlayerId) return false;
    if (VarMachineId != other.VarMachineId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarType) hash ^= VarType.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (HasVarToPlayerId) hash ^= VarToPlayerId.GetHashCode();
    if (HasVarMachineId) hash ^= VarMachineId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarType) {
      output.WriteRawTag(16);
      output.WriteInt32(VarType);
    }
    if (HasVarRoomNumber) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomNumber);
    }
    if (HasVarToPlayerId) {
      output.WriteRawTag(32);
      output.WriteInt32(VarToPlayerId);
    }
    if (HasVarMachineId) {
      output.WriteRawTag(42);
      output.WriteString(VarMachineId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarType);
    }
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (HasVarToPlayerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarToPlayerId);
    }
    if (HasVarMachineId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMachineId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CAMERA_WAKE_UP_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarType) {
      VarType = other.VarType;
    }
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    if (other.HasVarToPlayerId) {
      VarToPlayerId = other.VarToPlayerId;
    }
    if (other.HasVarMachineId) {
      VarMachineId = other.VarMachineId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarType = input.ReadInt32();
          break;
        }
        case 24: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
        case 32: {
          VarToPlayerId = input.ReadInt32();
          break;
        }
        case 42: {
          VarMachineId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class MPEG2TS_MESSAGE_RES : pb::IMessage<MPEG2TS_MESSAGE_RES> {
  private static readonly pb::MessageParser<MPEG2TS_MESSAGE_RES> _parser = new pb::MessageParser<MPEG2TS_MESSAGE_RES>(() => new MPEG2TS_MESSAGE_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MPEG2TS_MESSAGE_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MPEG2TS_MESSAGE_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MPEG2TS_MESSAGE_RES(MPEG2TS_MESSAGE_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varMessage_ = other.varMessage_.Clone();
    varType_ = other.varType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MPEG2TS_MESSAGE_RES Clone() {
    return new MPEG2TS_MESSAGE_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktMpeg2TsMessageRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 3;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_varMessage_codec
      = pb::FieldCodec.ForBytes(26);
  private readonly pbc::RepeatedField<pb::ByteString> varMessage_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> VarMessage {
    get { return varMessage_; }
  }

  /// <summary>Field number for the "var_type" field.</summary>
  public const int VarTypeFieldNumber = 4;
  private readonly static int VarTypeDefaultValue = 0;

  private int varType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarType {
    get { if ((_hasBits0 & 4) != 0) { return varType_; } else { return VarTypeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varType_ = value;
    }
  }
  /// <summary>Gets whether the "var_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarType {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarType() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MPEG2TS_MESSAGE_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MPEG2TS_MESSAGE_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varMessage_.Equals(other.varMessage_)) return false;
    if (VarType != other.VarType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varMessage_.GetHashCode();
    if (HasVarType) hash ^= VarType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varMessage_.WriteTo(output, _repeated_varMessage_codec);
    if (HasVarType) {
      output.WriteRawTag(32);
      output.WriteInt32(VarType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varMessage_.CalculateSize(_repeated_varMessage_codec);
    if (HasVarType) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MPEG2TS_MESSAGE_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varMessage_.Add(other.varMessage_);
    if (other.HasVarType) {
      VarType = other.VarType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varMessage_.AddEntriesFrom(input, _repeated_varMessage_codec);
          break;
        }
        case 32: {
          VarType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class REG_CAMERA_RES : pb::IMessage<REG_CAMERA_RES> {
  private static readonly pb::MessageParser<REG_CAMERA_RES> _parser = new pb::MessageParser<REG_CAMERA_RES>(() => new REG_CAMERA_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<REG_CAMERA_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public REG_CAMERA_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public REG_CAMERA_RES(REG_CAMERA_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varCamName_ = other.varCamName_;
    varMachineId_ = other.varMachineId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public REG_CAMERA_RES Clone() {
    return new REG_CAMERA_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRegCameraRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_cam_name" field.</summary>
  public const int VarCamNameFieldNumber = 3;
  private readonly static string VarCamNameDefaultValue = "";

  private string varCamName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarCamName {
    get { return varCamName_ ?? VarCamNameDefaultValue; }
    set {
      varCamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_cam_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCamName {
    get { return varCamName_ != null; }
  }
  /// <summary>Clears the value of the "var_cam_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCamName() {
    varCamName_ = null;
  }

  /// <summary>Field number for the "var_machine_id" field.</summary>
  public const int VarMachineIdFieldNumber = 4;
  private readonly static string VarMachineIdDefaultValue = "";

  private string varMachineId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMachineId {
    get { return varMachineId_ ?? VarMachineIdDefaultValue; }
    set {
      varMachineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_machine_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMachineId {
    get { return varMachineId_ != null; }
  }
  /// <summary>Clears the value of the "var_machine_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMachineId() {
    varMachineId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as REG_CAMERA_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(REG_CAMERA_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarCamName != other.VarCamName) return false;
    if (VarMachineId != other.VarMachineId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarCamName) hash ^= VarCamName.GetHashCode();
    if (HasVarMachineId) hash ^= VarMachineId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarCamName) {
      output.WriteRawTag(26);
      output.WriteString(VarCamName);
    }
    if (HasVarMachineId) {
      output.WriteRawTag(34);
      output.WriteString(VarMachineId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarCamName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarCamName);
    }
    if (HasVarMachineId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMachineId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(REG_CAMERA_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarCamName) {
      VarCamName = other.VarCamName;
    }
    if (other.HasVarMachineId) {
      VarMachineId = other.VarMachineId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          VarCamName = input.ReadString();
          break;
        }
        case 34: {
          VarMachineId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class STOP_STREAM_RES : pb::IMessage<STOP_STREAM_RES> {
  private static readonly pb::MessageParser<STOP_STREAM_RES> _parser = new pb::MessageParser<STOP_STREAM_RES>(() => new STOP_STREAM_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<STOP_STREAM_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public STOP_STREAM_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public STOP_STREAM_RES(STOP_STREAM_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varToPlayerId_ = other.varToPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public STOP_STREAM_RES Clone() {
    return new STOP_STREAM_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktStopStreamRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_to_player_id" field.</summary>
  public const int VarToPlayerIdFieldNumber = 3;
  private readonly static long VarToPlayerIdDefaultValue = 0L;

  private long varToPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarToPlayerId {
    get { if ((_hasBits0 & 4) != 0) { return varToPlayerId_; } else { return VarToPlayerIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varToPlayerId_ = value;
    }
  }
  /// <summary>Gets whether the "var_to_player_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarToPlayerId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_to_player_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarToPlayerId() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as STOP_STREAM_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(STOP_STREAM_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarToPlayerId != other.VarToPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarToPlayerId) hash ^= VarToPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarToPlayerId) {
      output.WriteRawTag(24);
      output.WriteInt64(VarToPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarToPlayerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarToPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(STOP_STREAM_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarToPlayerId) {
      VarToPlayerId = other.VarToPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 24: {
          VarToPlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class CAMERA_LIST_RES : pb::IMessage<CAMERA_LIST_RES> {
  private static readonly pb::MessageParser<CAMERA_LIST_RES> _parser = new pb::MessageParser<CAMERA_LIST_RES>(() => new CAMERA_LIST_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CAMERA_LIST_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_LIST_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_LIST_RES(CAMERA_LIST_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varCamera_ = other.varCamera_.Clone();
    varPlayerId_ = other.varPlayerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CAMERA_LIST_RES Clone() {
    return new CAMERA_LIST_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktCameraListRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_camera" field.</summary>
  public const int VarCameraFieldNumber = 3;
  private static readonly pb::FieldCodec<global::CameraInfo> _repeated_varCamera_codec
      = pb::FieldCodec.ForMessage(26, global::CameraInfo.Parser);
  private readonly pbc::RepeatedField<global::CameraInfo> varCamera_ = new pbc::RepeatedField<global::CameraInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CameraInfo> VarCamera {
    get { return varCamera_; }
  }

  /// <summary>Field number for the "var_player_id" field.</summary>
  public const int VarPlayerIdFieldNumber = 4;
  private readonly static long VarPlayerIdDefaultValue = 0L;

  private long varPlayerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarPlayerId {
    get { if ((_hasBits0 & 4) != 0) { return varPlayerId_; } else { return VarPlayerIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varPlayerId_ = value;
    }
  }
  /// <summary>Gets whether the "var_player_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarPlayerId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_player_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarPlayerId() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CAMERA_LIST_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CAMERA_LIST_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varCamera_.Equals(other.varCamera_)) return false;
    if (VarPlayerId != other.VarPlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varCamera_.GetHashCode();
    if (HasVarPlayerId) hash ^= VarPlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varCamera_.WriteTo(output, _repeated_varCamera_codec);
    if (HasVarPlayerId) {
      output.WriteRawTag(32);
      output.WriteInt64(VarPlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varCamera_.CalculateSize(_repeated_varCamera_codec);
    if (HasVarPlayerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarPlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CAMERA_LIST_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varCamera_.Add(other.varCamera_);
    if (other.HasVarPlayerId) {
      VarPlayerId = other.VarPlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varCamera_.AddEntriesFrom(input, _repeated_varCamera_codec);
          break;
        }
        case 32: {
          VarPlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class MACHINE_STATUS_RES : pb::IMessage<MACHINE_STATUS_RES> {
  private static readonly pb::MessageParser<MACHINE_STATUS_RES> _parser = new pb::MessageParser<MACHINE_STATUS_RES>(() => new MACHINE_STATUS_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MACHINE_STATUS_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MACHINE_STATUS_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MACHINE_STATUS_RES(MACHINE_STATUS_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varBattery_ = other.varBattery_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MACHINE_STATUS_RES Clone() {
    return new MACHINE_STATUS_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktMachineStatusRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_battery" field.</summary>
  public const int VarBatteryFieldNumber = 3;
  private readonly static int VarBatteryDefaultValue = 0;

  private int varBattery_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarBattery {
    get { if ((_hasBits0 & 4) != 0) { return varBattery_; } else { return VarBatteryDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varBattery_ = value;
    }
  }
  /// <summary>Gets whether the "var_battery" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarBattery {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_battery" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarBattery() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MACHINE_STATUS_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MACHINE_STATUS_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarBattery != other.VarBattery) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarBattery) hash ^= VarBattery.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarBattery) {
      output.WriteRawTag(24);
      output.WriteInt32(VarBattery);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarBattery) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarBattery);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MACHINE_STATUS_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarBattery) {
      VarBattery = other.VarBattery;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 24: {
          VarBattery = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class VERIFY_PURCHASE_RES : pb::IMessage<VERIFY_PURCHASE_RES> {
  private static readonly pb::MessageParser<VERIFY_PURCHASE_RES> _parser = new pb::MessageParser<VERIFY_PURCHASE_RES>(() => new VERIFY_PURCHASE_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VERIFY_PURCHASE_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERIFY_PURCHASE_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERIFY_PURCHASE_RES(VERIFY_PURCHASE_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varPackageName_ = other.varPackageName_;
    varPurchaseId_ = other.varPurchaseId_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERIFY_PURCHASE_RES Clone() {
    return new VERIFY_PURCHASE_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktVerifyPurchaseRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_package_name" field.</summary>
  public const int VarPackageNameFieldNumber = 2;
  private readonly static string VarPackageNameDefaultValue = "";

  private string varPackageName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarPackageName {
    get { return varPackageName_ ?? VarPackageNameDefaultValue; }
    set {
      varPackageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_package_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarPackageName {
    get { return varPackageName_ != null; }
  }
  /// <summary>Clears the value of the "var_package_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarPackageName() {
    varPackageName_ = null;
  }

  /// <summary>Field number for the "var_purchase_id" field.</summary>
  public const int VarPurchaseIdFieldNumber = 3;
  private readonly static string VarPurchaseIdDefaultValue = "";

  private string varPurchaseId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarPurchaseId {
    get { return varPurchaseId_ ?? VarPurchaseIdDefaultValue; }
    set {
      varPurchaseId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_purchase_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarPurchaseId {
    get { return varPurchaseId_ != null; }
  }
  /// <summary>Clears the value of the "var_purchase_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarPurchaseId() {
    varPurchaseId_ = null;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 4;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VERIFY_PURCHASE_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VERIFY_PURCHASE_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarPackageName != other.VarPackageName) return false;
    if (VarPurchaseId != other.VarPurchaseId) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarPackageName) hash ^= VarPackageName.GetHashCode();
    if (HasVarPurchaseId) hash ^= VarPurchaseId.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarPackageName) {
      output.WriteRawTag(18);
      output.WriteString(VarPackageName);
    }
    if (HasVarPurchaseId) {
      output.WriteRawTag(26);
      output.WriteString(VarPurchaseId);
    }
    if (HasVarCode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarPackageName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarPackageName);
    }
    if (HasVarPurchaseId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarPurchaseId);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VERIFY_PURCHASE_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarPackageName) {
      VarPackageName = other.VarPackageName;
    }
    if (other.HasVarPurchaseId) {
      VarPurchaseId = other.VarPurchaseId;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarPackageName = input.ReadString();
          break;
        }
        case 26: {
          VarPurchaseId = input.ReadString();
          break;
        }
        case 32: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class DEL_CAMERA_RES : pb::IMessage<DEL_CAMERA_RES> {
  private static readonly pb::MessageParser<DEL_CAMERA_RES> _parser = new pb::MessageParser<DEL_CAMERA_RES>(() => new DEL_CAMERA_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DEL_CAMERA_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DEL_CAMERA_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DEL_CAMERA_RES(DEL_CAMERA_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varMachineId_ = other.varMachineId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DEL_CAMERA_RES Clone() {
    return new DEL_CAMERA_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktDelCameraRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_machine_id" field.</summary>
  public const int VarMachineIdFieldNumber = 3;
  private readonly static string VarMachineIdDefaultValue = "";

  private string varMachineId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMachineId {
    get { return varMachineId_ ?? VarMachineIdDefaultValue; }
    set {
      varMachineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_machine_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMachineId {
    get { return varMachineId_ != null; }
  }
  /// <summary>Clears the value of the "var_machine_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMachineId() {
    varMachineId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DEL_CAMERA_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DEL_CAMERA_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarMachineId != other.VarMachineId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarMachineId) hash ^= VarMachineId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarMachineId) {
      output.WriteRawTag(26);
      output.WriteString(VarMachineId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarMachineId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMachineId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DEL_CAMERA_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarMachineId) {
      VarMachineId = other.VarMachineId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          VarMachineId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class RECONNECT_RES : pb::IMessage<RECONNECT_RES> {
  private static readonly pb::MessageParser<RECONNECT_RES> _parser = new pb::MessageParser<RECONNECT_RES>(() => new RECONNECT_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RECONNECT_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RECONNECT_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RECONNECT_RES(RECONNECT_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varIndex_ = other.varIndex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RECONNECT_RES Clone() {
    return new RECONNECT_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktReconnectRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_index" field.</summary>
  public const int VarIndexFieldNumber = 3;
  private readonly static long VarIndexDefaultValue = 0L;

  private long varIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarIndex {
    get { if ((_hasBits0 & 4) != 0) { return varIndex_; } else { return VarIndexDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varIndex_ = value;
    }
  }
  /// <summary>Gets whether the "var_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIndex {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIndex() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RECONNECT_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RECONNECT_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarIndex != other.VarIndex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarIndex) hash ^= VarIndex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarIndex) {
      output.WriteRawTag(24);
      output.WriteInt64(VarIndex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarIndex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RECONNECT_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarIndex) {
      VarIndex = other.VarIndex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 24: {
          VarIndex = input.ReadInt64();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
